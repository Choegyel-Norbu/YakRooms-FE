[{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/scripts/generate-icons.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/scripts/generate-yakrooms-icons.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":38,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":38,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":70,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":70,"endColumn":12}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport sharp from 'sharp';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Icon sizes for PWA\nconst iconSizes = [\n  { size: 72, name: 'icon-72x72.png' },\n  { size: 96, name: 'icon-96x96.png' },\n  { size: 128, name: 'icon-128x128.png' },\n  { size: 152, name: 'icon-152x152.png' },\n  { size: 192, name: 'icon-192x192.png' },\n  { size: 384, name: 'icon-384x384.png' },\n  { size: 512, name: 'icon-512x512.png' }\n];\n\n// Paths\nconst sourceImagePath = path.join(__dirname, '../public/images/YakRoomIcon.png');\nconst iconsDir = path.join(__dirname, '../public/icons');\n\n// Create icons directory if it doesn't exist\nif (!fs.existsSync(iconsDir)) {\n  fs.mkdirSync(iconsDir, { recursive: true });\n  console.log('✅ Created icons directory');\n}\n\nconsole.log('🎨 Generating PWA icons from YakRoomIcon.png...');\nconsole.log('📁 Source image:', sourceImagePath);\nconsole.log('📁 Output directory:', iconsDir);\n\n// Check if source image exists\nif (!fs.existsSync(sourceImagePath)) {\n  console.error('❌ Source image not found:', sourceImagePath);\n  console.log('Please ensure YakRoomIcon.png exists in public/images/');\n  process.exit(1);\n}\n\n// Generate icons using sharp\nasync function generateIcons() {\n  try {\n    for (const { size, name } of iconSizes) {\n      const outputPath = path.join(iconsDir, name);\n      \n      await sharp(sourceImagePath)\n        .resize(size, size, {\n          fit: 'contain',\n          background: { r: 255, g: 255, b: 255, alpha: 0 } // Transparent background\n        })\n        .png()\n        .toFile(outputPath);\n      \n      console.log(`✅ Generated ${name} (${size}x${size})`);\n    }\n    \n    console.log('\\n🎉 All PWA icons generated successfully!');\n    console.log('\\n📱 Icon files created:');\n    iconSizes.forEach(({ name }) => {\n      console.log(`   - ${name}`);\n    });\n    \n    console.log('\\n🔗 Test your icons on:');\n    console.log('- https://maskable.app/editor');\n    console.log('- Chrome DevTools > Application > Manifest');\n    \n  } catch (error) {\n    console.error('❌ Error generating icons:', error);\n    process.exit(1);\n  }\n}\n\n// Run the icon generation\ngenerateIcons(); ","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/scripts/test-pwa.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":14,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":14,"endColumn":10}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconsole.log('🔍 Testing YakRooms PWA Implementation...\\n');\n\n// Check if dist folder exists\nconst distPath = path.join(__dirname, '../dist');\nif (!fs.existsSync(distPath)) {\n  console.log('❌ Dist folder not found. Run \"npm run build\" first.');\n  process.exit(1);\n}\n\n// Check for required PWA files\nconst requiredFiles = [\n  'manifest.webmanifest',\n  'sw.js',\n  'workbox-74f2ef77.js',\n  'favicon.ico',\n  'apple-touch-icon.png',\n  'masked-icon.svg'\n];\n\nconst missingFiles = [];\nrequiredFiles.forEach(file => {\n  const filePath = path.join(distPath, file);\n  if (!fs.existsSync(filePath)) {\n    missingFiles.push(file);\n  }\n});\n\nif (missingFiles.length > 0) {\n  console.log('❌ Missing PWA files:', missingFiles.join(', '));\n} else {\n  console.log('✅ All required PWA files found');\n}\n\n// Check icons directory\nconst iconsPath = path.join(distPath, 'icons');\nif (fs.existsSync(iconsPath)) {\n  const iconFiles = fs.readdirSync(iconsPath);\n  const requiredIcons = [\n    'icon-72x72.png',\n    'icon-96x96.png',\n    'icon-128x128.png',\n    'icon-144x144.png',\n    'icon-152x152.png',\n    'icon-192x192.png',\n    'icon-384x384.png',\n    'icon-512x512.png'\n  ];\n  \n  const missingIcons = requiredIcons.filter(icon => !iconFiles.includes(icon));\n  \n  if (missingIcons.length > 0) {\n    console.log('❌ Missing icons:', missingIcons.join(', '));\n  } else {\n    console.log('✅ All required PWA icons found');\n  }\n} else {\n  console.log('❌ Icons directory not found');\n}\n\n// Check manifest content\nconst manifestPath = path.join(distPath, 'manifest.webmanifest');\nif (fs.existsSync(manifestPath)) {\n  try {\n    const manifestContent = fs.readFileSync(manifestPath, 'utf8');\n    const manifest = JSON.parse(manifestContent);\n    \n    const requiredManifestFields = [\n      'name',\n      'short_name',\n      'description',\n      'theme_color',\n      'background_color',\n      'display',\n      'start_url',\n      'icons'\n    ];\n    \n    const missingFields = requiredManifestFields.filter(field => !manifest[field]);\n    \n    if (missingFields.length > 0) {\n      console.log('❌ Missing manifest fields:', missingFields.join(', '));\n    } else {\n      console.log('✅ Manifest contains all required fields');\n    }\n    \n    if (manifest.icons && manifest.icons.length >= 8) {\n      console.log('✅ Manifest has sufficient icons');\n    } else {\n      console.log('❌ Manifest needs more icons');\n    }\n  } catch (error) {\n    console.log('❌ Error reading manifest:', error.message);\n  }\n}\n\nconsole.log('\\n🎉 PWA test completed!');\nconsole.log('\\n📋 Next steps:');\nconsole.log('1. Open Chrome DevTools > Application tab');\nconsole.log('2. Check Manifest section for proper configuration');\nconsole.log('3. Test install prompt in browser');\nconsole.log('4. Run Lighthouse audit for PWA compliance');\nconsole.log('5. Test offline functionality'); ","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/App.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/components/AuthTest.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/components/CsrfDebugger.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/components/CsrfTest.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/components/StorageTestComponent.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'isPrivateBrowsing' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"isPrivateBrowsing"},"fix":{"range":[638,659],"text":""},"desc":"Remove unused variable 'isPrivateBrowsing'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Storage Test Component\n * \n * A React component for testing and demonstrating cross-browser storage functionality.\n * This component can be used to validate storage compatibility in different browsers.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/shared/components/card';\nimport { Button } from '@/shared/components/button';\nimport { Badge } from '@/shared/components/badge';\nimport { \n  runStorageCompatibilityTest, \n  runQuickStorageTest,\n  logStorageDebugInfo \n} from '@/shared/utils/storageCompatibilityTest';\nimport { \n  getPlatformInfo,\n  getStorageInfo,\n  isPrivateBrowsing,\n  cleanupStorage\n} from '@/shared/utils/safariLocalStorage';\n\nconst StorageTestComponent = () => {\n  const [testResults, setTestResults] = useState(null);\n  const [platformInfo, setPlatformInfo] = useState(null);\n  const [storageInfo, setStorageInfo] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    // Load initial platform and storage information\n    const loadInitialInfo = async () => {\n      try {\n        const platform = getPlatformInfo();\n        setPlatformInfo(platform);\n        \n        const storage = await getStorageInfo();\n        setStorageInfo(storage);\n      } catch (error) {\n        console.error('Failed to load initial info:', error);\n      }\n    };\n\n    loadInitialInfo();\n  }, []);\n\n  const runQuickTest = async () => {\n    setIsLoading(true);\n    try {\n      const results = await runQuickStorageTest();\n      setTestResults({ ...results, type: 'quick' });\n    } catch (error) {\n      setTestResults({ error: error.message, type: 'quick' });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const runFullTest = async () => {\n    setIsLoading(true);\n    try {\n      const results = await runStorageCompatibilityTest();\n      setTestResults({ ...results.getSummary(), type: 'full', details: results });\n    } catch (error) {\n      setTestResults({ error: error.message, type: 'full' });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleCleanup = () => {\n    try {\n      cleanupStorage();\n      alert('Storage cleanup completed');\n    } catch (error) {\n      alert('Storage cleanup failed: ' + error.message);\n    }\n  };\n\n  const handleDebugLog = () => {\n    logStorageDebugInfo();\n  };\n\n  const getScoreColor = (score) => {\n    if (score >= 80) return 'bg-green-500';\n    if (score >= 60) return 'bg-yellow-500';\n    return 'bg-red-500';\n  };\n\n  const getScoreText = (score) => {\n    if (score >= 80) return 'EXCELLENT';\n    if (score >= 60) return 'GOOD';\n    if (score >= 40) return 'FAIR';\n    return 'POOR';\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-bold\">\n            Cross-Browser Storage Compatibility Test\n          </CardTitle>\n          <p className=\"text-gray-600\">\n            Test localStorage compatibility across different browsers and platforms\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex gap-4 flex-wrap\">\n            <Button \n              onClick={runQuickTest} \n              disabled={isLoading}\n              className=\"bg-blue-500 hover:bg-blue-600\"\n            >\n              {isLoading ? 'Testing...' : 'Quick Test'}\n            </Button>\n            <Button \n              onClick={runFullTest} \n              disabled={isLoading}\n              className=\"bg-purple-500 hover:bg-purple-600\"\n            >\n              {isLoading ? 'Testing...' : 'Full Test Suite'}\n            </Button>\n            <Button \n              onClick={handleCleanup}\n              variant=\"outline\"\n            >\n              Cleanup Storage\n            </Button>\n            <Button \n              onClick={handleDebugLog}\n              variant=\"outline\"\n            >\n              Debug Info\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Platform Information */}\n      {platformInfo && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Platform Information</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div>\n                <p className=\"font-medium text-gray-700\">Browser</p>\n                <p className=\"text-lg\">{platformInfo.browser} {platformInfo.browserVersion}</p>\n              </div>\n              <div>\n                <p className=\"font-medium text-gray-700\">Platform</p>\n                <p className=\"text-lg\">{platformInfo.platform}</p>\n              </div>\n              <div>\n                <p className=\"font-medium text-gray-700\">Storage Available</p>\n                <Badge className={platformInfo.storageAvailable ? 'bg-green-500' : 'bg-red-500'}>\n                  {platformInfo.storageAvailable ? 'Yes' : 'No'}\n                </Badge>\n              </div>\n              <div>\n                <p className=\"font-medium text-gray-700\">Private Browsing</p>\n                <Badge className={platformInfo.isPrivateBrowsing ? 'bg-yellow-500' : 'bg-green-500'}>\n                  {platformInfo.isPrivateBrowsing ? 'Yes' : 'No'}\n                </Badge>\n              </div>\n            </div>\n\n            {platformInfo.isPWA && (\n              <div className=\"mt-4\">\n                <Badge className=\"bg-blue-500\">PWA Mode Detected</Badge>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Storage Information */}\n      {storageInfo && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Storage Information</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div>\n                <p className=\"font-medium text-gray-700\">Total Quota</p>\n                <p className=\"text-lg\">\n                  {typeof storageInfo.quota === 'number' \n                    ? `${Math.round(storageInfo.quota / 1024 / 1024)} MB`\n                    : storageInfo.quota\n                  }\n                </p>\n              </div>\n              <div>\n                <p className=\"font-medium text-gray-700\">Used</p>\n                <p className=\"text-lg\">\n                  {typeof storageInfo.usage === 'number' \n                    ? `${Math.round(storageInfo.usage / 1024 / 1024)} MB`\n                    : storageInfo.usage\n                  }\n                </p>\n              </div>\n              <div>\n                <p className=\"font-medium text-gray-700\">Available</p>\n                <p className=\"text-lg\">\n                  {typeof storageInfo.available === 'number' \n                    ? `${Math.round(storageInfo.available / 1024 / 1024)} MB`\n                    : storageInfo.available\n                  }\n                </p>\n              </div>\n              <div>\n                <p className=\"font-medium text-gray-700\">Usage %</p>\n                <div className=\"flex items-center gap-2\">\n                  <p className=\"text-lg\">{storageInfo.usagePercent}%</p>\n                  {typeof storageInfo.usagePercent === 'number' && (\n                    <div className=\"flex-1 bg-gray-200 rounded-full h-2\">\n                      <div \n                        className={`h-2 rounded-full ${\n                          storageInfo.usagePercent > 80 ? 'bg-red-500' :\n                          storageInfo.usagePercent > 60 ? 'bg-yellow-500' : 'bg-green-500'\n                        }`}\n                        style={{ width: `${Math.min(storageInfo.usagePercent, 100)}%` }}\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Test Results */}\n      {testResults && (\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              Test Results ({testResults.type === 'quick' ? 'Quick Test' : 'Full Test Suite'})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {testResults.error ? (\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                <p className=\"text-red-800 font-medium\">Test Failed</p>\n                <p className=\"text-red-600\">{testResults.error}</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {/* Score Summary */}\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-center\">\n                    <div className={`inline-flex items-center justify-center w-16 h-16 rounded-full text-white text-xl font-bold ${getScoreColor(testResults.score)}`}>\n                      {testResults.score}%\n                    </div>\n                    <p className=\"mt-2 font-medium\">{getScoreText(testResults.score)}</p>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-3 gap-4 flex-1\">\n                    <div className=\"text-center\">\n                      <p className=\"text-2xl font-bold text-green-600\">{testResults.passedTests || 0}</p>\n                      <p className=\"text-sm text-gray-600\">Passed</p>\n                    </div>\n                    <div className=\"text-center\">\n                      <p className=\"text-2xl font-bold text-red-600\">{testResults.failedTests || 0}</p>\n                      <p className=\"text-sm text-gray-600\">Failed</p>\n                    </div>\n                    <div className=\"text-center\">\n                      <p className=\"text-2xl font-bold text-blue-600\">{testResults.totalTests || 0}</p>\n                      <p className=\"text-sm text-gray-600\">Total</p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Performance Summary */}\n                {testResults.performance && Object.keys(testResults.performance).length > 0 && (\n                  <div className=\"bg-gray-50 rounded-lg p-4\">\n                    <h4 className=\"font-medium mb-2\">Performance Summary</h4>\n                    <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 text-sm\">\n                      {Object.entries(testResults.performance).map(([test, duration]) => (\n                        <div key={test} className=\"flex justify-between\">\n                          <span className=\"capitalize\">{test.replace(/_/g, ' ')}:</span>\n                          <span className={duration > 100 ? 'text-red-600' : 'text-green-600'}>\n                            {duration.toFixed(2)}ms\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Errors and Warnings */}\n                {(testResults.errors > 0 || testResults.warnings > 0) && (\n                  <div className=\"space-y-2\">\n                    {testResults.errors > 0 && (\n                      <Badge className=\"bg-red-500\">\n                        {testResults.errors} Error{testResults.errors !== 1 ? 's' : ''}\n                      </Badge>\n                    )}\n                    {testResults.warnings > 0 && (\n                      <Badge className=\"bg-yellow-500\">\n                        {testResults.warnings} Warning{testResults.warnings !== 1 ? 's' : ''}\n                      </Badge>\n                    )}\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Usage Instructions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>How to Use</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-2 text-sm text-gray-600\">\n          <p><strong>Quick Test:</strong> Runs basic storage operations to verify core functionality</p>\n          <p><strong>Full Test Suite:</strong> Comprehensive testing including data types, performance, and error handling</p>\n          <p><strong>Cleanup Storage:</strong> Removes old/temporary data to free up space</p>\n          <p><strong>Debug Info:</strong> Logs detailed storage information to browser console</p>\n          <p className=\"mt-4 p-3 bg-blue-50 rounded\">\n            <strong>Note:</strong> This component tests the cross-browser localStorage utilities that ensure \n            compatibility across Safari, Chrome, Firefox, Edge, and other browsers, including private browsing modes.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default StorageTestComponent;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/admin/RoomManager.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'roomAdded' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":90,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":90,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"roomAdded"},"fix":{"range":[1945,1954],"text":""},"desc":"Remove unused variable 'roomAdded'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'hotelId'. Either include it or remove the dependency array.","line":213,"column":6,"nodeType":"ArrayExpression","endLine":213,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [hotelId]","fix":{"range":[6274,6276],"text":"[hotelId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'standardAmenities'. Either include it or remove the dependency array.","line":260,"column":6,"nodeType":"ArrayExpression","endLine":260,"endColumn":36,"suggestions":[{"desc":"Update the dependencies array to be: [editingRoom, showForm, rooms, standardAmenities]","fix":{"range":[7731,7761],"text":"[editingRoom, showForm, rooms, standardAmenities]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":353,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":353,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from \"react\";\nimport { \n  Plus, \n  Edit, \n  Trash2, \n  Check, \n  X, \n  Upload, \n  Bed, \n  Wifi, \n  Tv, \n  Snowflake, \n  Waves,\n  BedSingle,\n  BedDouble,\n  Bath,\n  Coffee,\n  Utensils,\n  Fan,\n  Mountain,\n  Leaf,\n  Flame,\n  MapPin,\n  ShieldCheck,\n  Landmark,\n  Zap,\n  Droplets,\n  Shirt,\n  Wind,\n  Lock,\n  Phone,\n  Lightbulb,\n  Refrigerator,\n  Users,\n  Clock\n} from \"lucide-react\";\nimport { uploadFile } from \"../../shared/services/uploadService\";\nimport { toast } from \"sonner\";\nimport { useAuth } from \"../authentication\";\nimport api from \"../../shared/services/Api\";\n\n// ShadCN UI Components\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/shared/components/card\";\nimport { Button } from \"@/shared/components/button\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/shared/components/tooltip\";\nimport { Input } from \"@/shared/components/input\";\nimport { Label } from \"@/shared/components/label\";\nimport { Textarea } from \"@/shared/components/textarea\";\nimport { Checkbox } from \"@/shared/components/checkbox\";\nimport { Badge } from \"@/shared/components/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/shared/components/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/shared/components/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/shared/components/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/shared/components/alert-dialog\";\n\nconst RoomManager = () => {\n  const { hotelId } = useAuth();\n  const [showForm, setShowForm] = useState(false);\n  const [editingRoom, setEditingRoom] = useState(null);\n  const [roomAdded, setRoomAdded] = useState(false);\n  const [rooms, setRooms] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(null);\n  const formRef = useRef(null);\n\n  // Form state\n  const [roomForm, setRoomForm] = useState({\n    roomType: \"\",\n    price: \"\",\n    roomNumber: \"\",\n    maxGuests: \"\",\n    available: true,\n    description: \"\",\n    images: [],\n    amenities: [],\n  });\n  const [errors, setErrors] = useState({});\n\n  // Constants\n  const standardAmenities = [\n    { id: 1, name: \"Single Bed\", icon: BedSingle },\n    { id: 2, name: \"Double Bed\", icon: BedDouble },\n    { id: 3, name: \"Wi-Fi\", icon: Wifi },\n    { id: 4, name: \"Smart TV\", icon: Tv },\n    { id: 5, name: \"Air Conditioning / Room Heater\", icon: Snowflake },\n    { id: 6, name: \"Private Bathroom\", icon: Bath },\n    { id: 7, name: \"Complimentary Tea/Coffee\", icon: Coffee },\n    { id: 8, name: \"Traditional Bhutanese Cuisine (on request)\", icon: Utensils },\n    { id: 9, name: \"Room Fan / Ventilation\", icon: Fan },\n    { id: 10, name: \"Scenic Mountain View\", icon: Mountain },\n    { id: 11, name: \"Eco-Friendly Amenities\", icon: Leaf },\n    { id: 12, name: \"In-room Fire Extinguisher\", icon: Flame },\n    { id: 13, name: \"Local Travel Assistance\", icon: MapPin },\n    { id: 14, name: \"24/7 Security\", icon: ShieldCheck },\n    { id: 15, name: \"Balcony\", icon: Landmark },\n    { id: 16, name: \"Water Boiler / Kettle\", icon: Zap },\n    { id: 17, name: \"Fresh Towels\", icon: Shirt },\n    { id: 18, name: \"Hot Water Supply\", icon: Droplets },\n    { id: 19, name: \"Room Heater\", icon: Wind },\n    { id: 20, name: \"Room Safe / Locker\", icon: Lock },\n    { id: 21, name: \"Telephone\", icon: Phone },\n    { id: 22, name: \"Reading Lights\", icon: Lightbulb },\n    { id: 23, name: \"Mini Refrigerator\", icon: Refrigerator },\n    { id: 24, name: \"Family Room (Multiple Guests)\", icon: Users },\n    { id: 25, name: \"24/7 Room Service\", icon: Clock },\n    { id: 26, name: \"Daily Housekeeping\", icon: Leaf },\n    { id: 27, name: \"Complimentary Toiletries\", icon: Bath },\n    { id: 28, name: \"Work Desk\", icon: Lightbulb },\n  ];\n\n  const roomTypeOptions = [\n    \"SINGLE\",\n    \"DOUBLE\",\n    \"DELUXE\",\n    \"SUITE\",\n    \"FAMILY\",\n    \"TWIN\",\n    \"KING\",\n    \"QUEEN\",\n  ];\n\n  // Validation rules\n  const validateField = (name, value) => {\n    switch (name) {\n      case \"roomType\":\n        return value ? \"\" : \"Room type is required\";\n      case \"price\":\n        if (!value) return \"Price is required\";\n        if (isNaN(value) || value <= 0)\n          return \"Price must be a positive number\";\n        return \"\";\n      case \"roomNumber\":\n        return value ? \"\" : \"Room number is required\";\n      case \"maxGuests\":\n        if (!value) return \"Max guests is required\";\n        if (isNaN(value) || value <= 0 || value > 10)\n          return \"Max guests must be between 1 and 10\";\n        return \"\";\n      case \"description\":\n        return value.length >= 20\n          ? \"\"\n          : \"Description must be at least 20 characters\";\n      case \"images\":\n        return value.length > 0 ? \"\" : \"At least one image is required\";\n      default:\n        return \"\";\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    newErrors.roomType = validateField(\"roomType\", roomForm.roomType);\n    newErrors.price = validateField(\"price\", roomForm.price);\n    newErrors.roomNumber = validateField(\"roomNumber\", roomForm.roomNumber);\n    newErrors.maxGuests = validateField(\"maxGuests\", roomForm.maxGuests);\n    newErrors.description = validateField(\"description\", roomForm.description);\n    newErrors.images = validateField(\"images\", roomForm.images);\n\n    setErrors(newErrors);\n    return !Object.values(newErrors).some((error) => error);\n  };\n\n  // Fetch rooms\n  useEffect(() => {\n    console.log(\"Hotel ID from RoomManager:\", hotelId);\n    const fetchRooms = async () => {\n      try {\n        setLoading(true);\n        const response = await api.get(`/rooms/hotel/${hotelId}`);\n        setRooms(response.data);\n      } catch (err) {\n        console.error(\"Error fetching rooms:\", err);\n        toast.error(\"Failed to load rooms\", {\n          duration: 6000\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchRooms();\n  }, []);\n\n  // Listen for localStorage changes\n  useEffect(() => {\n    const handleStorageChange = (e) => {\n      if (e.key === \"hotelId\") {\n        console.log(\"hotelId changed in localStorage:\", e.newValue);\n        // Optionally refetch rooms when hotelId changes\n        // fetchRooms();\n      }\n    };\n\n    window.addEventListener(\"storage\", handleStorageChange);\n    return () => window.removeEventListener(\"storage\", handleStorageChange);\n  }, []);\n\n  // Initialize form when editing\n  useEffect(() => {\n    if (editingRoom) {\n      const roomToEdit = rooms.find((room) => room.id === editingRoom);\n      if (roomToEdit) {\n        setRoomForm({\n          roomType: roomToEdit.roomType || \"\",\n          price: roomToEdit.price || \"\",\n          roomNumber: roomToEdit.roomNumber || \"\",\n          maxGuests: roomToEdit.maxGuests || \"\",\n          available: roomToEdit.available !== false,\n          description: roomToEdit.description || \"\",\n          images:\n            roomToEdit.imageUrl?.map((url, index) => ({\n              url,\n              name: `existing-${index}`,\n              isExisting: true,\n            })) || [],\n          amenities:\n            roomToEdit.amenities?.map(\n              (name) =>\n                standardAmenities.find((a) => a.name === name) || {\n                  name,\n                  id: Date.now(),\n                }\n            ) || [],\n        });\n      }\n    } else if (showForm) {\n      resetForm();\n    }\n  }, [editingRoom, showForm, rooms]);\n\n  const resetForm = () => {\n    setRoomForm({\n      roomType: \"\",\n      price: \"\",\n      roomNumber: \"\",\n      maxGuests: \"\",\n      available: true,\n      description: \"\",\n      images: [],\n      amenities: [],\n    });\n    setErrors({});\n  };\n\n  // Form handlers\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    const fieldValue = type === \"checkbox\" ? checked : value;\n\n    setRoomForm((prev) => ({\n      ...prev,\n      [name]: fieldValue,\n    }));\n\n    if (errors[name]) {\n      setErrors((prev) => ({\n        ...prev,\n        [name]: validateField(name, fieldValue),\n      }));\n    }\n  };\n\n  const handleSelectChange = (name, value) => {\n    setRoomForm((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n\n    if (errors[name]) {\n      setErrors((prev) => ({\n        ...prev,\n        [name]: validateField(name, value),\n      }));\n    }\n  };\n\n  const handleImageUpload = async (e) => {\n    const selectedFiles = Array.from(e.target.files);\n    const existingImages = roomForm.images || [];\n    const remainingSlots = 5 - existingImages.length;\n\n    if (remainingSlots <= 0) {\n      toast.error(\"You can only upload up to 5 images.\", {\n        duration: 6000\n      });\n      return;\n    }\n\n    // Validate file sizes (4MB limit per file)\n    const maxFileSize = 4 * 1024 * 1024; // 4MB in bytes\n    const oversizedFiles = selectedFiles.filter(file => file.size > maxFileSize);\n    \n    if (oversizedFiles.length > 0) {\n      const fileNames = oversizedFiles.map(file => file.name).join(', ');\n      toast.error(`File size too large: ${fileNames}`, {\n        description: \"Each image must be smaller than 4MB. Please compress your images and try again.\",\n        duration: 8000\n      });\n      return;\n    }\n\n    const filesToAdd = selectedFiles.slice(0, remainingSlots);\n\n    try {\n      const newImages = filesToAdd.map((file) => ({\n        file,\n        name: file.name,\n        type: file.type,\n        url: URL.createObjectURL(file),\n        isNew: true,\n      }));\n\n      setRoomForm((prev) => ({\n        ...prev,\n        images: [...existingImages, ...newImages],\n      }));\n\n      // Clear image validation error if images are added\n      if (errors.images) {\n        setErrors((prev) => ({ ...prev, images: \"\" }));\n      }\n    } catch (error) {\n      toast.error(\"Failed to process images\", {\n        duration: 6000\n      });\n    }\n  };\n\n  const removeImage = (index) => {\n    setRoomForm((prev) => ({\n      ...prev,\n      images: prev.images.filter((_, i) => i !== index),\n    }));\n  };\n\n  const toggleAmenity = (amenity) => {\n    setRoomForm((prev) => {\n      const exists = prev.amenities.some((a) => a.id === amenity.id);\n      return {\n        ...prev,\n        amenities: exists\n          ? prev.amenities.filter((a) => a.id !== amenity.id)\n          : [...prev.amenities, amenity],\n      };\n    });\n  };\n\n  const startEdit = (room) => {\n    setEditingRoom(room.id);\n    setShowForm(true);\n  };\n\n  const cancelEdit = () => {\n    setEditingRoom(null);\n    setShowForm(false);\n    setErrors({});\n  };\n\n  const scrollToFirstError = () => {\n    const firstError = Object.keys(errors).find((key) => errors[key]);\n    if (firstError) {\n      const element = formRef.current?.querySelector(`[name=\"${firstError}\"]`);\n      if (element) {\n        element.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n        element.focus();\n      }\n    }\n  };\n\n  // Submit handler\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    if (!validateForm()) {\n      scrollToFirstError();\n      setIsSubmitting(false);\n      return;\n    }\n\n    try {\n      // Upload new images\n      const imageUploadPromises = roomForm.images\n        .filter((img) => img.isNew && img.file)\n        .map((img) => uploadFile(img.file, \"photos\"));\n\n      const uploadResults = await Promise.all(imageUploadPromises);\n\n      // Combine existing and new image URLs\n      const existingImageUrls = roomForm.images\n        .filter((img) => img.isExisting)\n        .map((img) => img.url);\n\n      const newImageUrls = uploadResults\n        .filter((res) => res.field === \"photos\" && res.url)\n        .map((res) => res.url);\n\n      const allImageUrls = [...existingImageUrls, ...newImageUrls];\n\n      // Prepare payload\n      const payload = {\n        ...roomForm,\n        imageUrl: allImageUrls,\n        amenities: roomForm.amenities.map((a) => a.name),\n      };\n\n      // Submit form\n      if (editingRoom) {\n        await api.put(`/rooms/${editingRoom}`, payload);\n        toast.success(\"Room updated successfully!\", {\n          duration: 6000\n        });\n\n        // Update local state\n        setRooms((prev) =>\n          prev.map((room) =>\n            room.id === editingRoom\n              ? {\n                  ...room,\n                  ...payload,\n                  id: editingRoom,\n                  amenities: payload.amenities,\n                }\n              : room\n          )\n        );\n      } else {\n        const response = await api.post(\n          `/rooms/hotel/${hotelId}`,\n          payload\n        );\n        toast.success(\"Room added successfully!\", {\n          duration: 6000\n        });\n\n        // Add new room to local state\n        setRooms((prev) => [...prev, response.data]);\n        setRoomAdded(true);\n        setTimeout(() => setRoomAdded(false), 3000);\n      }\n\n      cancelEdit();\n    } catch (error) {\n      console.error(\"Error submitting room:\", error);\n\n      if (error.response?.data?.errors) {\n        const serverErrors = {};\n        Object.keys(error.response.data.errors).forEach((key) => {\n          serverErrors[key] = error.response.data.errors[key].join(\", \");\n        });\n        setErrors(serverErrors);\n        scrollToFirstError();\n      } else {\n        toast.error(\n          error.response?.data?.message ||\n            \"Failed to save room. Please try again.\",\n          {\n            duration: 6000\n          }\n        );\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Delete handler\n  const handleDelete = async (roomId) => {\n    setIsDeleting(roomId);\n    try {\n      await api.delete(`/rooms/${roomId}`);\n      setRooms((prev) => prev.filter((room) => room.id !== roomId));\n      toast.success(\"Room deleted successfully!\", {\n        duration: 6000\n      });\n    } catch (error) {\n      console.error(\"Error deleting room:\", error);\n      toast.error(\"Failed to delete room. Please try again.\", {\n        duration: 6000\n      });\n    } finally {\n      setIsDeleting(null);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 py-4 sm:py-8\">\n      {/* Responsive Header - Only Add Room button remains, with spacing */}\n      <div className=\"flex justify-end items-center mb-2 sm:mb-4\">\n        <Button \n          onClick={() => { setShowForm(true); setEditingRoom(null); }}\n          className=\"text-sm sm:text-base w-fit mr-2\"\n        >\n          Add Room\n        </Button>\n      </div>\n\n      {/* Room Form Dialog */}\n      <Dialog open={showForm} onOpenChange={setShowForm}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingRoom ? \"Edit Room\" : \"Add New Room\"}\n            </DialogTitle>\n            <DialogDescription>\n              {editingRoom ? \"Update room information below.\" : \"Fill in the details to add a new room.\"}\n            </DialogDescription>\n          </DialogHeader>\n\n          <form onSubmit={handleSubmit} ref={formRef} className=\"space-y-6\">\n            {/* First Row: Room Type, Price, Room Number */}\n            <div className=\"flex flex-col sm:flex-row flex-wrap gap-4\">\n              {/* Room Type */}\n              <div className=\"space-y-2 flex-1 min-w-[250px]\">\n                <Label htmlFor=\"roomType\">\n                  Room Type <span className=\"text-destructive\">*</span>\n                </Label>\n                <Select\n                  value={roomForm.roomType}\n                  onValueChange={(value) => handleSelectChange(\"roomType\", value)}\n                >\n                  <SelectTrigger className={errors.roomType ? \"border-destructive\" : \"\"}>\n                    <SelectValue placeholder=\"Select Room Type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {roomTypeOptions.map((type) => (\n                      <SelectItem key={type} value={type}>\n                        {type.charAt(0) + type.slice(1).toLowerCase()}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {errors.roomType && (\n                  <p className=\"text-sm text-destructive\">{errors.roomType}</p>\n                )}\n              </div>\n\n              {/* Price */}\n              <div className=\"space-y-2 flex-1 min-w-[250px]\">\n                <Label htmlFor=\"price\">\n                  Price per night (Nu.) <span className=\"text-destructive\">*</span>\n                </Label>\n                <Input\n                  id=\"price\"\n                  name=\"price\"\n                  type=\"number\"\n                  min=\"0\"\n                  step=\"1\"\n                  value={roomForm.price}\n                  onChange={handleInputChange}\n                  className={errors.price ? \"border-destructive\" : \"\"}\n                />\n                {errors.price && (\n                  <p className=\"text-sm text-destructive\">{errors.price}</p>\n                )}\n              </div>\n\n              {/* Room Number */}\n              <div className=\"space-y-2 flex-1 min-w-[250px]\">\n                <Label htmlFor=\"roomNumber\">\n                  Room Number <span className=\"text-destructive\">*</span>\n                </Label>\n                <Input\n                  id=\"roomNumber\"\n                  name=\"roomNumber\"\n                  value={roomForm.roomNumber}\n                  onChange={handleInputChange}\n                  className={errors.roomNumber ? \"border-destructive\" : \"\"}\n                />\n                {errors.roomNumber && (\n                  <p className=\"text-sm text-destructive\">{errors.roomNumber}</p>\n                )}\n              </div>\n            </div>\n\n            {/* Second Row: Max Guests */}\n            <div className=\"flex flex-col sm:flex-row flex-wrap gap-4\">\n              {/* Max Guests */}\n              <div className=\"space-y-2 flex-1 min-w-[250px]\">\n                <Label htmlFor=\"maxGuests\">\n                  Max Guests <span className=\"text-destructive\">*</span>\n                </Label>\n                <Input\n                  id=\"maxGuests\"\n                  name=\"maxGuests\"\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"10\"\n                  step=\"1\"\n                  value={roomForm.maxGuests}\n                  onChange={handleInputChange}\n                  placeholder=\"Enter max number of guests\"\n                  className={errors.maxGuests ? \"border-destructive\" : \"\"}\n                />\n                {errors.maxGuests && (\n                  <p className=\"text-sm text-destructive\">{errors.maxGuests}</p>\n                )}\n              </div>\n            </div>\n\n            {/* Availability Checkbox - Dedicated Row for Better Visibility */}\n            <div className=\"border rounded-lg p-4 bg-muted/20\">\n              <div className=\"space-y-3\">\n                <Label className=\"text-base font-medium\">Room Availability</Label>\n                <div className=\"flex items-center space-x-3\">\n                  <Checkbox\n                    id=\"available\"\n                    checked={roomForm.available}\n                    onCheckedChange={(checked) => \n                      setRoomForm(prev => ({ ...prev, available: checked }))\n                    }\n                    className=\"w-5 h-5\"\n                  />\n                  <Label htmlFor=\"available\" className=\"text-sm cursor-pointer select-none\">\n                    Make this room available for booking\n                  </Label>\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {roomForm.available \n                    ? \"✓ Guests can book this room\" \n                    : \"⚠️ Room is marked as not available for booking\"}\n                </p>\n              </div>\n            </div>\n\n            {/* Description */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">\n                Description <span className=\"text-destructive\">*</span>\n              </Label>\n              <Textarea\n                id=\"description\"\n                name=\"description\"\n                rows={3}\n                value={roomForm.description}\n                onChange={handleInputChange}\n                className={errors.description ? \"border-destructive\" : \"\"}\n              />\n              {errors.description && (\n                <p className=\"text-sm text-destructive\">{errors.description}</p>\n              )}\n            </div>\n\n            {/* Room Images */}\n            <div className=\"space-y-4\">\n              <Label>\n                Room Images <span className=\"text-destructive\">*</span>\n              </Label>\n\n              {/* Image Preview */}\n              {roomForm.images.length > 0 && (\n                <div className=\"flex flex-wrap gap-4\">\n                  {roomForm.images.map((image, index) => (\n                    <div key={index} className=\"relative group flex-shrink-0\">\n                      <img\n                        src={image.url}\n                        alt={`Room ${index + 1}`}\n                        className=\"w-24 h-24 sm:w-32 sm:h-24 object-cover rounded-lg border\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        className=\"absolute -top-2 -right-2 h-6 w-6 rounded-full p-0\"\n                        onClick={() => removeImage(index)}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              {/* Upload Area */}\n              <Card className=\"border-dashed border-2 hover:border-primary transition-colors cursor-pointer\">\n                <CardContent className=\"flex flex-col items-center justify-center p-6\">\n                  <Label htmlFor=\"imageUpload\" className=\"cursor-pointer flex flex-col items-center\">\n                    <Upload className=\"h-8 w-8 text-muted-foreground mb-2\" />\n                    <span className=\"text-sm text-muted-foreground\">\n                      Upload room images (max 5)\n                    </span>\n                    <Input\n                      id=\"imageUpload\"\n                      type=\"file\"\n                      accept=\"image/*\"\n                      multiple\n                      onChange={handleImageUpload}\n                      className=\"hidden\"\n                    />\n                  </Label>\n                </CardContent>\n              </Card>\n              {errors.images && (\n                <p className=\"text-sm text-destructive\">{errors.images}</p>\n              )}\n            </div>\n\n            {/* Amenities */}\n            <div className=\"space-y-4\">\n              <Label>Amenities</Label>\n              <div className=\"flex flex-row flex-wrap gap-3\">\n                {standardAmenities.map((amenity) => {\n                  const Icon = amenity.icon;\n                  const isSelected = roomForm.amenities.some((a) => a.id === amenity.id);\n                  return (\n                    <Card\n                      key={amenity.id}\n                      className={`cursor-pointer transition-colors ${\n                        isSelected\n                          ? \"border-primary bg-primary/5\"\n                          : \"hover:bg-accent\"\n                      }`}\n                      onClick={() => toggleAmenity(amenity)}\n                    >\n                      <CardContent className=\"flex items-center\">\n                        <Icon className={`h-4 w-4 mr-1 ${isSelected ? \"text-primary\" : \"text-muted-foreground\"}`} />\n                        <span className=\"text-sm\">{amenity.name}</span>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            </div>\n\n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={cancelEdit} disabled={isSubmitting}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={isSubmitting}>\n                {isSubmitting ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2\"></div>\n                    {editingRoom ? \"Updating...\" : \"Adding...\"}\n                  </>\n                ) : editingRoom ? (\n                  \"Update Room\"\n                ) : (\n                  \"Add Room\"\n                )}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Rooms Table */}\n      {/* <Card> */}\n        <CardHeader>\n          <CardTitle>All Rooms</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto scrollbar-hide\">\n            <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Room No.</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Max Guests</TableHead>\n                {/* <TableHead>Description</TableHead> */}\n                <TableHead>Price</TableHead>\n                <TableHead>Amenities</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {rooms.map((room) => (\n                <TableRow key={room.id}>\n                  <TableCell className=\"font-medium\">{room.roomNumber}</TableCell>\n                  <TableCell>{room.roomType}</TableCell>\n                  <TableCell className=\"text-center\">{room.maxGuests || '-'}</TableCell>\n                  {/* <TableCell className=\"max-w-xs truncate\">{room.description}</TableCell> */}\n                  <TableCell>Nu {typeof room.price === 'number' && !isNaN(room.price) ? room.price.toFixed(2) : '-'}</TableCell>\n                  <TableCell className=\"max-w-xs truncate\">\n                    {Array.isArray(room.amenities)\n                      ? room.amenities.join(\", \")\n                      : room.amenities}\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={room.available ? \"default\" : \"destructive\"}>\n                      {room.available ? \"Available\" : \"Not Available\"}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-2\">\n                      <TooltipProvider>\n                        <Tooltip>\n                          <TooltipTrigger asChild>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => startEdit(room)}\n                            >\n                              <Edit className=\"h-3 w-3\" />\n                            </Button>\n                          </TooltipTrigger>\n                          <TooltipContent side=\"top\" className=\"text-xs\">\n                            Edit room\n                          </TooltipContent>\n                        </Tooltip>\n                      </TooltipProvider>\n                      \n                      <TooltipProvider>\n                        <Tooltip>\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"destructive\"\n                                  disabled={isDeleting === room.id}\n                                >\n                                  {isDeleting === room.id ? (\n                                    <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-current\"></div>\n                                  ) : (\n                                    <Trash2 className=\"h-3 w-3\" />\n                                  )}\n                                </Button>\n                              </TooltipTrigger>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  This action cannot be undone. This will permanently delete the room\n                                  and remove all associated data.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                <AlertDialogAction onClick={() => handleDelete(room.id)}>\n                                  Delete\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                          <TooltipContent side=\"top\" className=\"text-xs\">\n                            Delete room\n                          </TooltipContent>\n                        </Tooltip>\n                      </TooltipProvider>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          </div>\n        </CardContent>\n      {/* </Card> */}\n    </div>\n  );\n};\n\nexport default RoomManager;","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/admin/StaffCardGrid.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":32,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchStaff'. Either include it or remove the dependency array.","line":234,"column":6,"nodeType":"ArrayExpression","endLine":234,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [fetchStaff, hotelId]","fix":{"range":[7868,7877],"text":"[fetchStaff, hotelId]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader } from '@/shared/components/card';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/shared/components/avatar';\nimport { Badge } from '@/shared/components/badge';\nimport { Button } from '@/shared/components/button';\nimport { Skeleton } from '@/shared/components/skeleton';\nimport api from \"../../shared/services/Api\";\nimport { \n  User, \n  Mail, \n  Phone, \n  Calendar, \n  Edit, \n  Trash2, \n  Users,\n  Shield,\n  UserCheck\n} from 'lucide-react';\n\n// Individual Staff Card Component\nconst StaffCard = ({ staff }) => {\n  const formatJoinDate = (dateString) => {\n    if (!dateString) return 'Date not available';\n    \n    try {\n      const date = new Date(dateString);\n      return `Joined on ${date.toLocaleDateString('en-US', { \n        year: 'numeric', \n        month: 'long', \n        day: 'numeric' \n      })}`;\n    } catch (error) {\n      return 'Date not available';\n    }\n  };\n\n  const getInitials = (name) => {\n    if (!name) return 'ST';\n    return name\n      .split(' ')\n      .map(word => word.charAt(0))\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const getRoleColor = (role) => {\n    const roleColors = {\n      'admin': 'bg-red-100 text-red-800 border-red-200',\n      'manager': 'bg-blue-100 text-blue-800 border-blue-200',\n      'receptionist': 'bg-green-100 text-green-800 border-green-200',\n      'housekeeping': 'bg-purple-100 text-purple-800 border-purple-200',\n      'maintenance': 'bg-orange-100 text-orange-800 border-orange-200',\n      'security': 'bg-gray-100 text-gray-800 border-gray-200',\n    };\n    \n    if (!role) return 'bg-gray-100 text-gray-800 border-gray-200';\n    return roleColors[role.toLowerCase()] || 'bg-gray-100 text-gray-800 border-gray-200';\n  };\n\n  const getPositionIcon = (position) => {\n    const positionIcons = {\n      'manager': Shield,\n      'admin': UserCheck,\n      'receptionist': User,\n      'housekeeping': User,\n      'maintenance': User,\n      'security': Shield,\n    };\n    \n    if (!position) return User;\n    const IconComponent = positionIcons[position.toLowerCase()] || User;\n    return IconComponent;\n  };\n\n  const PositionIcon = getPositionIcon(staff.position);\n\n  return (\n    <Card \n      className=\"group hover:shadow-lg transition-all duration-300 border-0 shadow-sm bg-white/80 backdrop-blur-sm hover:bg-white/90\"\n      role=\"article\"\n      aria-label={`Staff member ${staff.fullName || '-'}`}\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"relative\">\n              <Avatar className=\"h-12 w-12 ring-2 ring-gray-100\">\n                <AvatarImage \n                  src={staff.profilePictureUrl} \n                  alt={`${staff.fullName || 'Staff member'} profile picture`}\n                  className=\"object-cover\"\n                />\n                <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white font-semibold\">\n                  {getInitials(staff.fullName)}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"absolute -bottom-1 -right-1 bg-green-500 w-4 h-4 rounded-full border-2 border-white\"></div>\n            </div>\n            \n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-semibold text-gray-900 truncate text-lg\">\n                {staff.fullName || '-'}\n              </h3>\n              <div className=\"flex items-center gap-2 mt-1\">\n                {staff.position && (\n                  <Badge \n                    variant=\"secondary\" \n                    className={`text-xs font-medium ${getRoleColor(staff.position)}`}\n                  >\n                    <PositionIcon className=\"w-3 h-3 mr-1\" />\n                    {staff.position}\n                  </Badge>\n                )}\n                {staff.role && staff.role !== staff.position && (\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {staff.role}\n                  </Badge>\n                )}\n              </div>\n            </div>\n          </div>\n          \n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center text-sm text-gray-600\">\n            <Mail className=\"w-4 h-4 mr-2 text-gray-400\" />\n            <span className=\"truncate\" title={staff.staffEmail}>\n              {staff.staffEmail || 'No email provided'}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center text-sm text-gray-600\">\n            <Phone className=\"w-4 h-4 mr-2 text-gray-400\" />\n            <span>{staff.number || 'No phone provided'}</span>\n          </div>\n          \n          <div className=\"flex items-center text-sm text-gray-500\">\n            <Calendar className=\"w-4 h-4 mr-2 text-gray-400\" />\n            <span>{formatJoinDate(staff.dateJoined)}</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Loading Skeleton Component\nconst StaffCardSkeleton = () => (\n  <Card className=\"border-0 shadow-sm bg-white/80\">\n    <CardHeader className=\"pb-3\">\n      <div className=\"flex items-start space-x-3\">\n        <Skeleton className=\"h-12 w-12 rounded-full\" />\n        <div className=\"flex-1 space-y-2\">\n          <Skeleton className=\"h-5 w-32\" />\n          <Skeleton className=\"h-4 w-20\" />\n        </div>\n      </div>\n    </CardHeader>\n    <CardContent className=\"pt-0\">\n      <div className=\"space-y-3\">\n        <div className=\"flex items-center\">\n          <Skeleton className=\"h-4 w-4 mr-2\" />\n          <Skeleton className=\"h-4 w-40\" />\n        </div>\n        <div className=\"flex items-center\">\n          <Skeleton className=\"h-4 w-4 mr-2\" />\n          <Skeleton className=\"h-4 w-28\" />\n        </div>\n        <div className=\"flex items-center\">\n          <Skeleton className=\"h-4 w-4 mr-2\" />\n          <Skeleton className=\"h-4 w-36\" />\n        </div>\n      </div>\n    </CardContent>\n  </Card>\n);\n\n// Empty State Component\nconst EmptyState = () => (\n  <div className=\"col-span-full flex flex-col items-center justify-center py-16 text-center\">\n    <div className=\"w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mb-4\">\n      <Users className=\"w-10 h-10 text-gray-400\" />\n    </div>\n    <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Staff Members Found</h3>\n    <p className=\"text-gray-500 mb-6 max-w-sm\">\n      There are currently no staff members assigned to this hotel. Add some team members to get started.\n    </p>\n  </div>\n);\n\n// Main StaffCardGrid Component\nconst StaffCardGrid = ({ hotelId, className = \"\" }) => {\n  const [staff, setStaff] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // API call to fetch staff data\n  const fetchStaff = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const res = await api.get(`/staff/hotel/${hotelId}`);\n      \n      // Handle different response structures\n      const staffData = res.data?.content || res.data || [];\n      setStaff(staffData);\n     \n    } catch (err) {\n      console.error('Error fetching staff:', err);\n      if (err.response?.status === 404) {\n        setError('No staff members found for this hotel.');\n      } else {\n        setError('Failed to load staff members. Please try again.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    console.log('StaffCardGrid: hotelId =', hotelId);\n    if (hotelId) {\n      console.log('StaffCardGrid: Fetching staff for hotelId =', hotelId);\n      fetchStaff();\n    } else {\n      console.log('StaffCardGrid: No hotelId provided, not fetching staff');\n      setLoading(false);\n    }\n  }, [hotelId]);\n\n  if (error) {\n    return (\n      <div className={`rounded-lg bg-red-50 border border-red-200 p-6 text-center ${className}`}>\n        <div className=\"text-red-600 font-medium mb-2\">Error Loading Staff</div>\n        <div className=\"text-red-500 text-sm mb-4\">{error}</div>\n        <Button \n          variant=\"outline\" \n          onClick={fetchStaff}\n          className=\"border-red-300 text-red-600 hover:bg-red-50\"\n        >\n          Try Again\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`w-full ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className='pl-4'>\n          <h2 className=\"text-lg font-bold text-gray-900\">Staff Members</h2>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            {loading ? 'Loading...' : `${staff.length} staff member${staff.length !== 1 ? 's' : ''} found`}\n          </p>\n        </div>\n      </div>\n\n      {/* Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n        {loading ? (\n          // Loading skeletons\n          Array.from({ length: 8 }).map((_, index) => (\n            <StaffCardSkeleton key={index} />\n          ))\n        ) : staff.length === 0 ? (\n          // Empty state\n          <EmptyState />\n        ) : (\n          // Staff cards\n          staff.map((staffMember) => (\n            <StaffCard\n              key={staffMember.staffId}\n              staff={staffMember}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default StaffCardGrid;","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/admin/SuperAdmin.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'deletionRequestsPagination.pageSize'. Either include it or remove the dependency array.","line":184,"column":6,"nodeType":"ArrayExpression","endLine":184,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [deletionRequestsPagination.pageNumber, deletionRequestsPagination.pageSize]","fix":{"range":[6317,6356],"text":"[deletionRequestsPagination.pageNumber, deletionRequestsPagination.pageSize]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'pagination.pageSize'. Either include it or remove the dependency array.","line":214,"column":6,"nodeType":"ArrayExpression","endLine":214,"endColumn":38,"suggestions":[{"desc":"Update the dependencies array to be: [pagination.pageNumber, filters, pagination.pageSize]","fix":{"range":[7237,7269],"text":"[pagination.pageNumber, filters, pagination.pageSize]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from \"react\";\nimport { format } from \"date-fns\";\nimport api from \"../../shared/services/Api\";\nimport { CheckCircle, XCircle, ChevronLeft, ChevronRight, Home, ArrowLeft, Eye, X, MapPin, Phone, Mail, Globe, Calendar, Star, Bell, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/shared/components/button\";\nimport { Input } from \"@/shared/components/input\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/shared/components/select\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/shared/components/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/shared/components/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/shared/components/alert-dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/shared/components/table\";\nimport { Badge } from \"@/shared/components/badge\";\nimport { Label } from \"@/shared/components/label\";\nimport { toast } from \"sonner\";\nimport YakRoomsLoader from \"@/shared/components/YakRoomsLoader\";\nimport { SearchButton } from \"@/shared/components\";\n\nconst SuperAdmin = () => {\n  const [hotels, setHotels] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [verifyingHotelId, setVerifyingHotelId] = useState(null); // New state for tracking verification\n  const [selectedHotel, setSelectedHotel] = useState(null); // For hotel details modal\n  const [showHotelDetails, setShowHotelDetails] = useState(false); // Modal state\n\n  // Notification states\n  const [notifications, setNotifications] = useState([]);\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [loadingNotifications, setLoadingNotifications] = useState(false);\n  const notificationRef = useRef(null);\n\n  // Hotel deletion requests states\n  const [deletionRequests, setDeletionRequests] = useState([]);\n  const [loadingDeletionRequests, setLoadingDeletionRequests] = useState(false);\n  const [deletingHotelId, setDeletingHotelId] = useState(null); // Track which hotel is being deleted\n  const [deletionRequestsPagination, setDeletionRequestsPagination] = useState({\n    pageNumber: 0,\n    pageSize: 10,\n    totalPages: 1,\n    totalElements: 0,\n  });\n\n  const [pagination, setPagination] = useState({\n    pageNumber: 0,\n    pageSize: 10,\n    totalPages: 1,\n  });\n  const [filters, setFilters] = useState({\n    district: \"\",\n    verified: \"\",\n    searchQuery: \"\",\n  });\n\n  // Fetch notifications for super admin\n  useEffect(() => {\n    const fetchNotifications = async () => {\n      try {\n        setLoadingNotifications(true);\n        const response = await api.get(\"/notifications/hotel-deletion-requests\");\n        const fetchedNotifications = response.data;\n\n        // Filter notifications to show only HOTEL_DELETION_REQUEST type\n        const filteredNotifications = fetchedNotifications.filter(\n          (notif) => notif.type === \"HOTEL_DELETION_REQUEST\"\n        );\n\n        // Sort notifications by createdAt (newest first) and calculate unread count\n        const sortedNotifications = filteredNotifications.sort(\n          (a, b) => new Date(b.createdAt) - new Date(a.createdAt)\n        );\n\n        const unreadNotifications = sortedNotifications.filter(\n          (notif) => !notif.isRead\n        );\n\n        setNotifications(sortedNotifications);\n        setUnreadCount(unreadNotifications.length);\n\n        console.log(\"[API] Fetched super admin notifications:\", sortedNotifications);\n        console.log(\"[API] Unread count:\", unreadNotifications.length);\n      } catch (error) {\n        console.error(\"[API] Error fetching notifications:\", error);\n      } finally {\n        setLoadingNotifications(false);\n      }\n    };\n\n    fetchNotifications();\n  }, []);\n\n  // Fetch hotel deletion requests\n  useEffect(() => {\n    const fetchDeletionRequests = async () => {\n      try {\n        setLoadingDeletionRequests(true);\n        const params = {\n          page: deletionRequestsPagination.pageNumber,\n          size: deletionRequestsPagination.pageSize,\n        };\n\n        const response = await api.get(\"/hotels/deletion-requests\", { params });\n        \n        console.log(\"[DEBUG] Raw API response:\", response.data);\n        console.log(\"[DEBUG] Content array:\", response.data.content);\n        \n        // For debugging - show all hotels first, then filter\n        const allHotels = response.data.content || [];\n        console.log(\"[DEBUG] All hotels:\", allHotels);\n        console.log(\"[DEBUG] All hotels length:\", allHotels.length);\n        \n        // Check each hotel's deletionRequested status\n        allHotels.forEach((hotel, index) => {\n          console.log(`[DEBUG] Hotel ${index}:`, {\n            id: hotel.id,\n            name: hotel.name,\n            deletionRequested: hotel.deletionRequested,\n            deletionReason: hotel.deletionReason,\n            deletionRequestedAt: hotel.deletionRequestedAt\n          });\n        });\n        \n        // Filter hotels that have deletion requests\n        const hotelsWithDeletionRequests = allHotels.filter(\n          hotel => hotel.deletionRequested === true\n        );\n        \n        console.log(\"[DEBUG] Filtered hotels with deletion requests:\", hotelsWithDeletionRequests);\n        console.log(\"[DEBUG] Number of hotels with deletion requests:\", hotelsWithDeletionRequests.length);\n        \n        // TEMPORARY: Set all hotels for debugging\n        setDeletionRequests(allHotels);\n        setDeletionRequestsPagination((prev) => ({\n          ...prev,\n          totalPages: response.data.page?.totalPages || 1,\n          totalElements: response.data.page?.totalElements || 0,\n        }));\n      } catch (err) {\n        console.error(\"Error fetching deletion requests:\", err);\n        toast.error(\"Failed to fetch deletion requests\");\n      } finally {\n        setLoadingDeletionRequests(false);\n      }\n    };\n\n    fetchDeletionRequests();\n  }, [deletionRequestsPagination.pageNumber]);\n\n  useEffect(() => {\n    const fetchHotels = async () => {\n      try {\n        setLoading(true);\n        const params = {\n          page: pagination.pageNumber,\n          size: pagination.pageSize,\n          ...(filters.district && { district: filters.district }),\n          ...(filters.verified !== \"\" &&\n            filters.verified !== \"all\" && { verified: filters.verified }), // Handle \"all\" case\n          ...(filters.searchQuery && { search: filters.searchQuery }),\n        };\n\n        const response = await api.get(\"/hotels/superAdmin\", { params });\n        setHotels(response.data.content);\n        setPagination((prev) => ({\n          ...prev,\n          totalPages: response.data.totalPages,\n        }));\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchHotels();\n  }, [pagination.pageNumber, filters]);\n\n  const hasMissingData = (hotel) => {\n    return (\n      !hotel.name || !hotel.phone || !hotel.licenseUrl || !hotel.idProofUrl\n    );\n  };\n\n  const handleVerifyHotel = async (hotelId) => {\n    setVerifyingHotelId(hotelId); // Set the ID of the hotel being verified\n    try {\n      const res = await api.post(`/hotels/${hotelId}/verify`);\n      if (res.status === 200 && res.data) {\n        const { success, emailSent, message, hotelName, alreadyVerified } = res.data;\n        \n        if (success) {\n          if (alreadyVerified) {\n            toast.info(\"Hotel Already Verified\", {\n              description: `${hotelName} was already verified.`,\n              icon: <CheckCircle className=\"text-blue-600\" />,\n              duration: 6000,\n            });\n          } else {\n            toast.success(\"Hotel Verified Successfully\", {\n              description: emailSent \n                ? `${hotelName} has been verified and notification email sent.`\n                : `${hotelName} has been verified.`,\n              icon: <CheckCircle className=\"text-green-600\" />,\n              duration: 6000,\n            });\n            \n            // Optimistically update the hotel's verified status in the state\n            setHotels((prevHotels) =>\n              prevHotels.map((hotel) =>\n                hotel.id === hotelId ? { ...hotel, verified: true } : hotel\n              )\n            );\n          }\n        } else {\n          toast.error(\"Verification Failed\", {\n            description: message || \"There was an error verifying the hotel. Please try again.\",\n            icon: <XCircle className=\"text-red-600\" />,\n            duration: 6000,\n          });\n        }\n      }\n    } catch (err) {\n      toast.error(\"Verification Failed\", {\n        description: \"There was an error verifying the hotel. Please try again.\",\n        icon: <XCircle className=\"text-red-600\" />,\n        duration: 6000,\n      });\n      setError(err.message);\n    } finally {\n      setVerifyingHotelId(null); // Clear the verifying ID\n    }\n  };\n\n  const handlePageChange = (newPage) => {\n    setPagination((prev) => ({ ...prev, pageNumber: newPage }));\n  };\n\n  const handleFilterChange = (newFilters) => {\n    setFilters(newFilters);\n    setPagination((prev) => ({ ...prev, pageNumber: 0 }));\n  };\n\n  const handleViewDetails = (hotel) => {\n    setSelectedHotel(hotel);\n    setShowHotelDetails(true);\n  };\n\n  // Notification handling functions\n  const deleteAllNotifications = async () => {\n    try {\n      // Extract notification IDs\n      const notificationIds = notifications.map(notif => notif.id);\n      \n      console.log(\"[DEBUG] Deleting notifications with IDs:\", notificationIds);\n      \n      await api.delete(\"/notifications/bulk\", {\n        data: notificationIds\n      });\n      setNotifications([]);\n      setUnreadCount(0);\n      console.log(\"[API] Successfully deleted all notifications\");\n    } catch (error) {\n      console.error(\"[API] Error deleting notifications:\", error);\n    }\n  };\n\n  // Close notification dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (\n        notificationRef.current &&\n        !notificationRef.current.contains(event.target)\n      ) {\n        setShowNotifications(false);\n      }\n    };\n\n    if (showNotifications) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [showNotifications]);\n\n  // Handle notification dropdown click\n  const handleNotificationClick = async () => {\n    setShowNotifications((prev) => !prev);\n  };\n\n  // Clear all notifications\n  const clearAllNotifications = async () => {\n    await deleteAllNotifications();\n    setShowNotifications(false);\n  };\n\n  // Handle deletion requests pagination\n  const handleDeletionRequestsPageChange = (newPage) => {\n    setDeletionRequestsPagination((prev) => ({ ...prev, pageNumber: newPage }));\n  };\n\n  // Handle hotel deletion approval\n  const handleApproveDeletion = async (hotelId, hotelName) => {\n    setDeletingHotelId(hotelId);\n    try {\n      const response = await api.delete(`/hotels/${hotelId}`);\n      \n      if (response.status === 200) {\n        toast.success(\"Hotel Deleted Successfully\", {\n          description: `${hotelName} has been permanently deleted from the system.`,\n          icon: <Trash2 className=\"text-green-600\" />,\n          duration: 6000,\n        });\n\n        // Remove the deleted hotel from the deletion requests list\n        setDeletionRequests((prev) => \n          prev.filter((hotel) => hotel.id !== hotelId)\n        );\n\n        // Update pagination if needed\n        setDeletionRequestsPagination((prev) => ({\n          ...prev,\n          totalElements: prev.totalElements - 1,\n        }));\n      }\n    } catch (err) {\n      console.error(\"Error deleting hotel:\", err);\n      toast.error(\"Failed to Delete Hotel\", {\n        description: \"There was an error deleting the hotel. Please try again.\",\n        icon: <XCircle className=\"text-red-600\" />,\n        duration: 6000,\n      });\n    } finally {\n      setDeletingHotelId(null);\n    }\n  };\n\n  // Hotel Details Modal Component\n  const HotelDetailsModal = () => {\n    if (!selectedHotel) return null;\n\n    const formatHotelType = (type) => {\n      if (!type) return \"Not specified\";\n      return type.replace(/_/g, \" \");\n    };\n\n    const formatPrice = (price) => {\n      if (!price || price === \"-\" || price === \"null\") return \"Contact for pricing\";\n      return `Nu. ${Number(price).toLocaleString()}`;\n    };\n\n    return (\n      <Dialog open={showHotelDetails} onOpenChange={setShowHotelDetails}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Star className=\"h-5 w-5 text-yellow-500\" />\n              {selectedHotel.name || \"Hotel Details\"}\n            </DialogTitle>\n            <DialogDescription>\n              Complete hotel information and verification status\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-6\">\n            {/* Hotel Images */}\n            {selectedHotel.photoUrls?.length > 0 && (\n              <div className=\"space-y-3\">\n                <h3 className=\"text-lg font-semibold\">Hotel Images</h3>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {selectedHotel.photoUrls.slice(0, 6).map((url, index) => (\n                    <div key={index} className=\"relative aspect-video rounded-lg overflow-hidden\">\n                      <img\n                        src={url}\n                        alt={`Hotel image ${index + 1}`}\n                        className=\"w-full h-full object-cover hover:scale-105 transition-transform duration-200\"\n                      />\n                    </div>\n                  ))}\n                </div>\n                {selectedHotel.photoUrls.length > 6 && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    +{selectedHotel.photoUrls.length - 6} more images\n                  </p>\n                )}\n              </div>\n            )}\n\n            {/* Basic Information */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Basic Information</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                    <div>\n                      <p className=\"text-sm font-medium\">Location</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {selectedHotel.address}, {selectedHotel.district}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                    <div>\n                      <p className=\"text-sm font-medium\">Phone</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {selectedHotel.phone || \"Not provided\"}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-2\">\n                    <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                    <div>\n                      <p className=\"text-sm font-medium\">Email</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {selectedHotel.email || \"Not provided\"}\n                      </p>\n                    </div>\n                  </div>\n\n                  {selectedHotel.websiteUrl && (\n                    <div className=\"flex items-center gap-2\">\n                      <Globe className=\"h-4 w-4 text-muted-foreground\" />\n                      <div>\n                        <p className=\"text-sm font-medium\">Website</p>\n                        <a \n                          href={selectedHotel.websiteUrl}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"text-sm text-blue-600 hover:underline\"\n                        >\n                          {selectedHotel.websiteUrl}\n                        </a>\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"flex items-center gap-2\">\n                    <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                    <div>\n                      <p className=\"text-sm font-medium\">Joined</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {format(new Date(selectedHotel.createdAt), \"dd MMM yyyy\")}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Hotel Details</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div>\n                    <p className=\"text-sm font-medium\">Hotel Type</p>\n                    <Badge variant=\"outline\" className=\"mt-1\">\n                      {formatHotelType(selectedHotel.hotelType)}\n                    </Badge>\n                  </div>\n\n                  <div>\n                    <p className=\"text-sm font-medium\">Verification Status</p>\n                    <Badge variant={selectedHotel.verified ? \"default\" : \"secondary\"} className=\"mt-1\">\n                      {selectedHotel.verified ? \"Verified\" : \"Pending\"}\n                    </Badge>\n                  </div>\n\n                  {selectedHotel.lowestPrice && (\n                    <div>\n                      <p className=\"text-sm font-medium\">Starting Price</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {formatPrice(selectedHotel.lowestPrice)} /night\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Description */}\n            {selectedHotel.description && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Description</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    {selectedHotel.description}\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Amenities */}\n            {selectedHotel.amenities?.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Amenities ({selectedHotel.amenities.length})</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-2\">\n                    {selectedHotel.amenities.map((amenity, index) => (\n                      <div key={index} className=\"flex items-center gap-2 p-2 bg-muted/50 rounded-md\">\n                        {/* <CheckCircle className=\"h-3 w-3 text-green-600\" /> */}\n                        <span className=\"text-xs\">{amenity}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Documents */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Verification Documents</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-sm font-medium mb-2\">Business License</p>\n                    {selectedHotel.licenseUrl ? (\n                      <a\n                        href={selectedHotel.licenseUrl}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"inline-flex items-center gap-2 text-blue-600 hover:underline text-sm\"\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                        View License Document\n                      </a>\n                    ) : (\n                      <p className=\"text-sm text-red-600\">❌ Missing</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <p className=\"text-sm font-medium mb-2\">ID Proof</p>\n                    {selectedHotel.idProofUrl ? (\n                      <a\n                        href={selectedHotel.idProofUrl}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"inline-flex items-center gap-2 text-blue-600 hover:underline text-sm\"\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                        View ID Document\n                      </a>\n                    ) : (\n                      <p className=\"text-sm text-red-600\">❌ Missing</p>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  };\n\n  const LoadingSpinner = () => (\n    <div className=\"flex justify-center items-center py-12\">\n      <YakRoomsLoader \n        size={112} \n        showTagline={false} \n        loadingText=\"\"\n        className=\"mb-4\"\n      />\n    </div>\n  );\n\n  const ErrorMessage = () => (\n    <Card className=\"border-red-400 bg-red-50 text-red-800\">\n      <CardHeader>\n        <CardTitle className=\"text-red-800\">Error loading data</CardTitle>\n        <CardDescription className=\"text-red-700\">\n          <p>{error}</p>\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Button onClick={() => window.location.reload()} variant=\"outline\">\n          Retry\n        </Button>\n      </CardContent>\n    </Card>\n  );\n\n  const SearchFilters = () => {\n    const [localFilters, setLocalFilters] = useState(filters);\n\n    const handleInputChange = (e) => {\n      const { name, value } = e.target;\n      setLocalFilters((prev) => ({ ...prev, [name]: value }));\n    };\n\n    const handleSelectChange = (name, value) => {\n      setLocalFilters((prev) => ({ ...prev, [name]: value }));\n    };\n\n    const handleSubmit = (e) => {\n      e.preventDefault();\n      handleFilterChange(localFilters);\n    };\n\n    const handleReset = () => {\n      const resetFilters = { district: \"\", verified: \"all\", searchQuery: \"\" }; // Set default for verified to \"all\"\n      setLocalFilters(resetFilters);\n      handleFilterChange(resetFilters);\n    };\n\n    return (\n      <Card className=\"mb-6\">\n        <CardContent className=\"pt-6\">\n          <form\n            onSubmit={handleSubmit}\n            className=\"space-y-4 md:space-y-0 md:flex md:gap-4 items-end\"\n          >\n            <div className=\"flex-1\">\n              <Label htmlFor=\"searchQuery\" className=\"sr-only\">\n                Search\n              </Label>\n              <Input\n                type=\"text\"\n                name=\"searchQuery\"\n                id=\"searchQuery\"\n                placeholder=\"Search hotels...\"\n                value={localFilters.searchQuery}\n                onChange={handleInputChange}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"district\" className=\"sr-only\">\n                District\n              </Label>\n              <Select\n                name=\"district\"\n                value={localFilters.district}\n                onValueChange={(value) => handleSelectChange(\"district\", value)}\n              >\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"All Districts\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"-\">All Districts</SelectItem>{\" \"}\n                  {/* Use empty string for \"All\" to match API behavior */}\n                  <SelectItem value=\"Thimphu\">Thimphu</SelectItem>\n                  <SelectItem value=\"Paro\">Paro</SelectItem>\n                  <SelectItem value=\"Punakha\">Punakha</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"verified\" className=\"sr-only\">\n                Verification Status\n              </Label>\n              <Select\n                name=\"verified\"\n                value={localFilters.verified}\n                onValueChange={(value) => handleSelectChange(\"verified\", value)}\n              >\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"All Statuses\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  <SelectItem value=\"true\">Verified</SelectItem>\n                  <SelectItem value=\"false\">Pending</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex gap-2\">\n              <SearchButton type=\"submit\">Apply Filters</SearchButton>\n              <Button type=\"button\" variant=\"outline\" onClick={handleReset}>\n                Reset\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const PaginationControls = () => {\n    const handlePrevious = () => {\n      if (pagination.pageNumber > 0) {\n        handlePageChange(pagination.pageNumber - 1);\n      }\n    };\n\n    const handleNext = () => {\n      if (pagination.pageNumber < pagination.totalPages - 1) {\n        handlePageChange(pagination.pageNumber + 1);\n      }\n    };\n\n    return (\n      <div className=\"flex items-center justify-between px-4 py-3\">\n        <div className=\"flex-1 flex justify-between md:hidden\">\n          <Button\n            onClick={handlePrevious}\n            disabled={pagination.pageNumber === 0}\n            variant=\"outline\"\n          >\n            Previous\n          </Button>\n          <Button\n            onClick={handleNext}\n            disabled={pagination.pageNumber === pagination.totalPages - 1}\n            variant=\"outline\"\n          >\n            Next\n          </Button>\n        </div>\n        <div className=\"hidden md:flex flex-1 items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">\n              Page{\" \"}\n              <span className=\"font-medium\">{pagination.pageNumber + 1}</span>{\" \"}\n              of <span className=\"font-medium\">{pagination.totalPages}</span>\n            </p>\n          </div>\n          <div>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                className=\"h-8 w-8 p-0\"\n                onClick={handlePrevious}\n                disabled={pagination.pageNumber === 0}\n              >\n                <span className=\"sr-only\">Go to previous page</span>\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n              {Array.from({ length: pagination.totalPages }, (_, i) => (\n                <Button\n                  key={i}\n                  variant={pagination.pageNumber === i ? \"default\" : \"outline\"}\n                  className=\"h-8 w-8 p-0\"\n                  onClick={() => handlePageChange(i)}\n                >\n                  {i + 1}\n                </Button>\n              ))}\n              <Button\n                variant=\"outline\"\n                className=\"h-8 w-8 p-0\"\n                onClick={handleNext}\n                disabled={pagination.pageNumber === pagination.totalPages - 1}\n              >\n                <span className=\"sr-only\">Go to next page</span>\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const DeletionRequestsPaginationControls = () => {\n    const handlePrevious = () => {\n      if (deletionRequestsPagination.pageNumber > 0) {\n        handleDeletionRequestsPageChange(deletionRequestsPagination.pageNumber - 1);\n      }\n    };\n\n    const handleNext = () => {\n      if (deletionRequestsPagination.pageNumber < deletionRequestsPagination.totalPages - 1) {\n        handleDeletionRequestsPageChange(deletionRequestsPagination.pageNumber + 1);\n      }\n    };\n\n    return (\n      <div className=\"flex items-center justify-between px-4 py-3\">\n        <div className=\"flex-1 flex justify-between md:hidden\">\n          <Button\n            onClick={handlePrevious}\n            disabled={deletionRequestsPagination.pageNumber === 0}\n            variant=\"outline\"\n          >\n            Previous\n          </Button>\n          <Button\n            onClick={handleNext}\n            disabled={deletionRequestsPagination.pageNumber === deletionRequestsPagination.totalPages - 1}\n            variant=\"outline\"\n          >\n            Next\n          </Button>\n        </div>\n        <div className=\"hidden md:flex flex-1 items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">\n              Page{\" \"}\n              <span className=\"font-medium\">{deletionRequestsPagination.pageNumber + 1}</span>{\" \"}\n              of <span className=\"font-medium\">{deletionRequestsPagination.totalPages}</span>\n            </p>\n          </div>\n          <div>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                className=\"h-8 w-8 p-0\"\n                onClick={handlePrevious}\n                disabled={deletionRequestsPagination.pageNumber === 0}\n              >\n                <span className=\"sr-only\">Go to previous page</span>\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n              {Array.from({ length: deletionRequestsPagination.totalPages }, (_, i) => (\n                <Button\n                  key={i}\n                  variant={deletionRequestsPagination.pageNumber === i ? \"default\" : \"outline\"}\n                  className=\"h-8 w-8 p-0\"\n                  onClick={() => handleDeletionRequestsPageChange(i)}\n                >\n                  {i + 1}\n                </Button>\n              ))}\n              <Button\n                variant=\"outline\"\n                className=\"h-8 w-8 p-0\"\n                onClick={handleNext}\n                disabled={deletionRequestsPagination.pageNumber === deletionRequestsPagination.totalPages - 1}\n              >\n                <span className=\"sr-only\">Go to next page</span>\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const HotelDeletionRequestsTable = () => {\n    console.log(\"[DEBUG] HotelDeletionRequestsTable render - deletionRequests:\", deletionRequests);\n    console.log(\"[DEBUG] HotelDeletionRequestsTable render - loadingDeletionRequests:\", loadingDeletionRequests);\n    console.log(\"[DEBUG] HotelDeletionRequestsTable render - deletionRequests.length:\", deletionRequests.length);\n    \n    return (\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Trash2 className=\"h-5 w-5 text-red-500\" />\n            Hotel Deletion Requests\n          </CardTitle>\n          <CardDescription>\n            Manage hotel account deletion requests from hotel owners\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {loadingDeletionRequests ? (\n            <div className=\"flex justify-center items-center py-8\">\n              <YakRoomsLoader size={64} showTagline={false} loadingText=\"\" />\n            </div>\n          ) : deletionRequests.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No deletion requests found\n            </div>\n          ) : (\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Hotel</TableHead>\n                <TableHead>Contact</TableHead>\n                <TableHead>Request Date</TableHead>\n                <TableHead>Reason</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {deletionRequests.map((hotel) => (\n                <TableRow key={hotel.id}>\n                  <TableCell>\n                    <div className=\"flex items-center\">\n                      <div className=\"flex-shrink-0 h-10 w-10\">\n                        {hotel.photoUrls?.length > 0 ? (\n                          <img\n                            className=\"h-10 w-10 rounded-full object-cover\"\n                            src={hotel.photoUrls[0]}\n                            alt=\"Hotel\"\n                          />\n                        ) : (\n                          <div className=\"h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center text-xs text-gray-500\">\n                            No photo\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"ml-4\">\n                        <div className=\"text-sm font-medium\">\n                          {hotel.name || \"Unknown Hotel\"}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {hotel.district || \"Unknown Location\"}\n                        </div>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm font-medium\">\n                      {hotel.email || \"No email\"}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {hotel.phone || \"No phone\"}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm\">\n                      {hotel.deletionRequestedAt \n                        ? format(new Date(hotel.deletionRequestedAt), \"dd MMM yyyy\")\n                        : \"Not available\"\n                      }\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {hotel.deletionRequestedAt \n                        ? format(new Date(hotel.deletionRequestedAt), \"HH:mm\")\n                        : \"\"\n                      }\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm max-w-xs truncate\">\n                      {hotel.deletionReason || \"No reason provided\"}\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <div className=\"flex items-center justify-end gap-2\">\n                      <Button\n                        onClick={() => handleViewDetails(hotel)}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"cursor-pointer\"\n                      >\n                        <Eye className=\"h-4 w-4 mr-1\" />\n                        View Hotel\n                      </Button>\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            className=\"cursor-pointer\"\n                            disabled={deletingHotelId === hotel.id}\n                          >\n                            <Trash2 className=\"h-4 w-4 mr-1\" />\n                            {deletingHotelId === hotel.id ? \"Deleting...\" : \"Approve\"}\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle className=\"flex items-center gap-2\">\n                              <Trash2 className=\"h-5 w-5 text-red-500\" />\n                              Confirm Hotel Deletion\n                            </AlertDialogTitle>\n                            <AlertDialogDescription className=\"space-y-2\">\n                              <p>\n                                Are you sure you want to permanently delete <strong>{hotel.name}</strong>?\n                              </p>\n                              <p className=\"text-sm text-muted-foreground\">\n                                This action cannot be undone. All hotel data, bookings, and associated information will be permanently removed from the system.\n                              </p>\n                              {hotel.deletionReason && (\n                                <div className=\"mt-3 p-3 bg-muted rounded-md\">\n                                  <p className=\"text-sm font-medium\">Deletion Reason:</p>\n                                  <p className=\"text-sm text-muted-foreground mt-1\">\n                                    \"{hotel.deletionReason}\"\n                                  </p>\n                                </div>\n                              )}\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => handleApproveDeletion(hotel.id, hotel.name)}\n                              className=\"bg-red-600 hover:bg-red-700\"\n                              disabled={deletingHotelId === hotel.id}\n                            >\n                              {deletingHotelId === hotel.id ? \"Deleting...\" : \"Delete Hotel\"}\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          )}\n        </CardContent>\n        {deletionRequests.length > 0 && <DeletionRequestsPaginationControls />}\n      </Card>\n    );\n  };\n\n  const HotelTable = () => (\n    <Card className=\"mb-6\">\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Hotel</TableHead>\n            <TableHead>Contact</TableHead>\n            <TableHead>Location</TableHead>\n            <TableHead>Documents</TableHead>\n            <TableHead>Status</TableHead>\n            <TableHead className=\"text-right\">Actions</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {hotels.map((hotel) => (\n            <TableRow\n              key={hotel.id}\n              className={hasMissingData(hotel) ? \"bg-yellow-50/20\" : \"\"}\n            >\n              <TableCell>\n                <div className=\"flex items-center\">\n                  <div className=\"flex-shrink-0 h-10 w-10\">\n                    {hotel.photoUrls?.length > 0 ? (\n                      <img\n                        className=\"h-10 w-10 rounded-full object-cover\"\n                        src={hotel.photoUrls[0]}\n                        alt=\"Hotel\"\n                      />\n                    ) : (\n                      <div className=\"h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center text-xs text-gray-500\">\n                        No photo\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"ml-4\">\n                    <div\n                      className={`text-sm font-medium ${\n                        !hotel.name ? \"text-destructive\" : \"\"\n                      }`}\n                    >\n                      {hotel.name || \"Missing name\"}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Joined: {format(new Date(hotel.createdAt), \"dd MMM yyyy\")}\n                    </div>\n                  </div>\n                </div>\n              </TableCell>\n              <TableCell>\n                <div\n                  className={`text-sm ${\n                    !hotel.email ? \"text-destructive\" : \"\"\n                  }`}\n                >\n                  {hotel.email || \"Missing email\"}\n                </div>\n                <div\n                  className={`text-sm text-muted-foreground ${\n                    !hotel.phone ? \"text-destructive\" : \"\"\n                  }`}\n                >\n                  {hotel.phone || \"Missing phone\"}\n                </div>\n              </TableCell>\n              <TableCell>\n                <div className=\"text-sm\">{hotel.district}</div>\n                <div className=\"text-sm text-muted-foreground\">\n                  {hotel.locality}\n                </div>\n              </TableCell>\n              <TableCell>\n                <div className=\"flex flex-col space-y-1\">\n                  {hotel.licenseUrl ? (\n                    <a\n                      href={hotel.licenseUrl}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"text-blue-600 hover:underline text-sm\"\n                    >\n                      License\n                    </a>\n                  ) : (\n                    <span className=\"text-destructive text-sm\">Missing</span>\n                  )}\n                  {hotel.idProofUrl ? (\n                    <a\n                      href={hotel.idProofUrl}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"text-blue-600 hover:underline text-sm\"\n                    >\n                      ID Proof\n                    </a>\n                  ) : (\n                    <span className=\"text-destructive text-sm\">Missing</span>\n                  )}\n                </div>\n              </TableCell>\n              <TableCell>\n                <Badge variant={hotel.verified ? \"default\" : \"secondary\"}>\n                  {hotel.verified ? \"Verified\" : \"Pending\"}\n                </Badge>\n              </TableCell>\n              <TableCell className=\"text-right\">\n                <div className=\"flex items-center justify-end gap-2\">\n                  <Button\n                    onClick={() => handleViewDetails(hotel)}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"cursor-pointer\"\n                  >\n                    <Eye className=\"h-4 w-4 mr-1\" />\n                    View\n                  </Button>\n                  {!hotel.verified && (\n                    <Button\n                      onClick={() => handleVerifyHotel(hotel.id)}\n                      disabled={\n                        hasMissingData(hotel) || verifyingHotelId === hotel.id\n                      } // Disable if verifying\n                      size=\"sm\"\n                      className=\"cursor-pointer\"\n                    >\n                      {verifyingHotelId === hotel.id ? \"Verifying...\" : \"Verify\"}\n                    </Button>\n                  )}\n                </div>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Card>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-muted/40 p-4 sm:p-6 lg:p-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Navigation Header */}\n        <div className=\"flex items-center justify-between mb-6 gap-3\">\n          <div className=\"flex-1 min-w-0\">\n            <h1 className=\"text-lg sm:text-xl font-bold text-gray-800 truncate\">\n              Admin Dashboard\n            </h1>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {/* Notification Bell */}\n            <div className=\"relative\" ref={notificationRef}>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"relative\"\n                onClick={handleNotificationClick}\n                disabled={loadingNotifications}\n              >\n                <Bell className=\"h-5 w-5\" />\n                {unreadCount > 0 && (\n                  <span className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full bg-red-500 text-[10px] text-white flex items-center justify-center font-bold\">\n                    {unreadCount > 99 ? \"99+\" : unreadCount}\n                  </span>\n                )}\n              </Button>\n\n              {/* Notification Dropdown */}\n              {showNotifications && (\n                <div className=\"fixed left-4 right-4 top-16 sm:absolute sm:right-0 sm:left-auto sm:top-auto sm:mt-2 w-auto sm:w-80 bg-card border rounded-lg shadow-lg z-50\">\n                  <div className=\"p-4 border-b\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"font-semibold\">Notifications</h3>\n                      <div className=\"flex gap-2\">\n                        {notifications.length > 0 && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={clearAllNotifications}\n                            className=\"text-xs\"\n                          >\n                            Clear All\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"max-h-80 overflow-y-auto\">\n                    {loadingNotifications ? (\n                      <div className=\"p-4 text-center\">\n                        <YakRoomsLoader size={32} showTagline={false} loadingText=\"\" />\n                      </div>\n                    ) : notifications.length === 0 ? (\n                      <div className=\"p-4 text-center text-muted-foreground\">\n                        <Bell className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                        <p className=\"text-sm\">No notifications</p>\n                      </div>\n                    ) : (\n                      <div className=\"divide-y\">\n                        {notifications.map((notification) => (\n                          <div\n                            key={notification.id}\n                            className={`p-3 sm:p-4 transition-colors ${\n                              notification.isRead\n                                ? \"hover:bg-muted/50\"\n                                : \"bg-blue-50/50 dark:bg-blue-950/20 hover:bg-blue-50 dark:hover:bg-blue-950/30\"\n                            }`}\n                          >\n                            <div className=\"space-y-2\">\n                              <div className=\"flex items-start gap-2\">\n                                <div className=\"flex-1 min-w-0\">\n                                  <div className=\"flex items-center gap-2 mb-1\">\n                                    <p className=\"font-medium text-sm flex-1 line-clamp-2\">\n                                      {notification.title}\n                                    </p>\n                                    {!notification.isRead && (\n                                      <div className=\"w-2 h-2 rounded-full bg-blue-500 flex-shrink-0\"></div>\n                                    )}\n                                  </div>\n                                  <p className=\"text-xs text-muted-foreground\">\n                                    {format(new Date(notification.createdAt), \"dd MMM yyyy, HH:mm\")}\n                                  </p>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <Link to=\"/\" className=\"flex-shrink-0\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"flex items-center gap-2 px-3\">\n                <Home className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">Home</span>\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n        <SearchFilters />\n\n        {/* Hotel Deletion Requests Section */}\n        <HotelDeletionRequestsTable />\n\n        {loading ? (\n          <LoadingSpinner />\n        ) : error ? (\n          <ErrorMessage />\n        ) : (\n          <>\n            <HotelTable />\n            <PaginationControls />\n          </>\n        )}\n\n        {/* Hotel Details Modal */}\n        <HotelDetailsModal />\n      </div>\n    </div>\n  );\n};\n\nexport default SuperAdmin;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/admin/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/authentication/AuthProvider.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'clearStorage' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"clearStorage"},"fix":{"range":[216,233],"text":""},"desc":"Remove unused variable 'clearStorage'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getAuthData' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"getAuthData"},"fix":{"range":[233,248],"text":""},"desc":"Remove unused variable 'getAuthData'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setAuthData' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"setAuthData"},"fix":{"range":[248,263],"text":""},"desc":"Remove unused variable 'setAuthData'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'clearAuthData' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"clearAuthData"},"fix":{"range":[263,280],"text":""},"desc":"Remove unused variable 'clearAuthData'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'api' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":12,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"api"},"fix":{"range":[332,336],"text":""},"desc":"Remove unused variable 'api'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'enhancedApi' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":12,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"enhancedApi"},"fix":{"range":[350,363],"text":""},"desc":"Remove unused variable 'enhancedApi'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'role'. Either include it or remove the dependency array.","line":836,"column":7,"nodeType":"ArrayExpression","endLine":857,"endColumn":4,"suggestions":[{"desc":"Update the dependencies array to be: [authState.isAuthenticated, authState.email, authState.userId, authState.userName, authState.roles, authState.activeRole, authState.pictureURL, authState.registerFlag, authState.clientDetailSet, authState.flag, authState.hotelId, authState.topHotelIds, authState.isValidatingAuth, role, lastLogin, login, logout, setHotelId, setRedirectUrl, setRoles, addRole, removeRole, setActiveRole, getCurrentActiveRole, switchToRole, updateUserProfile, setTopHotelIds, addTopHotelId, removeTopHotelId, hasRole, hasAnyRole, hasAllRoles, isTopHotel]","fix":{"range":[29382,29728],"text":"[authState.isAuthenticated, authState.email, authState.userId, authState.userName, authState.roles, authState.activeRole, authState.pictureURL, authState.registerFlag, authState.clientDetailSet, authState.flag, authState.hotelId, authState.topHotelIds, authState.isValidatingAuth, role, lastLogin, login, logout, setHotelId, setRedirectUrl, setRoles, addRole, removeRole, setActiveRole, getCurrentActiveRole, switchToRole, updateUserProfile, setTopHotelIds, addTopHotelId, removeTopHotelId, hasRole, hasAnyRole, hasAllRoles, isTopHotel]"}}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":866,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":866,"endColumn":21}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState, useCallback, useMemo } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { \n  getStorageItem, \n  setStorageItem, \n  removeStorageItem, \n  clearStorage,\n  getAuthData,\n  setAuthData,\n  clearAuthData\n} from \"@/shared/utils/safariLocalStorage\";\nimport api, { authService, enhancedApi } from \"@/shared/services/Api\";\nimport axios from \"axios\";\nimport { API_BASE_URL } from \"@/shared/services/firebaseConfig\";\n\n// === Constants ===\nconst AUTH_STORAGE_KEYS = {\n  USER_ID: 'userId',\n  EMAIL: 'email',\n  ROLES: 'roles', \n  ACTIVE_ROLE: 'activeRole',\n  USER_NAME: 'userName',\n  PICTURE_URL: 'pictureURL',\n  REGISTER_FLAG: 'registerFlag',\n  CLIENT_DETAIL_SET: 'clientDetailSet',\n  HOTEL_ID: 'hotelId',\n  TOP_HOTEL_IDS: 'topHotelIds',\n  REDIRECT_URL: 'redirectUrl',\n  LAST_AUTH_CHECK: 'lastAuthCheck'\n};\n\n// === Utility to check if we should validate authentication status ===\nconst shouldCheckAuthStatus = () => {\n  try {\n    const lastCheck = getStorageItem(AUTH_STORAGE_KEYS.LAST_AUTH_CHECK);\n    if (!lastCheck) return true;\n    \n    const lastCheckTime = parseInt(lastCheck, 10);\n    const now = Date.now();\n    // Check every 13 minutes to align with token refresh cycle\n    return (now - lastCheckTime) > (13 * 60 * 1000);\n  } catch (error) {\n    console.error(\"Failed to check last auth validation time\", error);\n    return true; // fallback to checking\n  }\n};\n\n// === Utility to parse roles from storage ===\nconst parseRolesFromStorage = (rolesString) => {\n  try {\n    if (!rolesString) return [];\n    \n    // If it's already an array, return it\n    if (Array.isArray(rolesString)) return rolesString;\n    \n    // If it's a single string (not JSON), wrap it in an array\n    if (typeof rolesString === 'string' && !rolesString.startsWith('[')) {\n      return [rolesString];\n    }\n    \n    // Try to parse as JSON\n    const parsed = JSON.parse(rolesString);\n    return Array.isArray(parsed) ? parsed : [parsed];\n  } catch (error) {\n    console.error(\"Failed to parse roles from storage\", error);\n    // If parsing fails, try to treat it as a single role string\n    if (typeof rolesString === 'string') {\n      return [rolesString];\n    }\n    return [];\n  }\n};\n\n// === Utility to stringify roles for storage ===\nconst stringifyRolesForStorage = (roles) => {\n  try {\n    if (!Array.isArray(roles)) return '[]';\n    return JSON.stringify(roles);\n  } catch (error) {\n    console.error(\"Failed to stringify roles for storage\", error);\n    return '[]';\n  }\n};\n\n// === Utility to parse top hotel IDs from storage ===\nconst parseTopHotelIdsFromStorage = (topHotelIdsString) => {\n  try {\n    if (!topHotelIdsString) return [];\n    \n    // If it's already an array, return it\n    if (Array.isArray(topHotelIdsString)) return topHotelIdsString;\n    \n    // If it's a single string (not JSON), wrap it in an array\n    if (typeof topHotelIdsString === 'string' && !topHotelIdsString.startsWith('[')) {\n      return [topHotelIdsString];\n    }\n    \n    // Try to parse as JSON\n    const parsed = JSON.parse(topHotelIdsString);\n    return Array.isArray(parsed) ? parsed : [parsed];\n  } catch (error) {\n    console.error(\"Failed to parse top hotel IDs from storage\", error);\n    // If parsing fails, try to treat it as a single ID string\n    if (typeof topHotelIdsString === 'string') {\n      return [topHotelIdsString];\n    }\n    return [];\n  }\n};\n\n// === Utility to stringify top hotel IDs for storage ===\nconst stringifyTopHotelIdsForStorage = (topHotelIds) => {\n  try {\n    if (!Array.isArray(topHotelIds)) return '[]';\n    return JSON.stringify(topHotelIds);\n  } catch (error) {\n    console.error(\"Failed to stringify top hotel IDs for storage\", error);\n    return '[]';\n  }\n};\n\n// === Context Setup ===\nconst AuthContext = createContext(null);\n\nconst defaultAuthState = {\n  isAuthenticated: false,\n  email: \"\",\n  roles: [],\n  activeRole: null,\n  clientDetailSet: false,\n  userName: \"\",\n  registerFlag: false,\n  pictureURL: \"\",\n  userId: \"\",\n  flag: false,\n  hotelId: null,\n  topHotelIds: [],\n  isValidatingAuth: false, // New flag for auth validation state\n};\n\nexport const AuthProvider = ({ children }) => {\n  const navigate = useNavigate();\n\n  // Initialize auth state from localStorage with cookie-based authentication\n  const [authState, setAuthState] = useState(() => {\n    try {\n      // Check if we have basic user data stored (indicates previous authentication)\n      const userId = getStorageItem(AUTH_STORAGE_KEYS.USER_ID);\n      const email = getStorageItem(AUTH_STORAGE_KEYS.EMAIL);\n      \n      // If we have user data, assume authenticated (server will validate via cookies)\n      const hasUserData = userId && email;\n\n      const authData = {\n        isAuthenticated: hasUserData,\n        email: email || \"\",\n        roles: parseRolesFromStorage(getStorageItem(AUTH_STORAGE_KEYS.ROLES)),\n        activeRole: getStorageItem(AUTH_STORAGE_KEYS.ACTIVE_ROLE),\n        clientDetailSet: getStorageItem(AUTH_STORAGE_KEYS.CLIENT_DETAIL_SET) === \"true\",\n        userName: getStorageItem(AUTH_STORAGE_KEYS.USER_NAME) || \"\",\n        registerFlag: getStorageItem(AUTH_STORAGE_KEYS.REGISTER_FLAG) === \"true\",\n        pictureURL: getStorageItem(AUTH_STORAGE_KEYS.PICTURE_URL) || \"\",\n        userId: userId || \"\",\n        flag: false,\n        hotelId: getStorageItem(AUTH_STORAGE_KEYS.HOTEL_ID) || null,\n        topHotelIds: parseTopHotelIdsFromStorage(getStorageItem(AUTH_STORAGE_KEYS.TOP_HOTEL_IDS)),\n        isValidatingAuth: hasUserData, // Will validate with server if we think we're authenticated\n      };\n\n      return authData;\n    } catch (error) {\n      console.error(\"Failed to initialize auth state\", error);\n      return defaultAuthState;\n    }\n  });\n\n  const [lastLogin, setLastLogin] = useState(() => {\n    const stored = getStorageItem(\"lastLogin\");\n    return stored ? new Date(stored) : null;\n  });\n\n  // === VALIDATE AUTH STATUS WITH SERVER (memoized) ===\n  const validateAuthStatus = useCallback(async () => {\n    try {\n      console.log(\"🔍 Validating authentication status with server...\");\n      setAuthState(prev => ({ ...prev, isValidatingAuth: true }));\n      \n      // Call backend to validate current authentication status via cookies\n      const response = await axios.get(`${API_BASE_URL}/auth/status`, {\n        withCredentials: true, // Important: include cookies for authentication\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (response.status === 200 && response.data.success && response.data.user) {\n        console.log(\"✅ Authentication validated successfully\");\n        \n        const userData = response.data.user;\n        const roles = userData.roles || [];\n        const initialActiveRole = getStorageItem(AUTH_STORAGE_KEYS.ACTIVE_ROLE) || \n                                 (roles.includes('HOTEL_ADMIN') ? 'HOTEL_ADMIN' :\n                                  roles.includes('SUPER_ADMIN') ? 'SUPER_ADMIN' :\n                                  roles.includes('STAFF') ? 'STAFF' :\n                                  roles.includes('GUEST') ? 'GUEST' :\n                                  roles[0] || null);\n\n        // Update localStorage with current user data\n        setStorageItem(AUTH_STORAGE_KEYS.USER_ID, userData.id);\n        setStorageItem(AUTH_STORAGE_KEYS.EMAIL, userData.email);\n        setStorageItem(AUTH_STORAGE_KEYS.ROLES, stringifyRolesForStorage(roles));\n        setStorageItem(AUTH_STORAGE_KEYS.ACTIVE_ROLE, initialActiveRole);\n        setStorageItem(AUTH_STORAGE_KEYS.USER_NAME, userData.name || \"\");\n        setStorageItem(AUTH_STORAGE_KEYS.PICTURE_URL, userData.profilePicUrl || \"\");\n        setStorageItem(AUTH_STORAGE_KEYS.CLIENT_DETAIL_SET, Boolean(userData.detailSet).toString());\n        if (userData.hotelId) {\n          setStorageItem(AUTH_STORAGE_KEYS.HOTEL_ID, userData.hotelId);\n        }\n        setStorageItem(AUTH_STORAGE_KEYS.LAST_AUTH_CHECK, Date.now().toString());\n        \n        // Update auth state\n        setAuthState(prev => ({\n          ...prev,\n          isAuthenticated: true,\n          email: userData.email,\n          userId: userData.id,\n          userName: userData.name || \"\",\n          roles: roles,\n          activeRole: initialActiveRole,\n          pictureURL: userData.profilePicUrl || \"\",\n          clientDetailSet: Boolean(userData.detailSet),\n          hotelId: userData.hotelId || prev.hotelId,\n          isValidatingAuth: false,\n        }));\n        \n        return true;\n      } else {\n        throw new Error('Invalid authentication response');\n      }\n    } catch (error) {\n      console.error(\"❌ Auth validation failed:\", error);\n      \n      // Check if it's a 401/403 (authentication expired) or other error\n      if (error.response?.status === 401) {\n        console.log(\"🚪 Authentication expired (401), clearing state\");\n        \n        // Clear auth state for expired authentication\n        setAuthState({\n          ...defaultAuthState,\n          topHotelIds: parseTopHotelIdsFromStorage(getStorageItem(AUTH_STORAGE_KEYS.TOP_HOTEL_IDS))\n        });\n        \n        // Clear user data but preserve top hotel IDs\n        const authKeys = Object.values(AUTH_STORAGE_KEYS).filter(key => \n          key !== 'topHotelIds' && key !== 'lastAuthCheck'\n        );\n        authKeys.forEach(key => {\n          removeStorageItem(key);\n        });\n      } else if (error.response?.status === 403) {\n        console.log(\"🚪 Authentication forbidden (403), clearing state\");\n        \n        // For 403, clear auth data more aggressively\n        setAuthState({\n          ...defaultAuthState,\n          topHotelIds: parseTopHotelIdsFromStorage(getStorageItem(AUTH_STORAGE_KEYS.TOP_HOTEL_IDS))\n        });\n        \n        // Clear user data but preserve top hotel IDs\n        const authKeys = Object.values(AUTH_STORAGE_KEYS).filter(key => \n          key !== 'topHotelIds' && key !== 'lastAuthCheck'\n        );\n        authKeys.forEach(key => {\n          removeStorageItem(key);\n        });\n        \n        // Also clear cookies for 403\n        try {\n          authService.clearAuthData();\n        } catch (clearError) {\n          console.warn('⚠️ Failed to clear auth data:', clearError);\n        }\n      } else {\n        // For other errors (network issues, etc.), just clear validation flag\n        console.log(\"⚠️ Validation failed due to network/server error, maintaining auth state\");\n        setAuthState(prev => ({ ...prev, isValidatingAuth: false }));\n      }\n      \n      return false;\n    }\n  }, []);\n\n  // === LOGOUT (memoized) ===\n  const logout = useCallback(async () => {\n    try {\n      console.log(\"🚪 Logging out...\");\n      \n      // Preserve top hotel IDs during logout\n      const topHotelIds = getStorageItem(AUTH_STORAGE_KEYS.TOP_HOTEL_IDS);\n      console.log(\"🔒 [LOGOUT] Preserving top hotel IDs:\", topHotelIds);\n      \n      // Call backend logout endpoint to invalidate cookies\n      try {\n        await axios.post(`${API_BASE_URL}/auth/logout`, {}, {\n          withCredentials: true, // Important: include cookies for authentication\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log(\"✅ Server-side logout successful\");\n      } catch (logoutError) {\n        console.warn(\"⚠️ Server-side logout failed, continuing with client cleanup:\", logoutError);\n      }\n      \n      // Clear all auth data from localStorage except top hotel IDs\n      const authKeys = Object.values(AUTH_STORAGE_KEYS).filter(key => \n        key !== 'topHotelIds' && key !== 'lastAuthCheck'\n      );\n      authKeys.forEach(key => {\n        removeStorageItem(key);\n      });\n      \n      // Clear all cookies (redundant but safer)\n      try {\n        authService.clearAuthData();\n      } catch (clearError) {\n        console.warn(\"⚠️ Failed to clear auth data via authService:\", clearError);\n      }\n      \n      // Restore top hotel IDs after clearing\n      if (topHotelIds) {\n        setStorageItem(AUTH_STORAGE_KEYS.TOP_HOTEL_IDS, topHotelIds);\n        console.log(\"🔒 [LOGOUT] Restored top hotel IDs to localStorage\");\n      }\n      \n      setAuthState({\n        ...defaultAuthState,\n        topHotelIds: parseTopHotelIdsFromStorage(topHotelIds)\n      });\n      \n      navigate(\"/\");\n      \n      console.log(\"✅ Logout completed successfully\");\n    } catch (error) {\n      console.error(\"❌ Failed to logout properly:\", error);\n      \n      // Fallback cleanup if logout fails\n      try {\n        // Clear localStorage\n        const authKeys = Object.values(AUTH_STORAGE_KEYS).filter(key => \n          key !== 'topHotelIds' && key !== 'lastAuthCheck'\n        );\n        authKeys.forEach(key => {\n          removeStorageItem(key);\n        });\n        \n        setAuthState({\n          ...defaultAuthState,\n          topHotelIds: parseTopHotelIdsFromStorage(getStorageItem(AUTH_STORAGE_KEYS.TOP_HOTEL_IDS))\n        });\n        navigate(\"/\");\n      } catch (fallbackError) {\n        console.error(\"❌ Fallback logout cleanup failed:\", fallbackError);\n        window.location.href = '/';\n      }\n    }\n  }, [navigate]);\n\n  // === Set global logout function for API interceptor ===\n  useEffect(() => {\n    window.authLogout = logout;\n    return () => {\n      window.authLogout = () => {\n        console.warn('Global logout function called but AuthProvider is unmounted');\n      };\n    };\n  }, [logout]);\n\n  // === REFRESH TOKEN PERIODICALLY (memoized) ===\n  const refreshTokenPeriodically = useCallback(async () => {\n    try {\n      if (!authState.isAuthenticated) return;\n      \n      console.log(\"🔄 Periodically refreshing token...\");\n      \n      // Call refresh token endpoint\n      const response = await axios.post(`${API_BASE_URL}/auth/refresh-token`, {}, {\n        withCredentials: true,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (response.status === 200) {\n        console.log(\"✅ Periodic token refresh successful\");\n        // Update last refresh time for tracking\n        setStorageItem(AUTH_STORAGE_KEYS.LAST_AUTH_CHECK, Date.now().toString());\n      } else {\n        console.warn(\"⚠️ Periodic token refresh returned non-200 status:\", response.status);\n      }\n    } catch (error) {\n      console.error(\"❌ Periodic token refresh failed:\", error);\n      \n      // If refresh fails with 401/403, trigger logout\n      if (error.response?.status === 401 || error.response?.status === 403) {\n        console.log(\"🚪 Token refresh failed with auth error, logging out\");\n        logout();\n      }\n    }\n  }, [authState.isAuthenticated, logout]);\n\n  // === Auto-validate authentication status ===\n  useEffect(() => {\n    const validateAuthentication = async () => {\n      try {\n        // Only validate if we think we're authenticated or if we're in validation state\n        if (!authState.isAuthenticated && !authState.isValidatingAuth) return;\n        \n        // Check if we should validate (not too frequently)\n        if (!shouldCheckAuthStatus() && authState.isAuthenticated && !authState.isValidatingAuth) {\n          return;\n        }\n        \n        console.log(\"🔍 Auto-validating authentication status...\");\n        await validateAuthStatus();\n      } catch (error) {\n        console.error(\"❌ Auto-validation failed:\", error);\n      }\n    };\n    \n    // Validate immediately if needed\n    validateAuthentication();\n    \n    // Set up periodic validation (every 13 minutes to align with token refresh)\n    const validationInterval = setInterval(() => {\n      if (authState.isAuthenticated && shouldCheckAuthStatus()) {\n        validateAuthentication();\n      }\n    }, 13 * 60 * 1000); // 13 minutes\n    \n    return () => {\n      clearInterval(validationInterval);\n    };\n  }, [authState.isAuthenticated, authState.isValidatingAuth, validateAuthStatus]);\n\n  // === PERIODIC TOKEN REFRESH (separate from validation) ===\n  useEffect(() => {\n    if (!authState.isAuthenticated) return;\n    \n    // Set up periodic token refresh every 13 minutes\n    const refreshInterval = setInterval(() => {\n      refreshTokenPeriodically();\n    }, 13 * 60 * 1000); // 13 minutes\n    \n    return () => {\n      clearInterval(refreshInterval);\n    };\n  }, [authState.isAuthenticated, refreshTokenPeriodically]);\n\n  // === Listen to storage changes (cross-tab sync) ===\n  useEffect(() => {\n    const handleStorageChange = (e) => {\n      // Sync user data changes across tabs\n      if (e.key === AUTH_STORAGE_KEYS.USER_ID) {\n        const userId = e.newValue;\n        \n        if (!userId) {\n          // User logged out in another tab\n          logout();\n        } else {\n          // Sync auth state with other tabs\n          setAuthState(prev => ({\n            ...prev,\n            isAuthenticated: true,\n            email: getStorageItem(AUTH_STORAGE_KEYS.EMAIL),\n            roles: parseRolesFromStorage(getStorageItem(AUTH_STORAGE_KEYS.ROLES)),\n            activeRole: getStorageItem(AUTH_STORAGE_KEYS.ACTIVE_ROLE),\n            userName: getStorageItem(AUTH_STORAGE_KEYS.USER_NAME),\n            userId: getStorageItem(AUTH_STORAGE_KEYS.USER_ID),\n            pictureURL: getStorageItem(AUTH_STORAGE_KEYS.PICTURE_URL),\n            clientDetailSet: getStorageItem(AUTH_STORAGE_KEYS.CLIENT_DETAIL_SET) === \"true\",\n            registerFlag: getStorageItem(AUTH_STORAGE_KEYS.REGISTER_FLAG) === \"true\",\n            hotelId: getStorageItem(AUTH_STORAGE_KEYS.HOTEL_ID) || null,\n            topHotelIds: parseTopHotelIdsFromStorage(getStorageItem(AUTH_STORAGE_KEYS.TOP_HOTEL_IDS)),\n          }));\n        }\n      }\n    };\n\n    window.addEventListener(\"storage\", handleStorageChange);\n    return () => window.removeEventListener(\"storage\", handleStorageChange);\n  }, [logout]);\n\n  // === LOGIN (memoized) ===\n  const login = useCallback(async (authData) => {\n    try {\n      console.log(\"🔑 Processing login with cookie-based authentication...\");\n\n      // Validate required fields for cookie-based auth (no token required)\n      if (!authData.userid || !authData.email) {\n        throw new Error(\"Missing required authentication data: userid and email are required\");\n      }\n\n      // Handle roles - convert to array if it's a single role or already an array\n      const roles = Array.isArray(authData.roles) ? authData.roles : \n                   Array.isArray(authData.role) ? authData.role :\n                   authData.roles ? [authData.roles] :\n                   authData.role ? [authData.role] : [];\n\n      // Determine initial active role\n      const initialActiveRole = authData.activeRole || \n                               (roles.includes('HOTEL_ADMIN') ? 'HOTEL_ADMIN' :\n                                roles.includes('SUPER_ADMIN') ? 'SUPER_ADMIN' :\n                                roles.includes('STAFF') ? 'STAFF' :\n                                roles.includes('GUEST') ? 'GUEST' :\n                                roles[0] || null);\n\n      // Store auth data using Safari-specific utilities (no token needed for cookie-based auth)\n      setStorageItem(AUTH_STORAGE_KEYS.USER_ID, authData.userid);\n      setStorageItem(AUTH_STORAGE_KEYS.EMAIL, authData.email);\n      setStorageItem(AUTH_STORAGE_KEYS.ROLES, stringifyRolesForStorage(roles));\n      setStorageItem(AUTH_STORAGE_KEYS.ACTIVE_ROLE, initialActiveRole);\n      setStorageItem(AUTH_STORAGE_KEYS.USER_NAME, authData.userName || \"\");\n      setStorageItem(AUTH_STORAGE_KEYS.PICTURE_URL, authData.pictureURL || \"\");\n      setStorageItem(AUTH_STORAGE_KEYS.REGISTER_FLAG, Boolean(authData.flag).toString());\n      setStorageItem(AUTH_STORAGE_KEYS.CLIENT_DETAIL_SET, Boolean(authData.detailSet).toString());\n      setStorageItem(AUTH_STORAGE_KEYS.LAST_AUTH_CHECK, Date.now().toString());\n      \n      // Preserve existing hotelId if not provided in authData\n      if (authData.hotelId) {\n        setStorageItem(AUTH_STORAGE_KEYS.HOTEL_ID, authData.hotelId);\n      }\n\n      const existingHotelId = getStorageItem(AUTH_STORAGE_KEYS.HOTEL_ID);\n\n      const newAuthState = {\n        isAuthenticated: true,\n        email: authData.email,\n        userId: authData.userid,\n        userName: authData.userName || \"\",\n        roles: roles,\n        activeRole: initialActiveRole,\n        pictureURL: authData.pictureURL || \"\",\n        registerFlag: Boolean(authData.flag),\n        clientDetailSet: Boolean(authData.detailSet),\n        flag: true,\n        hotelId: authData.hotelId || existingHotelId || null,\n        topHotelIds: parseTopHotelIdsFromStorage(getStorageItem(AUTH_STORAGE_KEYS.TOP_HOTEL_IDS)),\n        isValidatingAuth: false, // Auth is validated since we just logged in\n      };\n\n      setAuthState(newAuthState);\n\n      // Navigate only if not a first-time registration\n      if (!authData.flag) {\n        // Check if there's a stored redirect URL\n        const redirectUrl = getStorageItem(AUTH_STORAGE_KEYS.REDIRECT_URL);\n        if (redirectUrl) {\n          // Clear the redirect URL after using it\n          removeStorageItem(AUTH_STORAGE_KEYS.REDIRECT_URL);\n          navigate(redirectUrl);\n        } else {\n          navigate(\"/\");\n        }\n      }\n\n      const now = new Date();\n      setLastLogin(now);\n      setStorageItem(\"lastLogin\", now.toISOString());\n\n    } catch (error) {\n      console.error(\"Failed to login\", error);\n      throw error; // Re-throw to allow handling in the calling component\n    }\n  }, [navigate]);\n\n  // === SET HOTEL ID (memoized) ===\n  const setHotelId = useCallback((hotelId) => {\n    try {\n      const hotelIdString = hotelId?.toString() || null;\n      setStorageItem(AUTH_STORAGE_KEYS.HOTEL_ID, hotelIdString);\n      setAuthState(prev => ({\n        ...prev,\n        hotelId: hotelIdString,\n      }));\n    } catch (error) {\n      console.error(\"Failed to set hotelId\", error);\n    }\n  }, []);\n\n  // === SET REDIRECT URL (memoized) ===\n  const setRedirectUrl = useCallback((url) => {\n    try {\n      if (url) {\n        setStorageItem(AUTH_STORAGE_KEYS.REDIRECT_URL, url);\n      } else {\n        removeStorageItem(AUTH_STORAGE_KEYS.REDIRECT_URL);\n      }\n    } catch (error) {\n      console.error(\"Failed to set redirect URL\", error);\n    }\n  }, []);\n\n  // === SET ROLES (memoized) ===\n  const setRoles = useCallback((roles) => {\n    try {\n      const rolesArray = Array.isArray(roles) ? roles : [roles];\n      setStorageItem(AUTH_STORAGE_KEYS.ROLES, stringifyRolesForStorage(rolesArray));\n      setAuthState(prev => ({\n        ...prev,\n        roles: rolesArray,\n      }));\n    } catch (error) {\n      console.error(\"Failed to set roles\", error);\n    }\n  }, []);\n\n  // === ADD ROLE (memoized) ===\n  const addRole = useCallback((role) => {\n    try {\n      setAuthState(prev => {\n        const newRoles = [...prev.roles];\n        if (!newRoles.includes(role)) {\n          newRoles.push(role);\n          setStorageItem(AUTH_STORAGE_KEYS.ROLES, stringifyRolesForStorage(newRoles));\n        }\n        return { ...prev, roles: newRoles };\n      });\n    } catch (error) {\n      console.error(\"Failed to add role\", error);\n    }\n  }, []);\n\n  // === REMOVE ROLE (memoized) ===\n  const removeRole = useCallback((role) => {\n    try {\n      setAuthState(prev => {\n        const newRoles = prev.roles.filter(r => r !== role);\n        setStorageItem(AUTH_STORAGE_KEYS.ROLES, stringifyRolesForStorage(newRoles));\n        return { ...prev, roles: newRoles };\n      });\n    } catch (error) {\n      console.error(\"Failed to remove role\", error);\n    }\n  }, []);\n\n  // === GET PRIMARY ROLE (memoized) ===\n  const getPrimaryRole = useCallback(() => {\n    const roles = authState.roles;\n    if (roles.includes('SUPER_ADMIN')) return 'SUPER_ADMIN';\n    if (roles.includes('HOTEL_ADMIN')) return 'HOTEL_ADMIN';\n    if (roles.includes('STAFF')) return 'STAFF';\n    if (roles.includes('GUEST')) return 'GUEST';\n    return roles[0] || null;\n  }, [authState.roles]);\n\n  // === SET ACTIVE ROLE (memoized) ===\n  const setActiveRole = useCallback((role) => {\n    try {\n      // Validate that the role exists in user's roles\n      if (!authState.roles.includes(role)) {\n        console.error(`Role ${role} not found in user's roles:`, authState.roles);\n        return;\n      }\n      \n      setStorageItem(AUTH_STORAGE_KEYS.ACTIVE_ROLE, role);\n      setAuthState(prev => ({\n        ...prev,\n        activeRole: role,\n      }));\n    } catch (error) {\n      console.error(\"Failed to set active role\", error);\n    }\n  }, [authState.roles]);\n\n  // === GET CURRENT ACTIVE ROLE (memoized) ===\n  const getCurrentActiveRole = useCallback(() => {\n    // If no active role is set, use the primary role\n    if (!authState.activeRole) {\n      const primaryRole = getPrimaryRole();\n      if (primaryRole) {\n        setActiveRole(primaryRole);\n        return primaryRole;\n      }\n      return null;\n    }\n    return authState.activeRole;\n  }, [authState.activeRole, getPrimaryRole, setActiveRole]);\n\n  // === SWITCH TO ROLE (memoized) ===\n  const switchToRole = useCallback((role) => {\n    if (authState.roles.includes(role)) {\n      setActiveRole(role);\n      return true;\n    }\n    return false;\n  }, [authState.roles, setActiveRole]);\n\n  // === BACKWARD COMPATIBILITY: Get primary role as 'role' ===\n  const role = getCurrentActiveRole();\n\n  // === UPDATE USER PROFILE (new method) ===\n  const updateUserProfile = useCallback((updates) => {\n    try {\n      const allowedUpdates = ['userName', 'pictureURL', 'clientDetailSet'];\n      \n      Object.entries(updates).forEach(([key, value]) => {\n        if (allowedUpdates.includes(key)) {\n          const storageKey = key === 'userName' ? AUTH_STORAGE_KEYS.USER_NAME :\n                            key === 'pictureURL' ? AUTH_STORAGE_KEYS.PICTURE_URL :\n                            AUTH_STORAGE_KEYS.CLIENT_DETAIL_SET;\n          \n          setStorageItem(storageKey, value);\n        }\n      });\n\n      setAuthState(prev => ({\n        ...prev,\n        ...updates\n      }));\n    } catch (error) {\n      console.error(\"Failed to update user profile\", error);\n    }\n  }, []);\n\n  // === SET TOP HOTEL IDS (memoized) ===\n  const setTopHotelIds = useCallback((hotelIds) => {\n    try {\n      const hotelIdsArray = Array.isArray(hotelIds) ? hotelIds : [hotelIds];\n      setStorageItem(AUTH_STORAGE_KEYS.TOP_HOTEL_IDS, stringifyTopHotelIdsForStorage(hotelIdsArray));\n      setAuthState(prev => ({\n        ...prev,\n        topHotelIds: hotelIdsArray,\n      }));\n    } catch (error) {\n      console.error(\"Failed to set top hotel IDs\", error);\n    }\n  }, []);\n\n  // === ADD TOP HOTEL ID (memoized) ===\n  const addTopHotelId = useCallback((hotelId) => {\n    try {\n      setAuthState(prev => {\n        const newTopHotelIds = [...prev.topHotelIds];\n        if (!newTopHotelIds.includes(hotelId)) {\n          newTopHotelIds.push(hotelId);\n          // Keep only top 3\n          if (newTopHotelIds.length > 3) {\n            newTopHotelIds.shift();\n          }\n          setStorageItem(AUTH_STORAGE_KEYS.TOP_HOTEL_IDS, stringifyTopHotelIdsForStorage(newTopHotelIds));\n        }\n        return { ...prev, topHotelIds: newTopHotelIds };\n      });\n    } catch (error) {\n      console.error(\"Failed to add top hotel ID\", error);\n    }\n  }, []);\n\n  // === REMOVE TOP HOTEL ID (memoized) ===\n  const removeTopHotelId = useCallback((hotelId) => {\n    try {\n      setAuthState(prev => {\n        const newTopHotelIds = prev.topHotelIds.filter(id => id !== hotelId);\n        setStorageItem(AUTH_STORAGE_KEYS.TOP_HOTEL_IDS, stringifyTopHotelIdsForStorage(newTopHotelIds));\n        return { ...prev, topHotelIds: newTopHotelIds };\n      });\n    } catch (error) {\n      console.error(\"Failed to remove top hotel ID\", error);\n    }\n  }, []);\n\n  // === CHECK ROLE (memoized) ===\n  const hasRole = useCallback((roleToCheck) => {\n    return authState.roles.includes(roleToCheck);\n  }, [authState.roles]);\n\n  // === CHECK ANY ROLE (memoized) ===\n  const hasAnyRole = useCallback((rolesToCheck) => {\n    return rolesToCheck.some(role => authState.roles.includes(role));\n  }, [authState.roles]);\n\n  // === CHECK ALL ROLES (memoized) ===\n  const hasAllRoles = useCallback((rolesToCheck) => {\n    return rolesToCheck.every(role => authState.roles.includes(role));\n  }, [authState.roles]);\n\n  // === CHECK IF HOTEL IS TOP HOTEL (memoized) ===\n  const isTopHotel = useCallback((hotelIdToCheck) => {\n    if (!hotelIdToCheck || !authState.topHotelIds || !Array.isArray(authState.topHotelIds)) {\n      return false;\n    }\n    return authState.topHotelIds.includes(hotelIdToCheck.toString());\n  }, [authState.topHotelIds]);\n\n  // === MEMOIZED CONTEXT VALUE ===\n  const contextValue = useMemo(() => ({\n    // State\n    isAuthenticated: authState.isAuthenticated,\n    email: authState.email,\n    userId: authState.userId,\n    userName: authState.userName,\n    roles: authState.roles,\n    activeRole: authState.activeRole,\n    role, // Backward compatibility\n    pictureURL: authState.pictureURL,\n    registerFlag: authState.registerFlag,\n    clientDetailSet: authState.clientDetailSet,\n    flag: authState.flag,\n    hotelId: authState.hotelId,\n    topHotelIds: authState.topHotelIds,\n    isValidatingAuth: authState.isValidatingAuth,\n    lastLogin,\n\n    // Actions\n    login,\n    logout,\n    setHotelId,\n    setRedirectUrl,\n    setRoles,\n    addRole,\n    removeRole,\n    setActiveRole,\n    getCurrentActiveRole,\n    switchToRole,\n    updateUserProfile,\n    setTopHotelIds,\n    addTopHotelId,\n    removeTopHotelId,\n\n    // Role checks\n    hasRole,\n    hasAnyRole,\n    hasAllRoles,\n    isTopHotel,\n  }), [\n    authState,\n    lastLogin,\n    login,\n    logout,\n    setHotelId,\n    setRedirectUrl,\n    setRoles,\n    addRole,\n    removeRole,\n    setActiveRole,\n    getCurrentActiveRole,\n    switchToRole,\n    updateUserProfile,\n    setTopHotelIds,\n    addTopHotelId,\n    removeTopHotelId,\n    hasRole,\n    hasAnyRole,\n    hasAllRoles,\n    isTopHotel,\n  ]);\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/authentication/GoogleSignInButton.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'flag' is defined but never used.","line":7,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":60,"suggestions":[{"messageId":"removeVar","data":{"varName":"flag"},"fix":{"range":[311,317],"text":""},"desc":"Remove unused variable 'flag'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { signInWithPopup } from \"firebase/auth\";\nimport { auth, provider } from \"../../shared/services/firebaseConfig\";\nimport axios from \"axios\";\nimport { API_BASE_URL } from \"../../shared/services/firebaseConfig\";\n\nconst GoogleSignInButton = ({ onLoginSuccess, onClose, flag, onLoginStart, onLoginComplete }) => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const processAuthentication = async (idToken, onLoginSuccess, onClose) => {\n    try {\n      console.log('Processing authentication with token...');\n      const res = await axios.post(\n        `${API_BASE_URL}/auth/firebase`,\n        { idToken },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          withCredentials: true,\n          timeout: 15000,\n        }\n      );\n\n      if (res.status === 200) {\n        console.log(\"Authentication successful:\", res.data);\n        \n        await onLoginSuccess({\n          email: res.data.user.email,\n          userid: res.data.user.id,\n          roles: res.data.user.roles || [],\n          userName: res.data.user.name,\n          pictureURL: res.data.user.profilePicUrl,\n          flag: res.data.user.registerFlag || false,\n          detailSet: res.data.user.detailSet || false,\n          hotelId: res.data.user.hotelId,\n        });\n        \n        // Close modal after successful login\n        setTimeout(() => {\n          onClose();\n        }, 1000);\n      }\n    } catch (error) {\n      console.error('Authentication processing error:', error);\n      throw error;\n    }\n  };\n\n  const handleGoogleSignIn = async () => {\n    try {\n      setIsLoading(true);\n      onLoginStart?.();\n      \n      console.log('Starting Google popup authentication...');\n      \n      const result = await signInWithPopup(auth, provider);\n      console.log('Google popup authentication successful');\n      \n      const idToken = await result.user.getIdToken();\n      await processAuthentication(idToken, onLoginSuccess, onClose);\n      \n    } catch (error) {\n      console.error('Google authentication error:', error);\n      \n      // Simple error handling\n      switch (error.code) {\n        case 'auth/popup-closed-by-user':\n          console.log('User closed popup');\n          break;\n        case 'auth/popup-blocked':\n          console.log('Popup blocked by browser');\n          break;\n        case 'auth/network-request-failed':\n          console.log('Network request failed');\n          break;\n        default:\n          console.log('Authentication error:', error.code);\n      }\n      \n      throw error;\n    } finally {\n      setIsLoading(false);\n      onLoginComplete?.();\n    }\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      <button\n        onClick={handleGoogleSignIn}\n        disabled={isLoading}\n        className={`w-full flex items-center justify-center gap-2 text-sm font-medium py-2.5 px-5 rounded-xl shadow-md transition duration-200 ease-in-out focus:outline-none border cursor-pointer ${\n          isLoading \n            ? \"bg-gray-100 text-gray-400 cursor-not-allowed\" \n            : \"text-black hover:shadow-lg border-transparent hover:border-[#cccccc]\"\n        }`}\n        style={{ color: isLoading ? \"#9CA3AF\" : \"#333333\" }}\n      >\n        {isLoading ? (\n          <>\n            <div className=\"w-5 h-5 border-2 border-gray-300 border-t-blue-600 rounded-full animate-spin\"></div>\n            Signing in...\n          </>\n        ) : (\n          <>\n            <img\n              src=\"https://www.svgrepo.com/show/475656/google-color.svg\"\n              alt=\"Google\"\n              className=\"w-5 h-5\"\n            />\n            Continue with Google\n          </>\n        )}\n      </button>\n    </div>\n  );\n};\n\nexport default GoogleSignInButton;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/authentication/LoginModal.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":1,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":44,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[32,43],"text":""},"desc":"Remove unused variable 'useEffect'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useState, useEffect } from \"react\";\nimport useOutsideClick from \"../../shared/hooks/useOutsideClick\";\nimport GoogleSignInButton from \"./GoogleSignInButton\";\nimport { useAuth } from \"./AuthProvider\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/shared/components\";\nimport { Button } from \"@/shared/components\";\nimport { Alert, AlertDescription } from \"@/shared/components\";\nimport { X } from \"lucide-react\";\nimport { YakRoomsText } from \"@/shared/components\";\n\nconst LoginModal = ({ onClose, flag }) => {\n  const modalRef = useRef(null);\n  const { login } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n\n  useOutsideClick(modalRef, isLoggingIn ? () => {} : onClose);\n\n  const handleLoginStart = () => {\n    setIsLoggingIn(true);\n    setError(\"\");\n    setMessage(\"\");\n  };\n\n  const handleLoginComplete = () => {\n    setIsLoggingIn(false);\n  };\n\n  const handleLoginSuccess = async (authData) => {\n    try {\n      await login(authData);\n      setMessage(\"Login successful! Redirecting...\");\n    } catch (error) {\n      setError(\"Login failed. Please try again.\");\n      console.error(\"Login error:\", error);\n    }\n  };\n\n  return (\n    <Dialog open={true} onOpenChange={isLoggingIn ? () => {} : onClose}>\n      <DialogContent \n        ref={modalRef}\n        className=\"sm:max-w-md w-full p-0 gap-0\"\n      >\n        {/* Custom close button to match original design */}\n        <Button\n          onClick={onClose}\n          disabled={isLoggingIn}\n          variant=\"ghost\"\n          size=\"icon\"\n          className={`absolute right-2 top-2 h-8 w-8 rounded-full ${\n            isLoggingIn ? \"opacity-50 cursor-not-allowed\" : \"\"\n          }`}\n        >\n          <X className=\"h-4 w-4\" />\n          <span className=\"sr-only\">Close</span>\n        </Button>\n\n        <div className=\"p-8\">\n          <DialogHeader className=\"space-y-4\">\n            <DialogTitle className=\"text-center\">\n              <YakRoomsText size=\"default\" />\n            </DialogTitle>\n            <DialogDescription className=\"text-center text-sm\">\n              We'll sign you in or create an account if you don't have one yet.\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"mt-6 space-y-4\">\n            {error && (\n              <Alert variant=\"destructive\" className=\"border-red-200 bg-red-50\">\n                <AlertDescription className=\"text-sm\">\n                  {error}\n                </AlertDescription>\n              </Alert>\n            )}\n\n            {message && (\n              <Alert className=\"border-emerald-200 bg-emerald-50\">\n                <AlertDescription className=\"text-sm text-emerald-600\">\n                  {message}\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <GoogleSignInButton \n              onClose={onClose} \n              onLoginSuccess={handleLoginSuccess}\n              onLoginStart={handleLoginStart}\n              onLoginComplete={handleLoginComplete}\n              flag={flag}\n            />\n\n            <p className=\"text-xs text-center text-muted-foreground\">\n              By signing up or signing in, you agree to our{\" \"}\n              <a href=\"#\" className=\"text-primary hover:underline\">\n                Terms\n              </a>{\" \"}\n              and{\" \"}\n              <a href=\"#\" className=\"text-primary hover:underline\">\n                Privacy Policy\n              </a>\n              .\n            </p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default LoginModal;","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/authentication/authSlice.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/authentication/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/booking/BookingContext.jsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":7,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":7,"endColumn":31},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'handleWebSocketMessage' and 'socket'. Either include them or remove the dependency array.","line":80,"column":6,"nodeType":"ArrayExpression","endLine":80,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [handleWebSocketMessage, isAuthenticated, socket, userId]","fix":{"range":[2197,2222],"text":"[handleWebSocketMessage, isAuthenticated, socket, userId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'handleBookingStatusUpdate' and 'handleConnectionUrlUpdate'. Either include them or remove the dependency array.","line":101,"column":6,"nodeType":"ArrayExpression","endLine":101,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [handleBookingStatusUpdate, handleConnectionUrlUpdate]","fix":{"range":[2876,2878],"text":"[handleBookingStatusUpdate, handleConnectionUrlUpdate]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '../authentication';\nimport { API_BASE_URL } from '../../shared/services/firebaseConfig';\n\nconst BookingContext = createContext();\n\nexport const useBookingContext = () => {\n  const context = useContext(BookingContext);\n  if (!context) {\n    throw new Error('useBookingContext must be used within a BookingProvider');\n  }\n  return context;\n};\n\nexport const BookingProvider = ({ children }) => {\n  const [socket, setSocket] = useState(null);\n  const [reviewSheet, setReviewSheet] = useState({\n    isOpen: false,\n    bookingId: null,\n    hotelId: null,\n    userId: null\n  });\n  const [lastStatusChange, setLastStatusChange] = useState(null);\n  const { isAuthenticated, userId } = useAuth();\n\n  // Initialize WebSocket connection\n  useEffect(() => {\n    if (!isAuthenticated) {\n      if (socket) {\n        socket.close();\n        setSocket(null);\n      }\n      return;\n    }\n\n    // Create WebSocket connection using correct ws:// protocol\n    const wsUrl = API_BASE_URL.replace('http://', 'ws://').replace('https://', 'wss://') + '/ws/bookings';\n    const newSocket = new WebSocket(wsUrl);\n\n    newSocket.onopen = () => {\n      console.log('WebSocket connected for booking updates');\n      // Send authentication message if needed\n      newSocket.send(JSON.stringify({\n        type: 'AUTH',\n        userId: userId\n      }));\n    };\n\n    newSocket.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        handleWebSocketMessage(data);\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n\n    newSocket.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n\n    newSocket.onclose = () => {\n      console.log('WebSocket disconnected');\n      // Attempt to reconnect after a delay\n      setTimeout(() => {\n        if (isAuthenticated) {\n          setSocket(null); // This will trigger a new connection\n        }\n      }, 5000);\n    };\n\n    setSocket(newSocket);\n\n    // Cleanup on unmount\n    return () => {\n      if (newSocket) {\n        newSocket.close();\n      }\n    };\n  }, [isAuthenticated, userId]);\n\n  // Handle incoming WebSocket messages\n  const handleWebSocketMessage = useCallback((data) => {\n    switch (data.type) {\n      case 'BOOKING_STATUS_UPDATE':\n        handleBookingStatusUpdate(data.payload);\n        break;\n      case 'BOOKING_CREATED':\n        // Handle new booking creation if needed\n        break;\n      case 'BOOKING_CANCELLED':\n        // Handle booking cancellation if needed\n        break;\n      case 'CONNECTION_URL_UPDATE':\n        // Listen for connection URL updates\n        handleConnectionUrlUpdate(data.payload);\n        break;\n      default:\n        console.log('Unknown WebSocket message type:', data.type);\n    }\n  }, []);\n\n  // Handle booking status updates\n  const handleBookingStatusUpdate = useCallback((payload) => {\n    const { bookingId, newStatus, hotelId, userId: bookingUserId } = payload;\n    \n    // Track the status change\n    setLastStatusChange({\n      bookingId,\n      newStatus,\n      timestamp: new Date().toISOString()\n    });\n\n    // If status changed to CHECKED_OUT, trigger review sheet\n    if (newStatus === 'CHECKED_OUT') {\n      setReviewSheet({\n        isOpen: true,\n        bookingId,\n        hotelId,\n        userId: bookingUserId\n      });\n    }\n  }, []);\n\n  // Handle connection URL updates\n  const handleConnectionUrlUpdate = useCallback((payload) => {\n    const { connectionUrl, hotelId, userId: bookingUserId, bookingId } = payload;\n    \n    // Check if connection URL is not null and trigger HotelReviewSheet\n    if (connectionUrl && connectionUrl !== null && connectionUrl !== 'null') {\n      console.log('Connection URL received, triggering HotelReviewSheet:', connectionUrl);\n      \n      setReviewSheet({\n        isOpen: true,\n        bookingId: bookingId || null,\n        hotelId,\n        userId: bookingUserId\n      });\n    } else {\n      console.log('Connection URL is null, not triggering HotelReviewSheet');\n    }\n  }, []);\n\n  // Close review sheet\n  const closeReviewSheet = useCallback(() => {\n    setReviewSheet({\n      isOpen: false,\n      bookingId: null,\n      hotelId: null,\n      userId: null\n    });\n  }, []);\n\n  // Manually open review sheet (for testing or manual triggers)\n  const openReviewSheet = useCallback((bookingId, hotelId, userId) => {\n    setReviewSheet({\n      isOpen: true,\n      bookingId,\n      hotelId,\n      userId\n    });\n  }, []);\n\n  // Clear last status change\n  const clearLastStatusChange = useCallback(() => {\n    setLastStatusChange(null);\n  }, []);\n\n  const value = {\n    reviewSheet,\n    lastStatusChange,\n    closeReviewSheet,\n    openReviewSheet,\n    clearLastStatusChange,\n    socket\n  };\n\n  return (\n    <BookingContext.Provider value={value}>\n      {children}\n    </BookingContext.Provider>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/booking/BookingNotifications.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/booking/RoomBookingCard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/booking/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/guest/GuestDashboard.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchBookedDates'. Either include it or remove the dependency array.","line":351,"column":6,"nodeType":"ArrayExpression","endLine":351,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, booking, fetchBookedDates]","fix":{"range":[11675,11692],"text":"[isOpen, booking, fetchBookedDates]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchBookings'. Either include it or remove the dependency array.","line":1561,"column":6,"nodeType":"ArrayExpression","endLine":1561,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [userId, currentPage, fetchBookings]","fix":{"range":[58174,58195],"text":"[userId, currentPage, fetchBookings]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updatedBooking' is defined but never used.","line":1765,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":1765,"endColumn":46,"suggestions":[{"messageId":"removeVar","data":{"varName":"updatedBooking"},"fix":{"range":[64656,64670],"text":""},"desc":"Remove unused variable 'updatedBooking'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  Calendar,\n  MapPin,\n  Eye,\n  X,\n  Phone,\n  ChevronLeft,\n  ChevronRight,\n  Hotel,\n  CreditCard,\n  User,\n  Clock,\n  CheckCircle,\n  AlertCircle,\n  XCircle,\n  Navigation,\n  ExternalLink,\n  Home,\n  CalendarPlus,\n  RefreshCw,\n  Bell,\n} from \"lucide-react\";\nimport { Separator } from \"@/shared/components/separator\";\nimport { Button } from \"@/shared/components/button\";\nimport { Link } from \"react-router-dom\";\nimport api from \"../../shared/services/Api\";\nimport { useAuth } from \"../authentication\";\nimport { toast } from \"sonner\";\nimport { CustomDatePicker } from \"../../shared/components\";\nimport AuthTest from \"../../components/AuthTest\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/shared/components\";\nimport { API_BASE_URL } from \"../../shared/services/firebaseConfig\";\n\n// Number formatting function\nconst formatCurrency = (amount) => {\n  return `Nu. ${amount.toLocaleString(\"en-IN\")} /-`;\n};\n\n// Status configuration\nconst statusConfig = {\n  CONFIRMED: {\n    label: \"Confirmed\",\n    color: \"bg-green-50 text-green-700 border border-green-200\",\n    icon: CheckCircle,\n    actions: [\"view\", \"directions\", \"extend\", \"cancel\"],\n  },\n  CANCELLATION_REQUESTED: {\n    label: \"Cancellation Requested\",\n    color: \"bg-amber-50 text-amber-700 border border-amber-200\",\n    icon: AlertCircle,\n    actions: [\"view\", \"directions\"],\n  },\n  CANCELLATION_REJECTED: {\n    label: \"Cancellation Rejected\",\n    color: \"bg-orange-50 text-orange-700 border border-orange-200\",\n    icon: CheckCircle,\n    actions: [\"view\", \"directions\", \"extend\"],\n  },\n  BOOKING_CANCELLATION_APPROVED: {\n    label: \"Cancellation Approved\",\n    color: \"bg-green-50 text-green-700 border border-green-200\",\n    icon: CheckCircle,\n    actions: [\"view\", \"directions\"],\n  },\n  PENDING: {\n    label: \"Pending\",\n    color: \"bg-yellow-50 text-yellow-700 border border-yellow-200\",\n    icon: Clock,\n    actions: [\"view\", \"directions\"],\n  },\n  CANCELLED: {\n    label: \"Cancelled\",\n    color: \"bg-red-50 text-red-700 border border-red-200\",\n    icon: XCircle,\n    actions: [\"view\", \"directions\"],\n  },\n  COMPLETED: {\n    label: \"Completed\",\n    color: \"bg-blue-50 text-blue-700 border border-blue-200\",\n    icon: CheckCircle,\n    actions: [\"view\", \"directions\"],\n  },\n  CHECKED_IN: {\n    label: \"Checked In\",\n    color: \"bg-purple-50 text-purple-700 border border-purple-200\",\n    icon: CheckCircle,\n    actions: [\"view\", \"directions\", \"extend\"],\n  },\n  CHECKED_OUT: {\n    label: \"Checked Out\",\n    color: \"bg-gray-50 text-gray-700 border border-gray-200\",\n    icon: CheckCircle,\n    actions: [\"view\", \"directions\"],\n  },\n};\n\n// Loading skeleton component\nconst BookingCardSkeleton = () => (\n  <div className=\"bg-card rounded-lg border p-6 animate-pulse\">\n    <div className=\"flex justify-between items-start mb-4\">\n      <div className=\"space-y-2\">\n        <div className=\"h-6 bg-muted rounded w-48\"></div>\n        <div className=\"h-4 bg-muted rounded w-32\"></div>\n      </div>\n      <div className=\"h-6 bg-muted rounded w-20\"></div>\n    </div>\n    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\">\n      <div className=\"space-y-2\">\n        <div className=\"h-4 bg-muted rounded w-16\"></div>\n        <div className=\"h-4 bg-muted rounded w-20\"></div>\n      </div>\n      <div className=\"space-y-2\">\n        <div className=\"h-4 bg-muted rounded w-16\"></div>\n        <div className=\"h-4 bg-muted rounded w-20\"></div>\n      </div>\n      <div className=\"space-y-2\">\n        <div className=\"h-4 bg-muted rounded w-16\"></div>\n        <div className=\"h-4 bg-muted rounded w-20\"></div>\n      </div>\n      <div className=\"space-y-2\">\n        <div className=\"h-4 bg-muted rounded w-16\"></div>\n        <div className=\"h-4 bg-muted rounded w-20\"></div>\n      </div>\n    </div>\n    <div className=\"flex gap-2\">\n      <div className=\"h-9 bg-muted rounded w-20\"></div>\n      <div className=\"h-9 bg-muted rounded w-20\"></div>\n    </div>\n  </div>\n);\n\n// Status badge component\nconst StatusBadge = ({ status }) => {\n  const config = statusConfig[status] || statusConfig.PENDING; // Fallback to PENDING if status not found\n  const IconComponent = config.icon;\n\n  return (\n    <span\n      className={`inline-flex items-center gap-1.5 px-2.5 py-0.5 rounded-full text-xs font-medium ${config.color}`}\n    >\n      <IconComponent size={12} />\n      {config.label}\n    </span>\n  );\n};\n\n// Action button component\nconst ActionButton = ({ action, onClick, disabled = false }) => {\n  const buttonConfig = {\n    view: { label: \"View\", icon: Eye, variant: \"outline\" },\n    directions: { label: \"Directions\", icon: Navigation, variant: \"outline\" },\n    cancel: { label: \"Cancel\", icon: X, variant: \"outline\" },\n    contact: { label: \"Contact\", icon: Phone, variant: \"outline\" },\n    extend: { label: \"Extend\", icon: CalendarPlus, variant: \"outline\" },\n  };\n\n  const config = buttonConfig[action];\n  const IconComponent = config.icon;\n\n  return (\n    <button\n      onClick={onClick}\n      disabled={disabled}\n      className={`inline-flex items-center gap-1.5 px-3 py-2 rounded-md text-sm font-medium border border-input bg-background hover:bg-accent hover:text-accent-foreground transition-colors cursor-pointer ${\n        disabled ? \"opacity-50 cursor-not-allowed\" : \"\"\n      }`}\n    >\n      <IconComponent size={14} />\n      {config.label}\n    </button>\n  );\n};\n\n// Google Maps Modal Component\nconst GoogleMapsModal = ({ booking, isOpen, onClose }) => {\n  const [userLocation, setUserLocation] = useState(null);\n  const [locationError, setLocationError] = useState(false);\n\n  useEffect(() => {\n    if (isOpen && navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setUserLocation({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          });\n          setLocationError(false);\n        },\n        (error) => {\n          console.error(\"Error getting location:\", error);\n          setLocationError(true);\n        }\n      );\n    }\n  }, [isOpen]);\n\n  const openInGoogleMaps = () => {\n    if (userLocation && booking) {\n      // Open Google Maps with directions from user location to hotel\n      const url = `https://www.google.com/maps/dir/${userLocation.lat},${userLocation.lng}/${booking.hotelLatitude},${booking.hotelLongitude}`;\n      window.open(url, \"_blank\");\n    } else if (booking) {\n      // Open Google Maps with just the hotel location\n      const url = `https://www.google.com/maps/search/?api=1&query=${booking.hotelLatitude},${booking.hotelLongitude}`;\n      window.open(url, \"_blank\");\n    }\n  };\n\n  const openDirectionsWithAddress = () => {\n    if (booking) {\n      const encodedAddress = encodeURIComponent(booking.address);\n      const url = `https://www.google.com/maps/dir/?api=1&destination=${encodedAddress}`;\n      window.open(url, \"_blank\");\n    }\n  };\n\n  if (!isOpen || !booking) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-background rounded-lg max-w-md w-full border\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center p-6 border-b\">\n          <div>\n            <h2 className=\"text-lg font-semibold text-foreground\">\n              Get Directions\n            </h2>\n            <p className=\"text-sm text-muted-foreground\">{booking.hotelName}</p>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-accent rounded-md transition-colors cursor-pointer\"\n          >\n            <X size={20} />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6 space-y-4\">\n          {/* Hotel Address */}\n          <div className=\"bg-muted/50 rounded-md p-4\">\n            <div className=\"flex items-start gap-3\">\n              <MapPin className=\"text-muted-foreground mt-1\" size={20} />\n              <div>\n                <h3 className=\"font-medium text-foreground\">\n                  {booking.hotelName}\n                </h3>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  {booking.address}\n                </p>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Coordinates: {booking.hotelLatitude}, {booking.hotelLongitude}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Location Status */}\n          {locationError && (\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-3\">\n              <p className=\"text-sm text-yellow-800\">\n                Location access denied. You can still get directions by opening\n                Google Maps.\n              </p>\n            </div>\n          )}\n\n          {userLocation && (\n            <div className=\"bg-green-50 border border-green-200 rounded-md p-3\">\n              <p className=\"text-sm text-green-800\">\n                ✓ Your location detected. Ready for turn-by-turn directions.\n              </p>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"space-y-3\">\n            <button\n              onClick={openDirectionsWithAddress}\n              className=\"w-full flex items-center justify-center gap-2 bg-primary text-primary-foreground px-4 py-3 rounded-md hover:bg-primary/90 transition-colors cursor-pointer\"\n            >\n              <Navigation size={18} />\n              Open Directions in Google Maps\n              <ExternalLink size={16} />\n            </button>\n\n            {userLocation && (\n              <button\n                onClick={openInGoogleMaps}\n                className=\"w-full flex items-center justify-center gap-2 border border-input bg-background hover:bg-accent px-4 py-3 rounded-md transition-colors cursor-pointer\"\n              >\n                <MapPin size={18} />\n                Directions from My Location\n                <ExternalLink size={16} />\n              </button>\n            )}\n\n            <button\n              onClick={() => {\n                const url = `https://www.google.com/maps/search/?api=1&query=${booking.hotelLatitude},${booking.hotelLongitude}`;\n                window.open(url, \"_blank\");\n              }}\n              className=\"w-full flex items-center justify-center gap-2 border border-input bg-background hover:bg-accent px-4 py-2 rounded-md transition-colors text-sm cursor-pointer\"\n            >\n              <Hotel size={16} />\n              View Hotel on Map\n              <ExternalLink size={14} />\n            </button>\n          </div>\n\n          {/* Info */}\n          <div className=\"text-xs text-muted-foreground text-center pt-2 border-t\">\n            Opens in Google Maps app or browser\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Extend Booking Modal Component\nconst ExtendBookingModal = ({ booking, isOpen, onClose, onExtend }) => {\n  const [newCheckOutDate, setNewCheckOutDate] = useState(\"\");\n  const [bookedDates, setBookedDates] = useState([]);\n  const [isLoadingBookedDates, setIsLoadingBookedDates] = useState(false);\n  const [isExtending, setIsExtending] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [availabilityChecked, setAvailabilityChecked] = useState(false);\n\n  // Reset state when modal opens/closes\n  useEffect(() => {\n    if (isOpen) {\n      setNewCheckOutDate(\"\");\n      setBookedDates([]);\n      setError(\"\");\n      setAvailabilityChecked(false);\n      if (booking) {\n        fetchBookedDates();\n      }\n    }\n  }, [isOpen, booking]);\n\n  // Fetch booked dates for the room\n  const fetchBookedDates = async () => {\n    if (!booking?.roomId) return;\n    \n    setIsLoadingBookedDates(true);\n    try {\n      const response = await api.get(`/rooms/${booking.roomId}/booked-dates`);\n      if (response.data && response.data.bookedDates) {\n        setBookedDates(response.data.bookedDates);\n        \n        // Check if extension is possible (tomorrow is available)\n        const currentCheckOut = new Date(booking.checkOutDate);\n        const tomorrow = new Date(currentCheckOut);\n        tomorrow.setDate(tomorrow.getDate() + 1);\n        \n        const tomorrowBlocked = response.data.bookedDates.some(blockedDate => {\n          const blocked = new Date(blockedDate);\n          return blocked.toDateString() === tomorrow.toDateString();\n        });\n        \n        if (tomorrowBlocked) {\n          setError(\"Unfortunately, your room is not available for extension as it's already booked from tomorrow onwards. We recommend making a new booking for your desired dates using our hotel search feature.\");\n        }\n        \n        setAvailabilityChecked(true);\n      }\n    } catch (error) {\n      console.error('Failed to fetch booked dates:', error);\n      toast.error('Failed to load booking calendar', {\n        description: 'Could not fetch booked dates. Please try again.',\n        duration: 6000\n      });\n      setAvailabilityChecked(true);\n    } finally {\n      setIsLoadingBookedDates(false);\n    }\n  };\n\n  // Get minimum date for new checkout (same day as current checkout or later)\n  const getMinCheckOutDate = () => {\n    if (!booking?.checkOutDate) return new Date();\n    const currentCheckOut = new Date(booking.checkOutDate);\n    // Allow selecting the same checkout date for same-day extensions (e.g., late checkout)\n    return currentCheckOut;\n  };\n\n  // Calculate additional nights and cost\n  const calculateExtension = () => {\n    if (!newCheckOutDate || !booking?.checkOutDate) return { nights: 0, cost: 0 };\n    \n    // Calculate extension from current checkout to new checkout\n    const currentCheckOut = new Date(booking.checkOutDate);\n    const newCheckOut = new Date(newCheckOutDate);\n    const diffTime = newCheckOut.getTime() - currentCheckOut.getTime();\n    const nights = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    // Calculate cost based on original booking's per-night rate\n    const originalNights = calculateNights(booking.checkInDate, booking.checkOutDate);\n    const pricePerNight = booking.totalPrice / originalNights;\n    \n    // Allow same-date extensions (0 nights) - useful for late checkout requests\n    // Cost remains 0 for same-date extensions\n    const cost = nights > 0 ? nights * pricePerNight : 0;\n    \n    return { \n      nights: nights >= 0 ? nights : 0, \n      cost: cost >= 0 ? cost : 0\n    };\n  };\n\n  // Calculate nights between two dates\n  const calculateNights = (checkIn, checkOut) => {\n    const checkInDate = new Date(checkIn);\n    const checkOutDate = new Date(checkOut);\n    const diffTime = checkOutDate - checkInDate;\n    const nights = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return nights;\n  };\n\n  // Handle date selection\n  const handleDateSelect = (date) => {\n    if (!date) {\n      setNewCheckOutDate(\"\");\n      setError(\"\");\n      return;\n    }\n\n    // Format date to YYYY-MM-DD (this becomes the new checkout date)\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const dateValue = `${year}-${month}-${day}`;\n    \n    setNewCheckOutDate(dateValue);\n    setError(\"\");\n\n    // Check if there are any booked dates between current checkout and new checkout\n    const currentCheckOut = new Date(booking.checkOutDate);\n    const selectedDate = new Date(date);\n    \n    // Check for conflicts between current checkout and new checkout\n    const conflictingDates = [];\n    const hasConflict = bookedDates.some(blockedDate => {\n      const blocked = new Date(blockedDate);\n      if (blocked > currentCheckOut && blocked <= selectedDate) {\n        conflictingDates.push(blocked.toLocaleDateString());\n        return true;\n      }\n      return false;\n    });\n\n    if (hasConflict) {\n      // Check if tomorrow (first day after checkout) is blocked\n      const tomorrow = new Date(currentCheckOut);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      const tomorrowBlocked = bookedDates.some(blockedDate => {\n        const blocked = new Date(blockedDate);\n        return blocked.toDateString() === tomorrow.toDateString();\n      });\n\n      if (tomorrowBlocked) {\n        setError(\"You cannot select dates\");\n      } else {\n        setError(`The selected extension period conflicts with existing bookings on: ${conflictingDates.join(', ')}. Please select a shorter extension period or make a new booking for your desired dates.`);\n      }\n    }\n  };\n\n  // Handle extend booking\n  const handleExtendBooking = async () => {\n    if (!newCheckOutDate || error) return;\n\n    const extension = calculateExtension();\n    // Allow same-date extensions (0 nights) for late checkout requests\n    if (extension.nights < 0) {\n      setError(\"Please select a valid extension date.\");\n      return;\n    }\n\n    setIsExtending(true);\n    try {\n      const payload = {\n        newCheckOutDate: newCheckOutDate,     \n        guests: booking.guests,               \n        phone: booking.phone,                 \n        destination: booking.destination,     \n        origin: booking.origin,               \n      };\n\n      const response = await api.put(`/bookings/${booking.id}/extend`, payload);\n      \n      if (response.status === 200) {\n        const issameDayExtension = extension.nights === 0;\n        toast.success(\n          issameDayExtension ? \"Same-day extension requested successfully!\" : \"Booking extended successfully!\", \n          {\n            description: issameDayExtension \n              ? `Your same-day extension request for ${new Date(newCheckOutDate).toLocaleDateString()} has been submitted.`\n              : `Your stay has been extended until ${new Date(newCheckOutDate).toLocaleDateString()}.`,\n            duration: 6000\n          }\n        );\n        onExtend(response.data);\n        onClose();\n      }\n    } catch (error) {\n      console.error(\"Error extending booking:\", error);\n      \n      // Handle specific error cases\n      if (error.response?.status === 409) {\n        setError(\"The selected dates are no longer available. Please choose different dates.\");\n      } else if (error.response?.status === 400) {\n        setError(error.response.data?.message || \"Invalid extension request. Please check your dates.\");\n      } else {\n        toast.error(\"Failed to extend booking\", {\n          description: \"There was an error processing your extension. Please try again.\",\n          duration: 6000\n        });\n      }\n    } finally {\n      setIsExtending(false);\n    }\n  };\n\n  // Check if extension is possible\n  const canExtend = () => {\n    if (!booking) return false;\n    \n    // Get today's date at midnight for accurate comparison\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    // Get checkout date at midnight for accurate comparison\n    const checkOutDate = new Date(booking.checkOutDate);\n    checkOutDate.setHours(0, 0, 0, 0);\n    \n    // Can extend if checkout is today or in the future (including same day)\n    return checkOutDate >= today;\n  };\n\n  if (!isOpen || !booking) return null;\n\n  const extension = calculateExtension();\n  const minDate = getMinCheckOutDate();\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-background rounded-lg max-w-md w-full max-h-[90vh] overflow-y-auto border\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center p-6 border-b\">\n          <div>\n            <h2 className=\"text-lg font-semibold text-foreground\">\n              Extend Your Stay\n            </h2>\n            <p className=\"text-sm text-muted-foreground\">{booking.hotelName}</p>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-accent rounded-md transition-colors cursor-pointer\"\n          >\n            <X size={20} />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6 space-y-4\">\n          {!canExtend() && (\n            <div className=\"bg-red-50 border border-red-200 rounded-md p-3\">\n              <p className=\"text-sm text-red-800\">\n                This booking cannot be extended as the checkout date has already passed.\n              </p>\n            </div>\n          )}\n\n          {canExtend() && (\n            <>\n              {/* Current Booking Info */}\n              <div className=\"bg-muted/50 rounded-md p-4\">\n                <h3 className=\"font-medium text-foreground mb-2\">Current Booking</h3>\n                <div className=\"space-y-1 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Check-in:</span>\n                    <span>{new Date(booking.checkInDate).toLocaleDateString()}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Current Check-out:</span>\n                    <span>{new Date(booking.checkOutDate).toLocaleDateString()}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Room:</span>\n                    <span>#{booking.roomNumber}</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Loading indicator */}\n              {isLoadingBookedDates && (\n                <div className=\"flex items-center gap-2 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                  <RefreshCw className=\"w-4 h-4 animate-spin text-blue-500\" />\n                  <span className=\"text-sm text-blue-700\">Loading availability...</span>\n                </div>\n              )}\n\n              {/* Date Picker */}\n              {availabilityChecked && (\n                <div className=\"space-y-2\">\n                  <CustomDatePicker\n                    selectedDate={newCheckOutDate ? new Date(newCheckOutDate + 'T12:00:00') : null}\n                    onDateSelect={handleDateSelect}\n                    blockedDates={bookedDates}\n                    minDate={minDate}\n                    placeholder=\"Select new checkout date\"\n                    label=\"New Check-out Date *\"\n                    error={error}\n                    disabled={isLoadingBookedDates}\n                    className=\"w-full\"\n                  />\n                </div>\n              )}\n\n              {/* Extension Summary */}\n              {extension.nights >= 0 && !error && newCheckOutDate && (\n                <div className=\"bg-green-50 border border-green-200 rounded-md p-4\">\n                  <h4 className=\"font-medium text-green-800 mb-2\">\n                    {extension.nights === 0 ? \"Same-Day Extension Summary\" : \"Extension Summary\"}\n                  </h4>\n                  <div className=\"space-y-1 text-sm text-green-700\">\n                    <div className=\"flex justify-between\">\n                      <span>Current check-out:</span>\n                      <span className=\"font-medium\">{new Date(booking.checkOutDate).toLocaleDateString()}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>New check-out:</span>\n                      <span className=\"font-medium\">{new Date(newCheckOutDate).toLocaleDateString()}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Additional nights:</span>\n                      <span className=\"font-medium\">\n                        {extension.nights} {extension.nights === 0 ? \"(Same day)\" : \"\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between font-medium pt-2 border-t border-green-300\">\n                      <span>Additional cost:</span>\n                      <span>{formatCurrency(extension.cost)}</span>\n                    </div>\n                    {extension.nights === 0 && (\n                      <div className=\"text-xs text-green-600 mt-2 p-2 bg-green-100 rounded\">\n                        <strong>Note:</strong> Same-day extensions are typically used for late checkout requests and may not incur additional charges.\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {/* No availability message */}\n              {availabilityChecked && bookedDates.length > 0 && !error && (\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-3\">\n                  <p className=\"text-sm text-yellow-800\">\n                    <strong>Note:</strong> Some dates may not be available due to existing bookings. \n                    If your desired extension dates are not available, consider making a new booking for alternative dates.\n                  </p>\n                </div>\n              )}\n\n              {/* Error Message */}\n              {error && (\n                <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\n                  <div className=\"flex items-start gap-3\">\n                    <AlertCircle className=\"h-5 w-5 text-red-600 mt-0.5 flex-shrink-0\" />\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-red-800 mb-1\">Extension Not Available</h4>\n                      <p className=\"text-sm text-red-700 mb-3\">{error}</p>\n                      {error.includes(\"tomorrow onwards\") && (\n                        <div className=\"bg-white border border-red-300 rounded-md p-3\">\n                          <p className=\"text-sm text-red-800 font-medium mb-2\">Alternative Options:</p>\n                          <ul className=\"text-sm text-red-700 space-y-1\">\n                            <li>• Search for available rooms at this hotel for your desired dates</li>\n                            <li>• Browse other hotels in the same area</li>\n                            <li>• Consider flexible dates for better availability</li>\n                          </ul>\n                          <div className=\"mt-3 pt-3 border-t border-red-200\">\n                            <Link \n                              to=\"/hotel\" \n                              className=\"inline-flex items-center gap-2 text-sm font-medium text-red-600 hover:text-red-800 transition-colors\"\n                            >\n                              <ExternalLink size={14} />\n                              Browse Available Hotels\n                            </Link>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n\n        {/* Footer */}\n        {canExtend() && (\n          <div className=\"flex gap-2 p-6 border-t\">\n            <button\n              onClick={onClose}\n              className=\"flex-1 px-4 py-2 border border-input bg-background hover:bg-accent rounded-md transition-colors cursor-pointer\"\n            >\n              Cancel\n            </button>\n            <button\n              onClick={handleExtendBooking}\n              disabled={!newCheckOutDate || extension.nights < 0 || error || isExtending}\n              className=\"flex-1 px-4 py-2 bg-primary text-primary-foreground hover:bg-primary/90 rounded-md transition-colors disabled:opacity-50 disabled:cursor-not-allowed cursor-pointer\"\n            >\n              {isExtending ? (\n                <span className=\"flex items-center justify-center gap-2\">\n                  <RefreshCw className=\"w-4 h-4 animate-spin\" />\n                  {extension.nights === 0 ? \"Processing...\" : \"Extending...\"}\n                </span>\n              ) : (\n                extension.nights === 0 \n                  ? \"Request Same-Day Extension (Free)\" \n                  : `Extend Stay (${formatCurrency(extension.cost)})`\n              )}\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst BookingCard = ({\n  booking,\n  onViewDetails,\n  onCancel,\n  onContact,\n  onDirections,\n  onExtend,\n}) => {\n  const config = statusConfig[booking.status] || statusConfig.PENDING; // Fallback to PENDING if status not found\n  const isCancellationRequested = booking.status === \"CANCELLATION_REQUESTED\";\n  const isCancellationRejected = booking.status === \"CANCELLATION_REJECTED\";\n  const isCancellationApproved = booking.status === \"BOOKING_CANCELLATION_APPROVED\";\n  const isDisabled = booking.status === \"CANCELLED\" || isCancellationRequested || isCancellationApproved;\n  const isCheckedOut = booking.status === \"CHECKED_OUT\";\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      month: \"short\",\n      day: \"numeric\",\n      year: \"numeric\",\n    });\n  };\n\n  const formatDateWithDay = (dateString) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      weekday: \"short\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  const getDaysDifference = (checkIn) => {\n    const today = new Date();\n    const checkInDate = new Date(checkIn);\n    const diffTime = checkInDate - today;\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  const calculateNights = (checkIn, checkOut) => {\n    const checkInDate = new Date(checkIn);\n    const checkOutDate = new Date(checkOut);\n    const diffTime = checkOutDate - checkInDate;\n    const nights = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return nights;\n  };\n\n  const daysUntilCheckIn = getDaysDifference(booking.checkInDate);\n  const numberOfNights = calculateNights(\n    booking.checkInDate,\n    booking.checkOutDate\n  );\n\n  return (\n    <div\n      className={`rounded-lg border p-4 sm:p-6 transition-all hover:shadow-md ${\n        isCheckedOut\n          ? \"bg-red-50 border-red-200 hover:bg-red-100\"\n          : isCancellationRequested\n            ? \"bg-amber-50 border-amber-200 hover:bg-amber-100\"\n            : isCancellationRejected\n              ? \"bg-orange-50 border-orange-200 hover:bg-orange-100\"\n              : \"bg-card\"\n      } ${isDisabled ? \"opacity-60 pointer-events-none\" : \"\"}`}\n    >\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3 mb-4\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-start gap-3\">\n            <div className=\"bg-primary/10 text-primary p-2 rounded-lg flex-shrink-0\">\n              <Hotel size={18} className=\"sm:w-5 sm:h-5\" />\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <h3\n                className={`text-base sm:text-lg font-semibold ${\n                  isDisabled ? \"text-muted-foreground\" : \"text-foreground\"\n                } mb-1`}\n              >\n                {booking.hotelName || \"Hotel\"}\n              </h3>\n              <p className=\"text-sm text-muted-foreground mb-1\">\n                {booking.hotelDistrict && `${booking.hotelDistrict} District`}\n              </p>\n              <p className=\"text-sm text-muted-foreground mb-1\">\n                Room No: #{booking.roomNumber}\n              </p>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex-shrink-0\">\n          <StatusBadge status={booking.status} />\n        </div>\n      </div>\n\n      {/* Stay Details */}\n      <div className=\"bg-muted/30 rounded-lg p-3 sm:p-4 mb-4\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3 sm:gap-4\">\n          \n          <div className=\"flex items-center gap-2\">\n            <Calendar className=\"text-primary flex-shrink-0\" size={16} />\n            \n            \n            <div className=\"min-w-0\">\n              <p className=\"text-xs text-muted-foreground\">Check-in</p>\n              <p\n                className={`text-sm font-medium ${\n                  isDisabled ? \"text-muted-foreground\" : \"text-foreground\"\n                }`}\n              >\n                {formatDateWithDay(booking.checkInDate)}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Calendar className=\"text-primary flex-shrink-0\" size={16} />\n            <div className=\"min-w-0\">\n              <p className=\"text-xs text-muted-foreground\">Check-out</p>\n              <p\n                className={`text-sm font-medium ${\n                  isDisabled ? \"text-muted-foreground\" : \"text-foreground\"\n                }`}\n              >\n                {formatDateWithDay(booking.checkOutDate)}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Clock className=\"text-primary flex-shrink-0\" size={16} />\n            <div className=\"min-w-0\">\n              <p className=\"text-xs text-muted-foreground\">Duration</p>\n              <p\n                className={`text-sm font-medium ${\n                  isDisabled ? \"text-muted-foreground\" : \"text-foreground\"\n                }`}\n              >\n                {numberOfNights} night{numberOfNights !== 1 ? \"s\" : \"\"}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Separator */}\n      <div className=\"block sm:hidden\">\n        <Separator className=\"my-3\" />\n      </div>\n\n      {/* Guest, Price, and Passcode Info */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4 mb-4\">\n        <div className=\"flex items-center gap-2\">\n          <User className=\"text-muted-foreground flex-shrink-0\" size={16} />\n          <div className=\"min-w-0\">\n            <p className=\"text-xs text-muted-foreground\">Guests</p>\n            <p\n              className={`text-sm font-medium ${\n                isDisabled ? \"text-muted-foreground\" : \"text-foreground\"\n              }`}\n            >\n              {booking.guests} Guest{booking.guests !== 1 ? \"s\" : \"\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <CreditCard\n            className=\"text-muted-foreground flex-shrink-0\"\n            size={16}\n          />\n          <div className=\"min-w-0\">\n            <p className=\"text-xs text-muted-foreground\">Total Amount</p>\n            <p\n              className={`text-base sm:text-lg font-bold ${\n                isDisabled ? \"text-muted-foreground\" : \"text-foreground\"\n              }`}\n            >\n              {formatCurrency(booking.totalPrice)}\n            </p>\n          </div>\n        </div>\n        {booking.passcode && (\n          <div className=\"flex items-center gap-2\">\n            <div className=\"bg-primary/10 text-primary p-1 rounded flex-shrink-0\">\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z\" />\n              </svg>\n            </div>\n            <div className=\"min-w-0\">\n              <p className=\"text-xs text-muted-foreground\">Room Passcode</p>\n              <p\n                className={`text-sm font-mono font-bold tracking-wider ${\n                  isDisabled ? \"text-muted-foreground\" : \"text-primary\"\n                }`}\n              >\n                {booking.passcode}\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Mobile Separator */}\n      <div className=\"block sm:hidden\">\n        <Separator className=\"my-3\" />\n      </div>\n\n      {/* Upcoming booking indicator */}\n      {booking.status === \"CONFIRMED\" &&\n        daysUntilCheckIn <= 7 &&\n        daysUntilCheckIn > 0 && (\n          <div className=\"bg-blue-50 border border-blue-200 rounded-md p-3 mb-4\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\"></div>\n              <p className=\"text-sm text-blue-800 font-medium\">\n                Check-in in {daysUntilCheckIn} day\n                {daysUntilCheckIn !== 1 ? \"s\" : \"\"}\n              </p>\n            </div>\n          </div>\n        )}\n\n      {/* Today check-in indicator */}\n      {booking.status === \"CONFIRMED\" && daysUntilCheckIn === 0 && (\n        <div className=\"bg-green-50 border border-green-200 rounded-md p-3 mb-4\">\n          <div className=\"flex items-center gap-2\">\n            <CheckCircle className=\"text-green-600\" size={16} />\n            <p className=\"text-sm text-green-800 font-medium\">\n              Check-in Today!\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* Cancellation rejected indicator */}\n      {booking.status === \"CANCELLATION_REJECTED\" && (\n        <div className=\"bg-orange-50 border border-orange-200 rounded-md p-3 mb-4\">\n          <div className=\"flex items-start gap-3\">\n            <CheckCircle className=\"text-orange-600 mt-0.5 flex-shrink-0\" size={16} />\n            <div className=\"flex-1\">\n              <p className=\"text-sm text-orange-800 font-medium mb-1\">\n                Cancellation Request Rejected\n              </p>\n              <p className=\"text-xs text-orange-700\">\n                Your cancellation request was not approved. Your booking remains active and you can proceed with your stay as planned.\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Cancellation approved indicator */}\n      {booking.status === \"CANCELLED\" && (\n        <div className=\"bg-green-50 border border-green-200 rounded-md p-4 mb-4\">\n          <div className=\"flex items-start gap-3\">\n            <div className=\"bg-green-100 p-1.5 rounded-full flex-shrink-0\">\n              <CheckCircle className=\"text-green-600\" size={18} />\n            </div>\n            <div className=\"flex-1\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <p className=\"text-sm text-green-800 font-semibold\">\n                  Cancellation Approved\n                </p>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <p className=\"text-sm text-green-700\">\n                  Your cancellation request has been approved. Your booking has been cancelled.\n                </p>\n                \n                {/* Refund Information */}\n                <div className=\"bg-white/60 border border-green-300 rounded-lg p-3 space-y-2\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <CheckCircle className=\"text-green-600\" size={14} />\n                    <span className=\"text-sm font-semibold text-green-800\">Refund Information</span>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium text-green-800\">Refund Amount:</span>\n                    <span className=\"text-sm font-bold text-green-800\">\n                      {formatCurrency(booking.totalPrice)}\n                    </span>\n                  </div>\n                </div>\n                \n                {/* Contact Hotel Owner */}\n                <div className=\"bg-green-100/50 border border-green-300 rounded-md p-3\">\n                  <div className=\"flex items-start gap-2\">\n                    <div className=\"w-1 h-1 bg-green-600 rounded-full mt-2 flex-shrink-0\"></div>\n                    <div className=\"text-xs text-green-700\">\n                      <p className=\"font-medium mb-1\">For refund details, please contact the hotel owner directly.</p>\n                      <p className=\"text-xs text-green-600 mt-1\">\n                        The hotel owner will provide you with specific refund processing information and timeline.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Contact Hotel */}\n                <div className=\"flex items-center gap-2 text-xs text-green-600\">\n                  <Phone size={12} />\n                  <span>Contact the hotel owner for refund-related questions and processing details.</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Mobile Separator */}\n      <div className=\"block sm:hidden\">\n        <Separator className=\"my-3\" />\n      </div>\n\n      {/* Booking Date */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between text-xs text-muted-foreground mb-4 gap-1\">\n        <span>Booked on {formatDate(booking.createdAt)}</span>\n      </div>\n\n      {/* Actions */}\n      <div className=\"flex flex-wrap gap-2 pt-3 border-t\">\n        {config.actions.map((action) => (\n          <ActionButton\n            key={action}\n            action={action}\n            disabled={isDisabled}\n            onClick={() => {\n              if (action === \"view\") onViewDetails(booking);\n              else if (action === \"directions\") onDirections(booking);\n              else if (action === \"contact\") onContact(booking);\n              else if (action === \"extend\") onExtend(booking);\n              else if (action === \"cancel\") onCancel(booking);\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Cancellation Confirmation Dialog Component\nconst CancellationConfirmationDialog = ({ \n  booking, \n  isOpen, \n  onClose, \n  onConfirm, \n  isCancelling = false \n}) => {\n  if (!isOpen || !booking) return null;\n\n  return (\n    <AlertDialog open={isOpen} onOpenChange={onClose}>\n      <AlertDialogContent className=\"sm:max-w-md\">\n        <AlertDialogHeader>\n          <AlertDialogTitle className=\"flex items-center gap-2\">\n            <XCircle className=\"h-5 w-5 text-red-500\" />\n            Cancel Booking\n          </AlertDialogTitle>\n          <AlertDialogDescription>\n            Are you sure you want to cancel the booking?\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={isCancelling}>\n            Exit\n          </AlertDialogCancel>\n          <AlertDialogAction\n            onClick={onConfirm}\n            disabled={isCancelling}\n            className=\"bg-red-600 text-white hover:bg-red-700 focus:ring-red-600\"\n          >\n            {isCancelling ? (\n              <span className=\"flex items-center gap-2\">\n                <RefreshCw className=\"h-4 w-4 animate-spin\" />\n                Processing...\n              </span>\n            ) : (\n              \"Proceed\"\n            )}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n};\n\n// Booking details modal\nconst BookingDetailsModal = ({ booking, isOpen, onClose }) => {\n  if (!isOpen || !booking) return null;\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      weekday: \"long\",\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    });\n  };\n\n  const formatDateTime = (dateString) => {\n    return new Date(dateString).toLocaleString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const calculateNights = (checkIn, checkOut) => {\n    const checkInDate = new Date(checkIn);\n    const checkOutDate = new Date(checkOut);\n    const diffTime = checkOutDate - checkInDate;\n    const nights = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return nights;\n  };\n\n  const numberOfNights = calculateNights(\n    booking.checkInDate,\n    booking.checkOutDate\n  );\n  const pricePerNight = booking.totalPrice / numberOfNights;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-background rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto border\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center p-6 border-b\">\n          <div>\n            <h2 className=\"text-xl font-semibold text-foreground\">\n              Booking Details\n            </h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-accent rounded-md transition-colors cursor-pointer\"\n          >\n            <X size={20} />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6 space-y-6\">\n          {/* Room Info */}\n          <div className=\"bg-muted/50 rounded-md p-4\">\n            <div className=\"flex items-start gap-3\">\n              <Hotel className=\"text-primary mt-1\" size={24} />\n              <div>\n                <h3 className=\"font-semibold text-foreground text-lg\">\n                  {booking.hotelName || \"Hotel\"}\n                </h3>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  {booking.hotelDistrict && `${booking.hotelDistrict} District`}\n                </p>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Room No: {booking.roomNumber}\n                </p>\n                <div className=\"mt-2\">\n                  <StatusBadge status={booking.status} />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Stay Information */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-medium text-foreground border-b pb-2\">\n              Stay Information\n            </h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-3\">\n                  <Calendar className=\"text-primary\" size={18} />\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">\n                      Check-in Date\n                    </label>\n                    <p className=\"text-foreground\">\n                      {formatDate(booking.checkInDate)}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <Calendar className=\"text-primary\" size={18} />\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">\n                      Check-out Date\n                    </label>\n                    <p className=\"text-foreground\">\n                      {formatDate(booking.checkOutDate)}\n                    </p>\n                  </div>\n                </div>\n                {booking.passcode && (\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"bg-primary/10 text-primary p-1 rounded\">\n                      <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z\" />\n                      </svg>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">\n                        Room Passcode\n                      </label>\n                      <p className=\"text-foreground font-mono font-bold text-lg tracking-wider text-primary\">\n                        {booking.passcode}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Use this code to access your room\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </div>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-3\">\n                  <Clock className=\"text-primary\" size={18} />\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">\n                      Duration\n                    </label>\n                    <p className=\"text-foreground\">\n                      {numberOfNights} night{numberOfNights !== 1 ? \"s\" : \"\"}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <User className=\"text-primary\" size={18} />\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">\n                      Guest Count\n                    </label>\n                    <p className=\"text-foreground\">\n                      {booking.guests} Guest{booking.guests !== 1 ? \"s\" : \"\"}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Booking Information */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-medium text-foreground border-b pb-2\">\n              Booking Information\n            </h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">\n                  Booking Date\n                </label>\n                <p className=\"text-foreground\">\n                  {formatDateTime(booking.createdAt)}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Pricing Breakdown */}\n          <div className=\"bg-muted/50 border rounded-md p-4 space-y-3\">\n            <h4 className=\"font-medium text-foreground flex items-center gap-2\">\n              <CreditCard className=\"text-primary\" size={18} />\n              Pricing Details\n            </h4>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">\n                  Price per night\n                </span>\n                <span className=\"text-sm font-medium\">\n                  {formatCurrency(pricePerNight)}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">\n                  {numberOfNights} night{numberOfNights !== 1 ? \"s\" : \"\"}\n                </span>\n                <span className=\"text-sm font-medium\">\n                  {formatCurrency(booking.totalPrice)}\n                </span>\n              </div>\n              <div className=\"border-t pt-2 flex justify-between items-center\">\n                <span className=\"font-medium text-foreground\">\n                  Total Amount\n                </span>\n                <span className=\"text-xl font-bold text-foreground\">\n                  {formatCurrency(booking.totalPrice)}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Empty state component\nconst EmptyState = ({ onRetry }) => (\n  <div className=\"text-center py-12\">\n    <h3 className=\"mt-4 text-lg font-medium text-foreground\">\n      No bookings yet\n    </h3>\n    <p className=\"mt-2 text-sm text-muted-foreground\">\n      Welcome to YakRooms! You haven't made any hotel bookings yet.\n      <br />\n      Start exploring and book your first stay to see your reservations here.\n    </p>\n    <Button className=\"mt-4\" asChild>\n      <Link to=\"/hotel\">Browse Hotels</Link>\n    </Button>\n    {onRetry && (\n      <div className=\"mt-4\">\n        <Button variant=\"outline\" size=\"sm\" onClick={onRetry}>\n          Refresh\n        </Button>\n      </div>\n    )}\n  </div>\n);\n\n// Error state component\nconst ErrorState = ({ error, onRetry }) => (\n  <div className=\"text-center py-12\">\n    <AlertCircle className=\"mx-auto h-12 w-12 text-red-500\" />\n    <h3 className=\"mt-4 text-lg font-medium text-foreground\">\n      Failed to load bookings\n    </h3>\n    <p className=\"mt-2 text-sm text-muted-foreground\">\n      {error?.message || \"Something went wrong while fetching your bookings.\"}\n    </p>\n    <button\n      onClick={onRetry}\n      className=\"mt-4 bg-primary text-primary-foreground px-4 py-2 rounded-md hover:bg-primary/90 transition-colors\"\n    >\n      <RefreshCw size={16} className=\"inline mr-1\" />\n      Try Again\n    </button>\n  </div>\n);\n\n// Enhanced pagination component with server-side support\nconst Pagination = ({\n  currentPage,\n  totalPages,\n  totalItems,\n  itemsPerPage,\n  onPageChange,\n  loading,\n}) => {\n  if (totalPages <= 1) return null;\n\n  const startItem = (currentPage - 1) * itemsPerPage + 1;\n  const endItem = Math.min(currentPage * itemsPerPage, totalItems);\n\n  // Generate page numbers to show\n  const getPageNumbers = () => {\n    const delta = 2; // Number of pages to show on each side of current page\n    const range = [];\n    const rangeWithDots = [];\n\n    for (\n      let i = Math.max(2, currentPage - delta);\n      i <= Math.min(totalPages - 1, currentPage + delta);\n      i++\n    ) {\n      range.push(i);\n    }\n\n    if (currentPage - delta > 2) {\n      rangeWithDots.push(1, \"...\");\n    } else {\n      rangeWithDots.push(1);\n    }\n\n    rangeWithDots.push(...range);\n\n    if (currentPage + delta < totalPages - 1) {\n      rangeWithDots.push(\"...\", totalPages);\n    } else if (totalPages > 1) {\n      rangeWithDots.push(totalPages);\n    }\n\n    return rangeWithDots;\n  };\n\n  return (\n    <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 mt-8\">\n      <p className=\"text-sm text-muted-foreground\">\n        Showing {startItem} to {endItem} of {totalItems} results\n      </p>\n      <div className=\"flex items-center gap-2\">\n        <button\n          onClick={() => onPageChange(Math.max(1, currentPage - 1))}\n          disabled={currentPage === 1 || loading}\n          className=\"p-2 border rounded-md hover:bg-accent disabled:opacity-50 disabled:cursor-not-allowed transition-colors cursor-pointer\"\n        >\n          <ChevronLeft size={16} />\n        </button>\n\n        {getPageNumbers().map((pageNum, index) =>\n          pageNum === \"...\" ? (\n            <span\n              key={`dots-${index}`}\n              className=\"px-3 py-2 text-sm text-muted-foreground\"\n            >\n              ...\n            </span>\n          ) : (\n            <button\n              key={pageNum}\n              onClick={() => onPageChange(pageNum)}\n              disabled={loading}\n              className={`px-3 py-2 text-sm rounded-md transition-colors cursor-pointer ${\n                currentPage === pageNum\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"border hover:bg-accent disabled:opacity-50 disabled:cursor-not-allowed\"\n              }`}\n            >\n              {pageNum}\n            </button>\n          )\n        )}\n\n        <button\n          onClick={() => onPageChange(Math.min(totalPages, currentPage + 1))}\n          disabled={currentPage >= totalPages || loading}\n          className=\"p-2 border rounded-md hover:bg-accent disabled:opacity-50 disabled:cursor-not-allowed transition-colors cursor-pointer\"\n        >\n          <ChevronRight size={16} />\n        </button>\n      </div>\n    </div>\n  );\n};\n\n// Main dashboard component with server-side pagination\nconst GuestDashboard = () => {\n  const [bookings, setBookings] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedBooking, setSelectedBooking] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isDirectionsModalOpen, setIsDirectionsModalOpen] = useState(false);\n  const [selectedBookingForDirections, setSelectedBookingForDirections] =\n    useState(null);\n  const [isExtendModalOpen, setIsExtendModalOpen] = useState(false);\n  const [selectedBookingForExtend, setSelectedBookingForExtend] = useState(null);\n  const [isCancelDialogOpen, setIsCancelDialogOpen] = useState(false);\n  const [selectedBookingForCancel, setSelectedBookingForCancel] = useState(null);\n  const [isCancelling, setIsCancelling] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [totalItems, setTotalItems] = useState(0);\n  \n  // Notification state\n  const [notifications, setNotifications] = useState([]);\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [loadingNotifications, setLoadingNotifications] = useState(false);\n  const notificationRef = useRef(null);\n  \n  const { userId } = useAuth();\n\n  const itemsPerPage = 5;\n\n  // Fetch bookings from API with pagination\n  const fetchBookings = async (page = 1) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // API call - assuming your endpoint returns array directly\n      const response = await api.get(`/bookings/user/${userId}`, {\n        params: {\n          page: page - 1, // Convert to 0-based indexing for backend\n          size: itemsPerPage, // Sort by creation date descending\n        },\n      });\n\n      const data = response.data;\n\n      // Handle array response (your current format)\n      if (Array.isArray(data)) {\n        setBookings(data);\n        // For now, we'll implement client-side pagination since your API returns array\n        // You can modify this when you implement server-side pagination\n        setTotalPages(Math.ceil(data.length / itemsPerPage));\n        setTotalItems(data.length);\n      } else if (data.content) {\n        // Spring Boot Page format (for future use)\n        setBookings(data.content);\n        setTotalPages(data.totalPages);\n        setTotalItems(data.totalElements);\n      } else {\n        // Custom pagination format\n        setBookings(data.bookings || []);\n        setTotalPages(data.totalPages || 1);\n        setTotalItems(data.totalItems || 0);\n      }\n    } catch (error) {\n      console.error(\"Error fetching bookings:\", error);\n      setError(error);\n      setBookings([]);\n      setTotalPages(0);\n      setTotalItems(0);\n      toast.error(\"Failed to load bookings. Please try again.\", {\n        duration: 6000,\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Initial load\n  useEffect(() => {\n    if (userId) {\n      fetchBookings(currentPage);\n    }\n  }, [userId, currentPage]);\n\n  // Fetch all notifications from backend when component mounts\n  useEffect(() => {\n    const fetchNotifications = async () => {\n      if (!userId) return;\n\n      try {\n        setLoadingNotifications(true);\n        const response = await api.get(`/notifications/user/${userId}`);\n        const fetchedNotifications = response.data;\n\n        // Filter notifications to show BOOKING_CREATED, BOOKING_CANCELLATION_REJECTED, and BOOKING_CANCELLATION_APPROVED types\n        const filteredNotifications = fetchedNotifications.filter(\n          (notif) => notif.type === \"BOOKING_CREATED\" || notif.type === \"BOOKING_CANCELLATION_REJECTED\" || notif.type === \"BOOKING_CANCELLATION_APPROVED\"\n        );\n\n        // Sort notifications by createdAt (newest first) and calculate unread count\n        const sortedNotifications = filteredNotifications.sort(\n          (a, b) => new Date(b.createdAt) - new Date(a.createdAt)\n        );\n\n        const unreadNotifications = sortedNotifications.filter(\n          (notif) => !notif.isRead\n        );\n\n        setNotifications(sortedNotifications);\n        setUnreadCount(unreadNotifications.length);\n\n        console.log(\"[API] Fetched notifications:\", sortedNotifications);\n        console.log(\"[API] Unread count:\", unreadNotifications.length);\n      } catch (error) {\n        console.error(\"[API] Error fetching notifications:\", error);\n      } finally {\n        setLoadingNotifications(false);\n      }\n    };\n\n    fetchNotifications();\n  }, [userId]);\n\n  // Mark all notifications as read via API\n  const markAllNotificationsAsRead = async () => {\n    try {\n      await api.put(`/notifications/user/${userId}/markAllRead`);\n\n      // Update local state\n      setNotifications((prev) =>\n        prev.map((notif) => ({ ...notif, isRead: true }))\n      );\n      setUnreadCount(0);\n\n      console.log(\"[API] Successfully marked all notifications as read\");\n    } catch (error) {\n      console.error(\"[API] Error marking notifications as read:\", error);\n    }\n  };\n\n  // Delete all notifications via API\n  const deleteAllNotifications = async () => {\n    try {\n      await api.delete(`/notifications/user/${userId}`);\n\n      // Update local state\n      setNotifications([]);\n      setUnreadCount(0);\n\n      console.log(\"[API] Successfully deleted all notifications\");\n    } catch (error) {\n      console.error(\"[API] Error deleting notifications:\", error);\n    }\n  };\n\n  // Note: Real-time notifications were previously handled via WebSocket\n  // For now, notifications will need to be fetched manually or via polling\n\n  // Close notification dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (\n        notificationRef.current &&\n        !notificationRef.current.contains(event.target)\n      ) {\n        setShowNotifications(false);\n      }\n    };\n\n    if (showNotifications) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [showNotifications]);\n\n  // Handle notification dropdown click\n  const handleNotificationClick = async () => {\n    setShowNotifications((prev) => !prev);\n\n    // Mark all as read when opening dropdown (only if there are unread notifications)\n    if (!showNotifications && unreadCount > 0) {\n      await markAllNotificationsAsRead();\n    }\n  };\n\n  // Clear all notifications\n  const clearAllNotifications = async () => {\n    await deleteAllNotifications();\n    setShowNotifications(false);\n  };\n\n  // Handle page change\n  const handlePageChange = (newPage) => {\n    if (newPage !== currentPage && newPage >= 1 && newPage <= totalPages) {\n      setCurrentPage(newPage);\n      // fetchBookings will be called automatically by useEffect when currentPage changes\n    }\n  };\n\n  // Retry function\n  const handleRetry = () => {\n    fetchBookings(currentPage);\n  };\n\n  const handleViewDetails = (booking) => {\n    setSelectedBooking(booking);\n    setIsModalOpen(true);\n  };\n\n  const handleCancel = (booking) => {\n    setSelectedBookingForCancel(booking);\n    setIsCancelDialogOpen(true);\n  };\n\n  const handleConfirmCancellation = async () => {\n    if (!selectedBookingForCancel) return;\n\n    console.log(\"Starting cancellation for booking:\", selectedBookingForCancel.id);\n    setIsCancelling(true);\n    try {\n      const response = await api.post(`/bookings/${selectedBookingForCancel.id}/request-cancellation`, null, {\n        params: {\n          userId: userId\n        }\n      });\n      \n      console.log(\"Cancellation response:\", response);\n      \n      // Check if the request was successful (status 200-299)\n      if ((response.status >= 200 && response.status < 300) && (response.data?.success === true || !('success' in response.data))) {\n        toast.success(\"Cancellation Request Submitted\", {\n          description: response.data?.message || \"Your cancellation request has been submitted successfully.\",\n          duration: 6000,\n        });\n        // Optimistically update the local booking status so the card becomes inactive immediately\n        setBookings((prev) =>\n          prev.map((b) =>\n            b.id === selectedBookingForCancel.id\n              ? { ...b, status: \"CANCELLATION_REQUESTED\" }\n              : b\n          )\n        );\n        // Close dialog\n        setIsCancelDialogOpen(false);\n        setSelectedBookingForCancel(null);\n      } else {\n        throw new Error(\"Unexpected response status\");\n      }\n    } catch (error) {\n      console.error(\"Error requesting cancellation:\", error);\n      toast.error(\"Failed to submit cancellation request. Please try again.\", {\n        description: \"There was an error processing your request. Please contact support if the issue persists.\",\n        duration: 6000,\n      });\n    } finally {\n      setIsCancelling(false);\n    }\n  };\n\n  const handleCancelDialogClose = () => {\n    if (!isCancelling) {\n      setIsCancelDialogOpen(false);\n      setSelectedBookingForCancel(null);\n    }\n  };\n\n  const handleContact = (booking) => {\n    // Open contact modal or redirect to contact page\n    toast.info(`Contacting ${booking.hotelName}...`, {\n      duration: 6000,\n    });\n  };\n\n  const handleDirections = (booking) => {\n    setSelectedBookingForDirections(booking);\n    setIsDirectionsModalOpen(true);\n  };\n\n  const handleExtend = (booking) => {\n    setSelectedBookingForExtend(booking);\n    setIsExtendModalOpen(true);\n  };\n\n  const handleExtendSuccess = (updatedBooking) => {\n    // Refresh the bookings list to show updated data\n    fetchBookings(currentPage);\n    setIsExtendModalOpen(false);\n    setSelectedBookingForExtend(null);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"bg-card shadow-sm border-b sticky top-0 z-10\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-6\">\n          <div className=\"flex flex-row sm:items-center justify-between gap-3\">\n            <div>\n              <h1 className=\"text-xl sm:text-2xl font-bold text-foreground\">\n                My Bookings\n              </h1>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              {/* Notification Bell */}\n              <div className=\"relative\" ref={notificationRef}>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"relative\"\n                  onClick={handleNotificationClick}\n                  disabled={loadingNotifications}\n                >\n                  <Bell className=\"h-5 w-5\" />\n                  {unreadCount > 0 && (\n                    <span className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full bg-red-500 text-[10px] text-white flex items-center justify-center font-bold\">\n                      {unreadCount > 99 ? \"99+\" : unreadCount}\n                    </span>\n                  )}\n                </Button>\n\n                {/* Notification Dropdown */}\n                {showNotifications && (\n                  <div className=\"fixed left-4 right-4 top-16 sm:absolute sm:right-0 sm:left-auto sm:top-auto sm:mt-2 w-auto sm:w-80 bg-card border rounded-lg shadow-lg z-50\">\n                    <div className=\"p-3 sm:p-4 border-b\">\n                      <div className=\"flex items-center justify-between\">\n                        <h3 className=\"font-semibold text-foreground text-sm sm:text-base\">\n                          Notifications\n                        </h3>\n                        {notifications.length > 0 && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-xs text-muted-foreground hover:text-foreground h-7 px-2\"\n                            onClick={clearAllNotifications}\n                          >\n                            Clear all\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"max-h-64 sm:max-h-96 overflow-y-auto\">\n                      {loadingNotifications ? (\n                        <div className=\"p-4 sm:p-6 text-center\">\n                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary mx-auto mb-2\"></div>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Loading notifications...\n                          </p>\n                        </div>\n                      ) : notifications.length === 0 ? (\n                        <div className=\"p-4 sm:p-6 text-center\">\n                          <Bell className=\"h-6 w-6 sm:h-8 sm:w-8 text-muted-foreground/30 mx-auto mb-2\" />\n                          <p className=\"text-sm text-muted-foreground\">\n                            No notifications\n                          </p>\n                        </div>\n                      ) : (\n                        <div className=\"divide-y\">\n                          {notifications.map((notification) => (\n                            <div\n                              key={notification.id}\n                              className={`p-3 sm:p-4 transition-colors ${\n                                notification.isRead\n                                  ? \"hover:bg-muted/50\"\n                                  : notification.type === \"BOOKING_CANCELLATION_APPROVED\"\n                                    ? \"bg-green-50/50 dark:bg-green-950/20 hover:bg-green-50 dark:hover:bg-green-950/30\"\n                                    : \"bg-blue-50/50 dark:bg-blue-950/20 hover:bg-blue-50 dark:hover:bg-blue-950/30\"\n                              }`}\n                            >\n                              <div className=\"space-y-2\">\n                                <div className=\"flex items-start gap-2\">\n                                  <div className=\"flex-1 min-w-0\">\n                                    <div className=\"flex items-center gap-2 mb-1\">\n                                      <p className=\"font-medium text-sm flex-1 line-clamp-2\">\n                                        {notification.title}\n                                      </p>\n                                      {!notification.isRead && (\n                                        <div className={`w-2 h-2 rounded-full flex-shrink-0 ${\n                                          notification.type === \"BOOKING_CANCELLATION_APPROVED\" \n                                            ? \"bg-green-500\" \n                                            : \"bg-blue-500\"\n                                        }`}></div>\n                                      )}\n                                    </div>\n                                  </div>\n                                </div>\n                                \n                                {/* Enhanced display for cancellation approved notifications */}\n                                {notification.type === \"BOOKING_CANCELLATION_APPROVED\" ? (\n                                  <div className=\"space-y-3\">\n                                    <div className=\"space-y-1\">\n                                      {notification.hotelName && (\n                                        <p className=\"text-sm text-muted-foreground\">\n                                          <span className=\"font-medium\">Hotel:</span> {notification.hotelName}\n                                        </p>\n                                      )}\n                                      {notification.roomNumber && (\n                                        <p className=\"text-sm text-muted-foreground\">\n                                          <span className=\"font-medium\">Room:</span> {notification.roomNumber}\n                                        </p>\n                                      )}\n                                    </div>\n                                    \n                                    {/* Refund Details Section */}\n                                    <div className=\"bg-white/60 border border-green-300 rounded-lg p-3 space-y-2\">\n                                      <div className=\"flex items-center gap-2 mb-2\">\n                                        <CheckCircle className=\"text-green-600\" size={14} />\n                                        <span className=\"text-xs font-semibold text-green-800\">Refund Information</span>\n                                      </div>\n                                      \n                                      <div className=\"space-y-1\">\n                                        <div className=\"flex items-center justify-between\">\n                                          <span className=\"text-xs font-medium text-green-800\">Refund Amount:</span>\n                                          <span className=\"text-xs font-bold text-green-800\">\n                                            {notification.refundAmount ? formatCurrency(notification.refundAmount) : 'Contact hotel owner'}\n                                          </span>\n                                        </div>\n                                      </div>\n                                    </div>\n                                    \n                                    {/* Contact Hotel Owner */}\n                                    <div className=\"bg-green-100/50 border border-green-300 rounded-md p-2\">\n                                      <div className=\"flex items-start gap-2\">\n                                        <div className=\"w-1 h-1 bg-green-600 rounded-full mt-1.5 flex-shrink-0\"></div>\n                                        <div className=\"text-xs text-green-700\">\n                                          <p className=\"font-medium mb-1\">For refund details, contact the hotel owner directly.</p>\n                                          <p className=\"text-xs text-green-600\">\n                                            The hotel owner will provide specific refund processing information and timeline.\n                                          </p>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </div>\n                                ) : (\n                                  /* Standard notification display for other types */\n                                  <div className=\"space-y-1\">\n                                    {notification.hotelName && (\n                                      <p className=\"text-sm text-muted-foreground\">\n                                        <span className=\"font-medium\">Hotel:</span> {notification.hotelName}\n                                      </p>\n                                    )}\n                                    {notification.roomNumber && (\n                                      <p className=\"text-sm text-muted-foreground\">\n                                        <span className=\"font-medium\">Room:</span> {notification.roomNumber}\n                                      </p>\n                                    )}\n                                  </div>\n                                )}\n                                \n                                <div className=\"flex justify-end\">\n                                  <span className=\"text-xs text-muted-foreground\">\n                                    {notification.displayTime ||\n                                      new Date(\n                                        notification.createdAt\n                                      ).toLocaleString()}\n                                  </span>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                asChild\n                className=\"flex-shrink-0 p-0\"\n              >\n                <Link to=\"/\">Home</Link>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Separator */}\n      <div className=\"block sm:hidden\">\n        <Separator />\n      </div>\n\n\n      {/* Bookings List */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-6\">\n        {loading ? (\n          <div className=\"space-y-4\">\n            {[...Array(itemsPerPage)].map((_, i) => (\n              <BookingCardSkeleton key={i} />\n            ))}\n          </div>\n        ) : error ? (\n          <ErrorState error={error} onRetry={handleRetry} />\n        ) : bookings.length === 0 ? (\n          <EmptyState onRetry={handleRetry} />\n        ) : (\n          <>\n            <div className=\"space-y-4\">\n              {bookings.map((booking, index) => (\n                <div key={booking.id}>\n                  <BookingCard\n                    booking={booking}\n                    onViewDetails={handleViewDetails}\n                    onCancel={handleCancel}\n                    onContact={handleContact}\n                    onDirections={handleDirections}\n                    onExtend={handleExtend}\n                  />\n                  {/* Mobile Separator between cards */}\n                  {index < bookings.length - 1 && (\n                    <div className=\"block sm:hidden mt-4\">\n                      <Separator />\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n\n            {/* Mobile Separator before pagination */}\n            <div className=\"block sm:hidden mt-6\">\n              <Separator />\n            </div>\n\n            <Pagination\n              currentPage={currentPage}\n              totalPages={totalPages}\n              totalItems={totalItems}\n              itemsPerPage={itemsPerPage}\n              onPageChange={handlePageChange}\n              loading={loading}\n            />\n          </>\n        )}\n      </div>\n\n      {/* Booking Details Modal */}\n      <BookingDetailsModal\n        booking={selectedBooking}\n        isOpen={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n      />\n\n      {/* Google Maps Directions Modal */}\n      <GoogleMapsModal\n        booking={selectedBookingForDirections}\n        isOpen={isDirectionsModalOpen}\n        onClose={() => setIsDirectionsModalOpen(false)}\n      />\n\n      {/* Extend Booking Modal */}\n      <ExtendBookingModal\n        booking={selectedBookingForExtend}\n        isOpen={isExtendModalOpen}\n        onClose={() => setIsExtendModalOpen(false)}\n        onExtend={handleExtendSuccess}\n      />\n\n      {/* Cancellation Confirmation Dialog */}\n      <CancellationConfirmationDialog\n        booking={selectedBookingForCancel}\n        isOpen={isCancelDialogOpen}\n        onClose={handleCancelDialogClose}\n        onConfirm={handleConfirmCancellation}\n        isCancelling={isCancelling}\n      />\n    </div>\n  );\n};\n\nexport default GuestDashboard;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/guest/RoomManagement.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/guest/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/AccountDeletionPage.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":17,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[802,809],"text":""},"desc":"Remove unused variable 'userId'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { ArrowLeft, AlertTriangle, CheckCircle, Loader2 } from \"lucide-react\";\nimport { Button } from \"@/shared/components/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/shared/components/card\";\nimport { RadioGroup, RadioGroupItem } from \"@/shared/components/radio-group\";\nimport { Label } from \"@/shared/components/label\";\nimport { Textarea } from \"@/shared/components/textarea\";\nimport { Separator } from \"@/shared/components/separator\";\nimport { useAuth } from \"../authentication\";\nimport api from \"@/shared/services/Api\";\nimport { toast } from \"sonner\";\nimport { YakRoomsText } from \"@/shared/components\";\n\nconst AccountDeletionPage = () => {\n  const navigate = useNavigate();\n  const { userId, hotelId, userName } = useAuth();\n  const [selectedReason, setSelectedReason] = useState(\"\");\n  const [customReason, setCustomReason] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const deletionReasons = [\n    {\n      id: \"no-longer-needed\",\n      label: \"No longer need the service\",\n      description: \"I no longer require hotel management services\"\n    },\n    {\n      id: \"switching-platforms\",\n      label: \"Switching to another platform\",\n      description: \"I'm moving to a different hotel management system\"\n    },\n    {\n      id: \"business-closure\",\n      label: \"Business closure\",\n      description: \"My hotel business is closing down\"\n    },\n    {\n      id: \"privacy-concerns\",\n      label: \"Privacy concerns\",\n      description: \"I have concerns about data privacy and security\"\n    },\n    {\n      id: \"cost-issues\",\n      label: \"Cost-related issues\",\n      description: \"The service is too expensive for my needs\"\n    },\n    {\n      id: \"technical-issues\",\n      label: \"Technical difficulties\",\n      description: \"I'm experiencing persistent technical problems\"\n    },\n    {\n      id: \"poor-support\",\n      label: \"Poor customer support\",\n      description: \"I'm not satisfied with the support provided\"\n    },\n    {\n      id: \"feature-limitations\",\n      label: \"Missing features\",\n      description: \"The platform doesn't have features I need\"\n    },\n    {\n      id: \"other\",\n      label: \"Other reason\",\n      description: \"Please specify your reason below\"\n    }\n  ];\n\n  const handleSubmitDeletionRequest = async () => {\n    if (!selectedReason) {\n      toast.error(\"Please select a reason for account deletion\");\n      return;\n    }\n\n    if (selectedReason === \"other\" && !customReason.trim()) {\n      toast.error(\"Please provide a reason for account deletion\");\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      const deletionData = {\n        hotelId: parseInt(hotelId),\n        deletionReason: selectedReason === \"other\" ? customReason.trim() : deletionReasons.find(r => r.id === selectedReason)?.description || selectedReason\n      };\n\n      // Submit deletion request to admin\n      const response = await api.post(\"/hotels/request-deletion\", deletionData);\n\n      setIsSubmitted(true);\n      \n      toast.success(\"Deletion request submitted successfully\", {\n        description: `Your request has been sent to our admin team. ${response.data.emailSent ? 'Confirmation email sent.' : ''} ${response.data.adminsNotified ? `${response.data.adminsNotified} admins notified.` : ''}`\n      });\n\n      // Redirect to home page after 3 seconds\n      setTimeout(() => {\n        navigate(\"/\");\n      }, 3000);\n\n    } catch (error) {\n      console.error(\"Error submitting deletion request:\", error);\n      toast.error(\"Failed to submit deletion request\", {\n        description: \"Please try again or contact support if the issue persists.\"\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleGoBack = () => {\n    navigate(\"/hotelAdmin\");\n  };\n\n  if (isSubmitted) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"w-16 h-16 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <CheckCircle className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n            </div>\n            <h2 className=\"text-xl font-semibold text-foreground mb-2\">\n              Request Submitted Successfully\n            </h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Your account deletion request has been sent to our admin team. \n              You will be contacted within 24-48 hours regarding the next steps.\n              A confirmation email has been sent to your registered email address.\n            </p>\n            <div className=\"space-y-3\">\n              <p className=\"text-sm text-muted-foreground\">\n                Redirecting to homepage in a few seconds...\n              </p>\n              <Button \n                onClick={() => navigate(\"/\")} \n                variant=\"outline\" \n                className=\"w-full\"\n              >\n                Go to Homepage Now\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card shadow-sm border-b sticky top-0 z-10\">\n        <div className=\"px-4 py-3 lg:px-6 lg:py-4 flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleGoBack}\n              className=\"flex items-center gap-2\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n              Back to Dashboard\n            </Button>\n            <Separator orientation=\"vertical\" className=\"h-6\" />\n            <div>\n              <YakRoomsText size=\"default\" />\n              <p className=\"text-xs text-muted-foreground\">Account Deletion</p>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"container mx-auto px-4 py-8 max-w-2xl\">\n        <div className=\"space-y-6\">\n          {/* Warning Card */}\n          <Card className=\"border-destructive/20 bg-destructive/5\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-8 h-8 bg-destructive/10 rounded-full flex items-center justify-center flex-shrink-0\">\n                  <AlertTriangle className=\"w-5 h-5 text-destructive\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-lg font-semibold text-destructive mb-2\">\n                    Account Deletion Request\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    We're sorry to see you go, {userName}. Before we process your request, \n                    please help us understand why you're leaving. This information helps us \n                    improve our service for other hotel owners.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Reason Selection */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Why are you deleting your account?</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Please select the primary reason for your account deletion request.\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <RadioGroup\n                value={selectedReason}\n                onValueChange={setSelectedReason}\n                className=\"space-y-3\"\n              >\n                {deletionReasons.map((reason) => (\n                  <div key={reason.id} className=\"flex items-start space-x-3\">\n                    <RadioGroupItem \n                      value={reason.id} \n                      id={reason.id}\n                      className=\"mt-1\"\n                    />\n                    <div className=\"flex-1 min-w-0\">\n                      <Label \n                        htmlFor={reason.id}\n                        className=\"text-sm font-medium cursor-pointer\"\n                      >\n                        {reason.label}\n                      </Label>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {reason.description}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </RadioGroup>\n\n              {/* Custom Reason Input */}\n              {selectedReason === \"other\" && (\n                <div className=\"mt-4 space-y-2\">\n                  <Label htmlFor=\"custom-reason\" className=\"text-sm font-medium\">\n                    Please specify your reason\n                  </Label>\n                  <Textarea\n                    id=\"custom-reason\"\n                    placeholder=\"Tell us more about why you're leaving...\"\n                    value={customReason}\n                    onChange={(e) => setCustomReason(e.target.value)}\n                    className=\"min-h-[100px] resize-none\"\n                    maxLength={500}\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    {customReason.length}/500 characters\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Additional Information */}\n          <Card className=\"bg-muted/30\">\n            <CardContent className=\"p-6\">\n              <h4 className=\"font-semibold text-foreground mb-3\">\n                What happens next?\n              </h4>\n              <div className=\"space-y-3 text-sm text-muted-foreground\">\n                <div className=\"flex items-start gap-2\">\n                  <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <p>Your deletion request will be reviewed by our admin team</p>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <p>You'll receive a confirmation email immediately after submission</p>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <p>Our admin team will contact you within 24-48 hours</p>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <p>Your account and all associated data will be permanently deleted</p>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <p>This action cannot be undone once processed</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Action Buttons */}\n          <div className=\"flex flex-col sm:flex-row gap-3 pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={handleGoBack}\n              className=\"flex-1\"\n              disabled={isSubmitting}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleSubmitDeletionRequest}\n              disabled={isSubmitting || !selectedReason || (selectedReason === \"other\" && !customReason.trim())}\n              className=\"flex-1 bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              {isSubmitting ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Submitting Request...\n                </>\n              ) : (\n                \"Submit Deletion Request\"\n              )}\n            </Button>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default AccountDeletionPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/AddListingPage.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'getCategorizedAmenities' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":42,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":54,"suggestions":[{"messageId":"removeVar","data":{"varName":"getCategorizedAmenities"},"fix":{"range":[1207,1232],"text":""},"desc":"Remove unused variable 'getCategorizedAmenities'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Link, Navigate, useNavigate } from \"react-router-dom\";\nimport api from \"../../shared/services/Api\";\nimport { uploadFile } from \"../../shared/services/uploadService\";\nimport { toast } from \"sonner\";\nimport { \n  CheckCircle, \n  Upload, \n  Phone, \n  Mail, \n  MapPin, \n  ArrowRight, \n  ArrowLeft, \n  Check,\n  Hotel,\n  Utensils,\n  FileText,\n  Camera,\n  Shield,\n  Navigation,\n  Loader2,\n  AlertCircle\n} from \"lucide-react\";\n\nimport { Button } from \"@/shared/components/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/shared/components/card\";\nimport { Input } from \"@/shared/components/input\";\nimport { Label } from \"@/shared/components/label\";\nimport { Textarea } from \"@/shared/components/textarea\";\nimport { Badge } from \"@/shared/components/badge\";\nimport { Checkbox } from \"@/shared/components/checkbox\";\nimport { Alert, AlertDescription } from \"@/shared/components/alert\";\nimport { TimePicker } from \"@/shared/components/TimePicker\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/shared/components/select\";\nimport { useAuth } from \"../authentication\";\nimport { getAmenitiesForType, getCategorizedAmenities } from \"../../shared/utils/amenitiesHelper\";\nimport { districts, getLocalitiesForDistrict } from \"../../shared/constants\";\n\nconst AddListingPage = () => {\n  const [step, setStep] = useState(1);\n  const { email, userId, setHotelId, setRoles } = useAuth();\n  const [listingType, setListingType] = useState(\"\");\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    district: \"\",\n    locality: \"\",\n    address: \"\",\n    email: \"\",\n    phone: \"\",\n    price: \"\",\n    amenities: [],\n    photos: [],\n    license: null,\n    idProof: null,\n    notes: \"\",\n    hotelType: \"\",\n    latitude: \"\",\n    longitude: \"\",\n    numberOfRooms: \"\",\n    roomTypesDescription: \"\",\n    cid: \"\",\n    destination: \"\",\n    origin: \"\",\n    checkinTime: \"\",\n    checkoutTime: \"\",\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [errors, setErrors] = useState({});\n  \n  // Geolocation state\n  const [locationState, setLocationState] = useState({\n    isGettingLocation: false,\n    locationError: null,\n    locationSuccess: false\n  });\n  \n  const navigate = useNavigate();\n\n  const listingTypes = [\n    {\n      id: \"hotel\",\n      label: \"Hotel\",\n      icon: Hotel,\n      description: \"Premium hospitality experiences with curated amenities and personalized guest services\"\n    },\n    // {\n    //   id: \"homestay\",\n    //   label: \"Homestay\",\n    //   icon: Home,\n    //   description: \"Authentic family-run accommodation experience\"\n    // },\n    {\n      id: \"restaurant\",\n      label: \"Restaurant\",\n      icon: Utensils,\n      description: \"Full dining establishment with complete menu\",\n      disabled: true\n    },\n    // {\n    //   id: \"cafe\",\n    //   label: \"Café\",\n    //   icon: Coffee,\n    //   description: \"Casual dining spot for coffee, tea, and light meals\"\n    // },\n  ];\n\n  // Get amenities from JSON file based on listing type\n  const currentAmenities = getAmenitiesForType(listingType);\n\n  /**\n   * Handle getting user's current location using Geolocation API\n   */\n  const getCurrentLocation = () => {\n    // Check if geolocation is supported\n    if (!navigator.geolocation) {\n      setLocationState({\n        isGettingLocation: false,\n        locationError: \"Geolocation is not supported by this browser.\",\n        locationSuccess: false\n      });\n      return;\n    }\n\n    // Start loading state\n    setLocationState({\n      isGettingLocation: true,\n      locationError: null,\n      locationSuccess: false\n    });\n\n    // First try with high accuracy but shorter timeout\n    const tryGetLocation = (useHighAccuracy = true, timeout = 15000) => {\n      navigator.geolocation.getCurrentPosition(\n        // Success callback\n        (position) => {\n          const { latitude, longitude, accuracy } = position.coords;\n          \n          console.log(`Location found: ${latitude}, ${longitude} (accuracy: ${accuracy}m)`);\n          \n          // Update form data with coordinates\n          setFormData(prev => ({\n            ...prev,\n            latitude: latitude.toFixed(6), // Limit to 6 decimal places\n            longitude: longitude.toFixed(6)\n          }));\n\n          // Update location state\n          setLocationState({\n            isGettingLocation: false,\n            locationError: null,\n            locationSuccess: true\n          });\n\n          // Clear success message after 3 seconds\n          setTimeout(() => {\n            setLocationState(prev => ({\n              ...prev,\n              locationSuccess: false\n            }));\n          }, 3000);\n        },\n        // Error callback\n        (error) => {\n          console.log(`Geolocation error: ${error.code} - ${error.message}`);\n          \n          // If high accuracy failed due to timeout, try with lower accuracy\n          if (error.code === error.TIMEOUT && useHighAccuracy) {\n            console.log(\"High accuracy timed out, trying with lower accuracy...\");\n            setLocationState(prev => ({\n              ...prev,\n              locationError: \"High accuracy location timed out, trying approximate location...\"\n            }));\n            \n            // Retry with lower accuracy and longer timeout\n            setTimeout(() => tryGetLocation(false, 30000), 1000);\n            return;\n          }\n          \n          let errorMessage = \"Failed to get location.\";\n          \n          switch (error.code) {\n            case error.PERMISSION_DENIED:\n              errorMessage = \"Location access denied. Please enable location permissions in your browser settings and try again.\";\n              break;\n            case error.POSITION_UNAVAILABLE:\n              errorMessage = \"Location information is unavailable. Please check your internet connection and GPS settings.\";\n              break;\n            case error.TIMEOUT:\n              errorMessage = `Location request timed out after ${timeout/1000} seconds. Please ensure you have a stable internet connection and GPS is enabled.`;\n              break;\n            default:\n              errorMessage = `An unknown error occurred while getting location (Code: ${error.code}).`;\n              break;\n          }\n\n          setLocationState({\n            isGettingLocation: false,\n            locationError: errorMessage,\n            locationSuccess: false\n          });\n        },\n        // Options\n        {\n          enableHighAccuracy: useHighAccuracy,\n          timeout: timeout,\n          maximumAge: useHighAccuracy ? 60000 : 600000 // Use fresher cache for high accuracy\n        }\n      );\n    };\n\n    // Start the location request\n    tryGetLocation();\n  };\n\n  /**\n   * Check if coordinates are valid\n   */\n  const areCoordinatesValid = () => {\n    const { latitude, longitude } = formData;\n    return latitude && longitude && !isNaN(latitude) && !isNaN(longitude) && \n           latitude >= -90 && latitude <= 90 && longitude >= -180 && longitude <= 180;\n  };\n\n  const handleFileUpload = (e, field) => {\n    const file = e.target.files[0];\n    if (!file) return;\n\n    // Validate file size (4MB limit per file)\n    const maxFileSize = 4 * 1024 * 1024; // 4MB in bytes\n    if (file.size > maxFileSize) {\n      setErrors((prev) => ({ \n        ...prev, \n        [field]: `File size too large: ${file.name}. File must be smaller than 4MB. Please compress your file and try again.`\n      }));\n      return;\n    }\n\n    setFormData((prev) => ({\n      ...prev,\n      [field]: {\n        file: file,\n        name: file.name,\n        type: file.type,\n        url: URL.createObjectURL(file),\n      },\n    }));\n\n    if (errors[field]) {\n      setErrors((prev) => {\n        const newErrors = { ...prev };\n        delete newErrors[field];\n        return newErrors;\n      });\n    }\n  };\n\n  const handlePhotoUpload = (e) => {\n    const files = Array.from(e.target.files);\n    if (files.length + formData.photos.length > 5) {\n      setErrors((prev) => ({ ...prev, photos: \"Maximum 5 photos allowed\" }));\n      return;\n    }\n\n    // Validate file sizes (4MB limit per file)\n    const maxFileSize = 4 * 1024 * 1024; // 4MB in bytes\n    const oversizedFiles = files.filter(file => file.size > maxFileSize);\n    \n    if (oversizedFiles.length > 0) {\n      const fileNames = oversizedFiles.map(file => file.name).join(', ');\n      setErrors((prev) => ({ \n        ...prev, \n        photos: `File size too large: ${fileNames}. Each image must be smaller than 4MB. Please compress your images and try again.`\n      }));\n      return;\n    }\n\n    const newPhotos = files.map((file) => ({\n      file: file,\n      name: file.name,\n      type: file.type,\n      url: URL.createObjectURL(file),\n    }));\n\n    setFormData((prev) => ({\n      ...prev,\n      photos: [...prev.photos, ...newPhotos],\n    }));\n\n    if (errors.photos) {\n      setErrors((prev) => {\n        const newErrors = { ...prev };\n        delete newErrors.photos;\n        return newErrors;\n      });\n    }\n  };\n\n  const removePhoto = (index) => {\n    setFormData((prev) => ({\n      ...prev,\n      photos: prev.photos.filter((_, i) => i !== index),\n    }));\n  };\n\n\n\n  const stepInfo = [\n    { title: \"Choose Type\", description: \"Select your business type\", icon: Hotel },\n    { title: \"Business Details\", description: \"Tell us about your business\", icon: FileText },\n    { title: \"Verification\", description: \"Upload required documents\", icon: Shield },\n    { title: \"Review & Submit\", description: \"Final review before submission\", icon: Check }\n  ];\n\n  const handleListingTypeChange = (typeId) => {\n    setListingType(typeId);\n    setFormData((prev) => ({\n      ...prev,\n      amenities: [],\n    }));\n    if (errors.listingType) {\n      setErrors((prev) => {\n        const newErrors = { ...prev };\n        delete newErrors.listingType;\n        return newErrors;\n      });\n    }\n  };\n\n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n\n    if (errors[name]) {\n      setErrors((prev) => {\n        const newErrors = { ...prev };\n        delete newErrors[name];\n        return newErrors;\n      });\n    }\n\n    if (type === \"checkbox\") {\n      setFormData((prev) => ({\n        ...prev,\n        amenities: checked\n          ? [...prev.amenities, name]\n          : prev.amenities.filter((item) => item !== name),\n      }));\n    } else {\n      setFormData((prev) => ({\n        ...prev,\n        [name]: value,\n      }));\n    }\n  };\n\n  const handleCoordinateChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n\n    // Clear location messages when manually editing\n    if (locationState.locationError || locationState.locationSuccess) {\n      setLocationState({\n        isGettingLocation: false,\n        locationError: null,\n        locationSuccess: false\n      });\n    }\n  };\n\n  const validateStep = () => {\n    const newErrors = {};\n\n    if (step === 1 && !listingType) {\n      newErrors.listingType = \"Please select a listing type\";\n    }\n\n    if (step === 2) {\n      if (!formData.name) newErrors.name = \"Business name is required\";\n      if (!formData.description)\n        newErrors.description = \"Description is required\";\n      if (!formData.district) newErrors.district = \"District is required\";\n      if (!formData.locality) newErrors.locality = \"Locality/Town is required\";\n      if (!formData.phone) newErrors.phone = \"Phone is required\";\n      if (formData.photos.length === 0)\n        newErrors.photos = \"At least one photo is required\";\n      if (listingType === \"hotel\") {\n        if (!formData.hotelType) newErrors.hotelType = \"Hotel type is required\";\n        if (!formData.checkinTime) newErrors.checkinTime = \"Check-in time is required\";\n        if (!formData.checkoutTime) newErrors.checkoutTime = \"Check-out time is required\";\n      }\n    }\n\n    if (step === 3) {\n      if (!formData.license) newErrors.license = \"Trade license is required\";\n      if (!formData.idProof) newErrors.idProof = \"ID proof is required\";\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const nextStep = () => {\n    if (!validateStep()) return;\n    setStep((prev) => prev + 1);\n  };\n\n  const prevStep = () => setStep((prev) => prev - 1);\n\n  const submitFinalListing = async (e) => {\n    e.preventDefault();\n\n    if (!validateStep()) return;\n\n    setIsSubmitting(true);\n\n    try {\n      const uploadPromises = [];\n\n      if (formData.photos.length > 0) {\n        formData.photos.forEach((photo) => {\n          uploadPromises.push(uploadFile(photo.file, \"photos\"));\n        });\n      }\n\n      if (formData.license?.file) {\n        uploadPromises.push(uploadFile(formData.license.file, \"license\"));\n      }\n\n      if (formData.idProof?.file) {\n        uploadPromises.push(uploadFile(formData.idProof.file, \"idProof\"));\n      }\n\n      const uploadResults = await Promise.all(uploadPromises);\n      const updatedFormData = { ...formData, email: `${email}` };\n\n      uploadResults.forEach((result) => {\n        if (result.field === \"photos\") {\n          if (!updatedFormData.photoUrls) updatedFormData.photoUrls = [];\n          updatedFormData.photoUrls.push(result.url);\n        } else if (result.field === \"license\") {\n          updatedFormData.licenseUrl = result.url;\n        } else if (result.field === \"idProof\") {\n          updatedFormData.idProofUrl = result.url;\n        }\n      });\n\n      console.log(\"User ID: \" + userId);\n      const res = await api.post(`/hotels/${userId}`, updatedFormData);\n\n      if (res.status === 200) {\n        setHotelId(res.data.id);\n        setRoles(['GUEST', 'HOTEL_ADMIN']);\n        toast.success(\"Hotel submitted for verification\", {\n          description: \"Your hotel listing has been submitted successfully and will be verified shortly before going live on YakRooms!\",\n          duration: 6000\n        });\n      }\n\n      setIsSubmitted(true);\n    } catch (error) {\n      console.error(\"Submission failed:\", error);\n      alert(`Submission failed: ${error.message}`);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  useEffect(() => {\n    if (isSubmitted) {\n      const timeout = setTimeout(() => {\n        setIsSubmitted(false);\n        navigate(\"/\");\n      }, 3000);\n\n      return () => clearTimeout(timeout);\n    }\n  }, [isSubmitted, navigate]);\n\n  if (isSubmitted) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n        <Card className=\"max-w-md w-full\">\n          <CardContent className=\"text-center p-8\">\n            <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Check className=\"text-green-600 h-8 w-8\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-foreground mb-2\">\n              Listing Submitted!\n            </h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Your {listingType} listing has been submitted for review. We'll\n              notify you once it's approved.\n            </p>\n            <Button\n              onClick={() => {\n                setIsSubmitted(false);\n                setStep(1);\n                setFormData({\n                  name: \"\",\n                  description: \"\",\n                  district: \"\",\n                  locality: \"\",\n                  address: \"\",\n                  email: \"\",\n                  phone: \"\",\n                  amenities: [],\n                  photos: [],\n                  license: null,\n                  idProof: null,\n                  notes: \"\",\n                  latitude: \"\",\n                  longitude: \"\",\n                  numberOfRooms: \"\",\n                  roomTypesDescription: \"\",\n                  checkinTime: \"\",\n                  checkoutTime: \"\",\n                });\n                setErrors({});\n              }}\n              className=\"w-full\"\n            >\n              Add Another Listing\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background py-8 px-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-left mb-8\">\n          <h1 className=\"text-2xl font-semibold text-foreground mb-2 font-sans\">\n            Add Your Listing\n          </h1>\n          <p className=\"text-muted-foreground text-sm font-sans\">\n            Share your business with travelers in Bhutan\n          </p>\n        </div>\n\n        {/* Progress Indicator */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            {stepInfo.map((info, index) => {\n              const StepIcon = info.icon;\n              const stepNumber = index + 1;\n              const isActive = step === stepNumber;\n              const isCompleted = step > stepNumber;\n              \n              return (\n                <div key={stepNumber} className=\"flex-1 flex flex-col items-center\">\n                  <div className={`\n                    w-8 h-8 lg:w-12 lg:h-12 rounded-full flex items-center justify-center transition-all duration-200 mb-2\n                    ${isCompleted \n                      ? 'bg-primary text-primary-foreground' \n                      : isActive \n                        ? 'bg-primary text-primary-foreground' \n                        : 'bg-muted text-muted-foreground'\n                    }\n                  `}>\n                    {isCompleted ? <Check className=\"h-4 w-4 lg:h-5 lg:w-5\" /> : <StepIcon className=\"h-4 w-4 lg:h-5 lg:w-5\" />}\n                  </div>\n                  <div className=\"text-center\">\n                    <div className={`text-xs lg:text-sm font-medium font-sans ${isActive || isCompleted ? 'text-foreground' : 'text-muted-foreground'}`}>\n                      {info.title}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground hidden sm:block font-sans\">\n                      {info.description}\n                    </div>\n                  </div>\n                  {index < stepInfo.length - 1 && (\n                    <div className={`\n                      hidden md:block absolute w-full h-0.5 top-6 left-1/2 -z-10\n                      ${step > stepNumber ? 'bg-primary' : 'bg-border'}\n                    `} style={{ width: `${100 / stepInfo.length}%` }} />\n                  )}\n                </div>\n              );\n            })}\n          </div>\n          <div className=\"w-full bg-border h-1 rounded-full\">\n            <div \n              className=\"h-full bg-primary rounded-full transition-all duration-300\"\n              style={{ width: `${(step / 4) * 100}%` }}\n            />\n          </div>\n        </div>\n\n        {/* Form Content */}\n        {/* <Card> */}\n          <CardContent className=\"p-0 md:p-8\">\n            {step === 1 && (\n              <div className=\"space-y-6\">\n                <div>\n                  <h2 className=\"text-xl font-semibold text-foreground mb-2 font-sans\">\n                    What type of listing are you adding?\n                  </h2>\n                  <p className=\"text-muted-foreground text-sm font-sans\">\n                    Choose the category that best describes your business\n                  </p>\n                </div>\n                \n                {errors.listingType && (\n                  <div className=\"text-destructive text-sm bg-destructive/10 p-3 rounded-md\">\n                    {errors.listingType}\n                  </div>\n                )}\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {listingTypes.map((type) => {\n                    const IconComponent = type.icon;\n                    const isDisabled = type.disabled;\n                    return (\n                      <Card\n                        key={type.id}\n                        className={`transition-all ${\n                          isDisabled\n                            ? \"opacity-50 cursor-not-allowed bg-muted/50\"\n                            : `cursor-pointer hover:shadow-md ${\n                                listingType === type.id\n                                  ? \"border-primary bg-primary/5\"\n                                  : \"border-border hover:border-primary/50\"\n                              }`\n                        }`}\n                        onClick={() => !isDisabled && handleListingTypeChange(type.id)}\n                      >\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-start gap-4\">\n                            <div className={`\n                              p-3 rounded-lg \n                              ${isDisabled \n                                ? 'bg-muted/50 text-muted-foreground/50'\n                                : listingType === type.id \n                                  ? 'bg-primary text-primary-foreground' \n                                  : 'bg-muted text-muted-foreground'\n                              }\n                            `}>\n                              <IconComponent className=\"h-6 w-6\" />\n                            </div>\n                            <div>\n                              <h3 className={`font-semibold mb-1 ${\n                                isDisabled ? 'text-muted-foreground/50' : 'text-foreground'\n                              }`}>\n                                {type.label}\n                                {isDisabled && (\n                                  <span className=\"ml-2 text-xs font-normal\">\n                                    (Coming Soon)\n                                  </span>\n                                )}\n                              </h3>\n                              <p className={`text-sm ${\n                                isDisabled ? 'text-muted-foreground/50' : 'text-muted-foreground'\n                              }`}>\n                                {type.description}\n                              </p>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n\n            {step === 2 && (\n              <div className=\"space-y-6\">\n                <div>\n                  <h2 className=\"text-xl font-semibold text-foreground mb-2 font-sans\">\n                    Business Information\n                  </h2>\n                  <p className=\"text-muted-foreground text-sm font-sans\">\n                    Provide details about your {listingType}\n                  </p>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">\n                      Business Name <span className=\"text-destructive\">*</span>\n                    </Label>\n                    <Input\n                      id=\"name\"\n                      name=\"name\"\n                      value={formData.name}\n                      onChange={handleChange}\n                      className={errors.name ? \"border-destructive\" : \"\"}\n                    />\n                    {errors.name && (\n                      <p className=\"text-destructive text-sm\">{errors.name}</p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">\n                      Phone Number <span className=\"text-destructive\">*</span>\n                    </Label>\n                    <div className=\"relative\">\n                      <Phone className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        id=\"phone\"\n                        name=\"phone\"\n                        type=\"tel\"\n                        value={formData.phone}\n                        onChange={handleChange}\n                        className={`pl-10 ${errors.phone ? \"border-destructive\" : \"\"}`}\n                      />\n                    </div>\n                    {errors.phone && (\n                      <p className=\"text-destructive text-sm\">{errors.phone}</p>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">\n                    Description <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <Textarea\n                    id=\"description\"\n                    name=\"description\"\n                    value={formData.description}\n                    onChange={handleChange}\n                    rows={4}\n                    className={errors.description ? \"border-destructive\" : \"\"}\n                  />\n                  {errors.description && (\n                    <p className=\"text-destructive text-sm\">{errors.description}</p>\n                  )}\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"district\">\n                      District <span className=\"text-destructive\">*</span>\n                    </Label>\n                    <Select\n                      value={formData.district}\n                      onValueChange={(value) => {\n                        setFormData(prev => ({ \n                          ...prev, \n                          district: value,\n                          locality: \"\" // Clear locality when district changes\n                        }));\n                        if (errors.district) {\n                          setErrors(prev => {\n                            const newErrors = { ...prev };\n                            delete newErrors.district;\n                            return newErrors;\n                          });\n                        }\n                        if (errors.locality) {\n                          setErrors(prev => {\n                            const newErrors = { ...prev };\n                            delete newErrors.locality;\n                            return newErrors;\n                          });\n                        }\n                      }}\n                    >\n                      <SelectTrigger className={errors.district ? \"border-destructive\" : \"\"}>\n                        <SelectValue placeholder=\"Select District\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {districts.map((district) => (\n                          <SelectItem key={district} value={district}>\n                            {district}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    {errors.district && (\n                      <p className=\"text-destructive text-sm\">{errors.district}</p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"locality\">\n                      Town/Locality <span className=\"text-destructive\">*</span>\n                    </Label>\n                    <Select\n                      value={formData.locality}\n                      onValueChange={(value) => {\n                        setFormData(prev => ({ ...prev, locality: value }));\n                        if (errors.locality) {\n                          setErrors(prev => {\n                            const newErrors = { ...prev };\n                            delete newErrors.locality;\n                            return newErrors;\n                          });\n                        }\n                      }}\n                      disabled={!formData.district}\n                    >\n                      <SelectTrigger className={errors.locality ? \"border-destructive\" : \"\"}>\n                        <SelectValue placeholder={formData.district ? \"Select Town/Locality\" : \"Please select your locality\"} />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {formData.district && getLocalitiesForDistrict(formData.district).map((locality) => (\n                          <SelectItem key={locality} value={locality}>\n                            {locality}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    {errors.locality && (\n                      <p className=\"text-destructive text-sm\">{errors.locality}</p>\n                    )}\n                    \n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">Address (Optional)</Label>\n                  <div className=\"relative\">\n                    <MapPin className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"address\"\n                      name=\"address\"\n                      value={formData.address}\n                      onChange={handleChange}\n                      className=\"pl-10\"\n                    />\n                  </div>\n                </div>\n\n                {/* Location Coordinates Section */}\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    \n                    {/* Use Current Location Button */}\n                    <Button\n                      type=\"button\"\n                      onClick={getCurrentLocation}\n                      disabled={locationState.isGettingLocation}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"flex items-center gap-2\"\n                    >\n                      {locationState.isGettingLocation ? (\n                        <>\n                          <Loader2 className=\"h-4 w-4 animate-spin\" />\n                          Getting location...\n                        </>\n                      ) : (\n                        <>\n                          <Navigation className=\"text-sm h-4 w-4\" />\n                          Use Current Location\n                        </>\n                      )}\n                    </Button>\n                  </div>\n\n                  {/* Location Status Messages */}\n                  {locationState.locationError && (\n                    <Alert className=\"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\">\n                      <AlertCircle className=\"h-4 w-4\" />\n                      <AlertDescription>\n                        <div className=\"space-y-2\">\n                          <p>{locationState.locationError}</p>\n                          <div className=\"text-xs text-destructive/80\">\n                            <p><strong>Troubleshooting tips:</strong></p>\n                            <ul className=\"list-disc list-inside space-y-1 mt-1\">\n                              <li>Make sure location/GPS is enabled on your device</li>\n                              <li>Check that your browser has location permissions</li>\n                              <li>Try refreshing the page and allowing location access</li>\n                              <li>If indoors, try moving closer to a window</li>\n                              <li>On mobile, ensure location services are enabled</li>\n                            </ul>\n                          </div>\n                        </div>\n                      </AlertDescription>\n                    </Alert>\n                  )}\n\n                  {locationState.locationSuccess && (\n                    <Alert className=\"border-green-500/50 text-green-700 dark:border-green-500 [&>svg]:text-green-600\">\n                      <CheckCircle className=\"h-4 w-4\" />\n                      <AlertDescription>\n                        Location captured successfully!\n                      </AlertDescription>\n                    </Alert>\n                  )}\n\n                  {/* Coordinate Input Fields */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"latitude\">\n                        Latitude\n                        <span className=\"text-muted-foreground text-xs ml-1\">(Auto-filled)</span>\n                      </Label>\n                      <Input\n                        id=\"latitude\"\n                        name=\"latitude\"\n                        type=\"number\"\n                        step=\"any\"\n                        value={formData.latitude}\n                        onChange={handleCoordinateChange}\n                        placeholder=\"e.g., 27.4728\"\n                        className={formData.latitude ? \"bg-green-50 border-green-200 dark:bg-green-950 dark:border-green-800\" : \"\"}\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"longitude\">\n                        Longitude\n                        <span className=\"text-muted-foreground text-xs ml-1\">(Auto-filled)</span>\n                      </Label>\n                      <Input\n                        id=\"longitude\"\n                        name=\"longitude\"\n                        type=\"number\"\n                        step=\"any\"\n                        value={formData.longitude}\n                        onChange={handleCoordinateChange}\n                        placeholder=\"e.g., 89.6386\"\n                        className={formData.longitude ? \"bg-green-50 border-green-200 dark:bg-green-950 dark:border-green-800\" : \"\"}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Coordinates Display */}\n                  {areCoordinatesValid() && (\n                    <div className=\"bg-primary/10 border border-primary/20 rounded-lg p-3\">\n                      <div className=\"flex items-start gap-2\">\n                        <MapPin className=\"h-4 w-4 text-primary mt-0.5\" />\n                        <div className=\"text-sm\">\n                          <p className=\"text-primary font-medium\">Location Coordinates:</p>\n                          <p className=\"text-muted-foreground\">\n                            {formData.latitude}, {formData.longitude}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {listingType === \"hotel\" && (\n                  <>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"hotelType\">\n                        Hotel Type <span className=\"text-destructive\">*</span>\n                      </Label>\n                      <Select\n                        value={formData.hotelType}\n                        onValueChange={(value) => {\n                          setFormData(prev => ({ ...prev, hotelType: value }));\n                          if (errors.hotelType) {\n                            setErrors(prev => {\n                              const newErrors = { ...prev };\n                              delete newErrors.hotelType;\n                              return newErrors;\n                            });\n                          }\n                        }}\n                      >\n                        <SelectTrigger className={errors.hotelType ? \"border-destructive\" : \"\"}>\n                          <SelectValue placeholder=\"Select Hotel Type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"ONE_STAR\">One Star</SelectItem>\n                          <SelectItem value=\"TWO_STAR\">Two Star</SelectItem>\n                          <SelectItem value=\"THREE_STAR\">Three Star</SelectItem>\n                          <SelectItem value=\"FOUR_STAR\">Four Star</SelectItem>\n                          <SelectItem value=\"FIVE_STAR\">Five Star</SelectItem>\n                          <SelectItem value=\"BUDGET\">Budget</SelectItem>\n                          <SelectItem value=\"BOUTIQUE\">Boutique</SelectItem>\n                          <SelectItem value=\"RESORT\">Resort</SelectItem>\n                          <SelectItem value=\"HOMESTAY\">Homestay</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      {errors.hotelType && (\n                        <p className=\"text-destructive text-sm\">{errors.hotelType}</p>\n                      )}\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"checkinTime\">\n                          Check-in Time <span className=\"text-destructive\">*</span>\n                        </Label>\n                        <TimePicker\n                          id=\"checkinTime\"\n                          name=\"checkinTime\"\n                          value={formData.checkinTime}\n                          onChange={handleChange}\n                          placeholder=\"Select check-in time\"\n                          format24h={false}\n                          error={!!errors.checkinTime}\n                        />\n                        {errors.checkinTime && (\n                          <p className=\"text-destructive text-sm\">{errors.checkinTime}</p>\n                        )}\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"checkoutTime\">\n                          Check-out Time <span className=\"text-destructive\">*</span>\n                        </Label>\n                        <TimePicker\n                          id=\"checkoutTime\"\n                          name=\"checkoutTime\"\n                          value={formData.checkoutTime}\n                          onChange={handleChange}\n                          placeholder=\"Select check-out time\"\n                          format24h={false}\n                          error={!!errors.checkoutTime}\n                        />\n                        {errors.checkoutTime && (\n                          <p className=\"text-destructive text-sm\">{errors.checkoutTime}</p>\n                        )}\n                      </div>\n                    </div>\n                  </>\n                )}\n\n                {currentAmenities.length > 0 && (\n                  <div className=\"space-y-4\">\n                    <Label>Amenities</Label>\n                    <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                      {currentAmenities.map((amenity) => (\n                        <div key={amenity} className=\"flex items-center space-x-2\">\n                          <Checkbox\n                            id={`amenity-${amenity}`}\n                            checked={formData.amenities.includes(amenity)}\n                            onCheckedChange={(checked) => {\n                              if (checked) {\n                                setFormData(prev => ({\n                                  ...prev,\n                                  amenities: [...prev.amenities, amenity]\n                                }));\n                              } else {\n                                setFormData(prev => ({\n                                  ...prev,\n                                  amenities: prev.amenities.filter(item => item !== amenity)\n                                }));\n                              }\n                            }}\n                          />\n                          <Label\n                            htmlFor={`amenity-${amenity}`}\n                            className=\"text-sm font-normal\"\n                          >\n                            {amenity}\n                          </Label>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"space-y-4\">\n                  <Label>\n                    Photos <span className=\"text-destructive\">*</span>\n                  </Label>\n                  \n                  {formData.photos.length > 0 && (\n                    <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 mb-4\">\n                      {formData.photos.map((photo, index) => (\n                        <div key={index} className=\"relative group\">\n                          <img\n                            src={photo.url}\n                            alt={`Preview ${index}`}\n                            className=\"w-full h-24 object-cover rounded-lg border\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            className=\"absolute -top-2 -right-2 h-6 w-6 rounded-full p-0\"\n                            onClick={() => removePhoto(index)}\n                          >\n                            ×\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n\n                  <Card className=\"border-dashed border-2 hover:border-primary/50 transition-colors cursor-pointer\">\n                    <CardContent className=\"p-6\">\n                      <Label \n                        htmlFor=\"photos\" \n                        className=\"flex flex-col items-center justify-center cursor-pointer\"\n                      >\n                        <Camera className=\"h-8 w-8 text-muted-foreground mb-2\" />\n                        <span className=\"text-sm text-muted-foreground text-center\">\n                          Upload photo\n                        </span>\n                        <Input\n                          id=\"photos\"\n                          type=\"file\"\n                          multiple\n                          accept=\"image/*\"\n                          onChange={handlePhotoUpload}\n                          className=\"hidden\"\n                          disabled={formData.photos.length >= 5}\n                        />\n                      </Label>\n                    </CardContent>\n                  </Card>\n                  \n                  {errors.photos && (\n                    <p className=\"text-destructive text-sm\">{errors.photos}</p>\n                  )}\n                  {formData.photos.length >= 5 && (\n                    <p className=\"text-muted-foreground text-xs\">\n                      Maximum 5 photos reached\n                    </p>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {step === 3 && (\n              <div className=\"space-y-6\">\n                <div>\n                  <h2 className=\"text-xl font-semibold text-foreground mb-2 font-sans\">\n                    Verification Documents\n                  </h2>\n                  <p className=\"text-muted-foreground text-sm font-sans\">\n                    Upload required documents for verification. Your listing will be reviewed within 2-3 business days.\n                  </p>\n                </div>\n\n                <div className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <Label>\n                      Trade License <span className=\"text-destructive\">*</span>\n                    </Label>\n                    <Card className=\"border-dashed border-2 hover:border-primary/50 transition-colors cursor-pointer\">\n                      <CardContent className=\"p-6\">\n                        <Label \n                          htmlFor=\"license\" \n                          className=\"flex flex-col items-center justify-center cursor-pointer\"\n                        >\n                          <Upload className=\"h-8 w-8 text-muted-foreground mb-2\" />\n                          <span className=\"text-sm text-muted-foreground text-center\">\n                            {formData.license\n                              ? formData.license.name\n                              : \"Upload trade license (PDF or image)\"}\n                          </span>\n                          <Input\n                            id=\"license\"\n                            type=\"file\"\n                            accept=\".pdf,.jpg,.jpeg,.png\"\n                            onChange={(e) => handleFileUpload(e, \"license\")}\n                            className=\"hidden\"\n                          />\n                        </Label>\n                      </CardContent>\n                    </Card>\n                    {errors.license && (\n                      <p className=\"text-destructive text-sm\">{errors.license}</p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <Label>\n                      ID Proof (Citizen ID or Passport) <span className=\"text-destructive\">*</span>\n                    </Label>\n                    <Card className=\"border-dashed border-2 hover:border-primary/50 transition-colors cursor-pointer\">\n                      <CardContent className=\"p-6\">\n                        <Label \n                          htmlFor=\"idProof\" \n                          className=\"flex flex-col items-center justify-center cursor-pointer\"\n                        >\n                          <Upload className=\"h-8 w-8 text-muted-foreground mb-2\" />\n                          <span className=\"text-sm text-muted-foreground text-center\">\n                            {formData.idProof\n                              ? formData.idProof.name\n                              : \"Upload ID proof (PDF or image)\"}\n                          </span>\n                          <Input\n                            id=\"idProof\"\n                            type=\"file\"\n                            accept=\".pdf,.jpg,.jpeg,.png\"\n                            onChange={(e) => handleFileUpload(e, \"idProof\")}\n                            className=\"hidden\"\n                          />\n                        </Label>\n                      </CardContent>\n                    </Card>\n                    {errors.idProof && (\n                      <p className=\"text-destructive text-sm\">{errors.idProof}</p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"notes\">Additional Notes (Optional)</Label>\n                    <Textarea\n                      id=\"notes\"\n                      name=\"notes\"\n                      value={formData.notes}\n                      onChange={handleChange}\n                      rows={3}\n                      placeholder=\"Any additional information about your business...\"\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {step === 4 && (\n              <div className=\"space-y-6\">\n                <div>\n                  <h2 className=\"text-xl font-semibold text-foreground mb-2 font-sans\">\n                    Review Your Listing\n                  </h2>\n                  <p className=\"text-muted-foreground text-sm font-sans\">\n                    Please review all information before submitting\n                  </p>\n                </div>\n\n                <div className=\"space-y-6\">\n                  {/* Listing Type */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Hotel className=\"h-5 w-5 text-primary\" />\n                        Listing Type\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <Badge variant=\"secondary\" className=\"text-base px-3 py-1\">\n                        {listingType.charAt(0).toUpperCase() + listingType.slice(1)}\n                      </Badge>\n                    </CardContent>\n                  </Card>\n\n                  {/* Business Information */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <FileText className=\"h-5 w-5 text-primary\" />\n                        Business Information\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div className=\"space-y-3\">\n                          <div>\n                            <Label className=\"text-muted-foreground\">Business Name</Label>\n                            <p className=\"font-bold text-sm lg:text-base\">{formData.name}</p>\n                          </div>\n                          <div>\n                            <Label className=\"text-muted-foreground\">Location</Label>\n                            <p className=\"font-bold text-sm lg:text-base\">{formData.locality}, {formData.district}</p>\n                          </div>\n                          {formData.address && (\n                            <div>\n                              <Label className=\"text-muted-foreground\">Address</Label>\n                              <p className=\"font-bold text-sm lg:text-base\">{formData.address}</p>\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"space-y-3\">\n                          <div>\n                            <Label className=\"text-muted-foreground\">Contact</Label>\n                            <p className=\"font-bold text-sm lg:text-base\">{email}</p>\n                            <p className=\"font-bold text-sm lg:text-base\">{formData.phone}</p>\n                          </div>\n                          {formData.hotelType && (\n                            <div>\n                              <Label className=\"text-muted-foreground\">Hotel Type</Label>\n                              <p className=\"font-bold text-sm lg:text-base\">{formData.hotelType.replace(/_/g, \" \")}</p>\n                            </div>\n                          )}\n                          {(formData.checkinTime || formData.checkoutTime) && (\n                            <div>\n                              <Label className=\"text-muted-foreground\">Check-in/Check-out Times</Label>\n                              <div className=\"space-y-1\">\n                                {formData.checkinTime && (\n                                  <p className=\"font-bold text-sm lg:text-base\">\n                                    Check-in: {formData.checkinTime}\n                                  </p>\n                                )}\n                                {formData.checkoutTime && (\n                                  <p className=\"font-bold text-sm lg:text-base\">\n                                    Check-out: {formData.checkoutTime}\n                                  </p>\n                                )}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <Label className=\"text-muted-foreground\">Description</Label>\n                        <p className=\"font-bold text-sm lg:text-base\">{formData.description}</p>\n                      </div>\n\n                      {/* Location Coordinates in Review */}\n                      {areCoordinatesValid() && (\n                        <div>\n                          <Label className=\"text-muted-foreground\">Location Coordinates</Label>\n                          <div className=\"bg-primary/10 border border-primary/20 rounded-lg p-3 mt-2\">\n                            <div className=\"flex items-start gap-2\">\n                              <MapPin className=\"h-4 w-4 text-primary mt-0.5\" />\n                              <div className=\"text-sm\">\n                                <p className=\"text-primary font-medium\">GPS Coordinates:</p>\n                                <p className=\"text-muted-foreground\">\n                                  Latitude: {formData.latitude}\n                                </p>\n                                <p className=\"text-muted-foreground\">\n                                  Longitude: {formData.longitude}\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n\n                      {formData.amenities.length > 0 && (\n                        <div>\n                          <Label className=\"text-muted-foreground\">Amenities</Label>\n                          <div className=\"flex flex-wrap gap-2 mt-2\">\n                            {formData.amenities.map((amenity) => (\n                              <Badge key={amenity} variant=\"outline\">\n                                {amenity}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      {formData.photos.length > 0 && (\n                        <div>\n                          <Label className=\"text-muted-foreground\">Photos ({formData.photos.length})</Label>\n                          <div className=\"grid grid-cols-3 md:grid-cols-5 gap-2 mt-2\">\n                            {formData.photos.map((photo, index) => (\n                              <img\n                                key={index}\n                                src={photo.url}\n                                alt={`Photo ${index + 1}`}\n                                className=\"w-full h-16 object-cover rounded border\"\n                              />\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n\n                  {/* Verification Documents */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Shield className=\"h-5 w-5 text-primary\" />\n                        Verification Documents\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label className=\"text-muted-foreground\">Trade License</Label>\n                          <p className=\"font-bold text-sm lg:text-base\">\n                            {formData.license?.name || \"Not uploaded\"}\n                          </p>\n                        </div>\n                        <div>\n                          <Label className=\"text-muted-foreground\">ID Proof</Label>\n                          <p className=\"font-bold text-sm lg:text-base\">\n                            {formData.idProof?.name || \"Not uploaded\"}\n                          </p>\n                        </div>\n                      </div>\n                      \n                      {formData.notes && (\n                        <div>\n                          <Label className=\"text-muted-foreground\">Additional Notes</Label>\n                          <p className=\"font-bold text-sm lg:text-base\">{formData.notes}</p>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            )}\n          </CardContent>\n\n          {/* Navigation Buttons */}\n          <div className=\"flex justify-between items-center p-6 border-t bg-muted/30\">\n            {step > 1 ? (\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={prevStep}\n                className=\"flex items-center gap-2\"\n              >\n                <ArrowLeft className=\"h-4 w-4\" /> Back\n              </Button>\n            ) : (\n              <Button variant=\"outline\" asChild>\n                <Link to=\"/\">Cancel</Link>\n              </Button>\n            )}\n\n            {step < 4 ? (\n              <Button\n                type=\"button\"\n                onClick={nextStep}\n                disabled={step === 1 && !listingType}\n                className=\"flex items-center gap-2\"\n              >\n                Next <ArrowRight className=\"h-4 w-4\" />\n              </Button>\n            ) : (\n              <Button\n                type=\"submit\"\n                onClick={submitFinalListing}\n                disabled={isSubmitting}\n                className=\"flex items-center gap-2\"\n              >\n                {isSubmitting ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current\" />\n                    Submitting...\n                  </>\n                ) : (\n                  <>\n                    Submit Listing\n                    <Check className=\"h-4 w-4\" />\n                  </>\n                )}\n              </Button>\n            )}\n          </div>\n        {/* </Card> */}\n      </div>\n    </div>\n  );\n};\n\nexport default AddListingPage;","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/AdminBookingForm.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useAuth' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"useAuth"},"fix":{"range":[45,89],"text":""},"desc":"Remove unused variable 'useAuth'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAvailableRooms'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [fetchAvailableRooms, hotelId]","fix":{"range":[1660,1669],"text":"[fetchAvailableRooms, hotelId]"}}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\(.","line":263,"column":46,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":263,"endColumn":47,"suggestions":[{"messageId":"removeEscape","fix":{"range":[9658,9659],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[9658,9658],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\).","line":263,"column":48,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":263,"endColumn":49,"suggestions":[{"messageId":"removeEscape","fix":{"range":[9660,9661],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[9660,9660],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"../authentication\";\nimport api from \"../../shared/services/Api\";\nimport { Button } from \"@/shared/components/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogClose,\n} from \"@/shared/components/dialog\";\nimport { Input } from \"@/shared/components/input\";\nimport { Label } from \"@/shared/components/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/shared/components/select\";\nimport { Separator } from \"@/shared/components/separator\";\nimport { Switch } from \"@/shared/components/switch\";\nimport { Calendar } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { CustomDatePicker } from \"../../shared/components\";\n\nexport default function AdminBookingForm({ hotelId, onBookingSuccess }) {\n  const [openBookingDialog, setOpenBookingDialog] = useState(false);\n  const [availableRooms, setAvailableRooms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [bookedDates, setBookedDates] = useState([]);\n  const [isLoadingBookedDates, setIsLoadingBookedDates] = useState(false);\n  const [selectedRoomForDates, setSelectedRoomForDates] = useState(null);\n  const [bookingDetails, setBookingDetails] = useState({\n    roomNumber: \"\",\n    hotelId: hotelId,\n    checkInDate: \"\",\n    checkOutDate: \"\",\n    guests: 1,\n    phone: \"\",\n    guestName: \"\",\n    cid: \"\",\n    destination: \"\",\n    origin: \"\",\n    isBhutanese: true,\n  });\n  const [errors, setErrors] = useState({});\n\n  useEffect(() => {\n    if (hotelId) {\n      fetchAvailableRooms();\n    }\n  }, [hotelId]);\n\n  const fetchAvailableRooms = async (showErrorToast = true) => {\n    try {\n      setLoading(true);\n      const response = await api.get(`/rooms/available/${hotelId}?page=0&size=50`);\n      setAvailableRooms(response.data.content || []);\n    } catch (error) {\n      console.error(\"Error fetching available rooms:\", error);\n      if (showErrorToast) {\n        toast.error(\"Failed to fetch available rooms\", {\n          duration: 6000\n        });\n      }\n      throw error; // Re-throw to allow caller to handle\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch booked dates for the selected room\n  const fetchBookedDates = async (roomId) => {\n    if (!roomId) return;\n    \n    setIsLoadingBookedDates(true);\n    try {\n      const response = await api.get(`/rooms/${roomId}/booked-dates`);\n      if (response.data && response.data.bookedDates) {\n        setBookedDates(response.data.bookedDates);\n        setSelectedRoomForDates(roomId);\n      }\n    } catch (error) {\n      console.error('Failed to fetch booked dates:', error);\n      toast.error('Failed to load booking calendar', {\n        description: 'Could not fetch booked dates. Some dates may appear available when they are not.',\n        duration: 4000\n      });\n      // Reset to empty array on error to show all dates as available\n      setBookedDates([]);\n    } finally {\n      setIsLoadingBookedDates(false);\n    }\n  };\n\n  // Helper function to check if a date is between two booked dates\n  const isDateBetweenBookedDates = (dateString) => {\n    if (!dateString || bookedDates.length === 0) return false;\n    \n    const selectedDate = new Date(dateString);\n    const selectedDateString = selectedDate.getFullYear() + '-' + \n      String(selectedDate.getMonth() + 1).padStart(2, '0') + '-' + \n      String(selectedDate.getDate()).padStart(2, '0');\n    \n    // Sort booked dates to find consecutive bookings\n    const sortedBookedDates = [...bookedDates].sort();\n    \n    for (let i = 0; i < sortedBookedDates.length; i++) {\n      const currentBookedDate = new Date(sortedBookedDates[i]);\n      const nextDay = new Date(currentBookedDate);\n      nextDay.setDate(nextDay.getDate() + 1);\n      \n      const nextDayString = nextDay.getFullYear() + '-' + \n        String(nextDay.getMonth() + 1).padStart(2, '0') + '-' + \n        String(nextDay.getDate()).padStart(2, '0');\n      \n      // Check if selected date is the day after a booked date\n      if (selectedDateString === nextDayString) {\n        // Check if the day after selected date is also booked\n        const dayAfterSelected = new Date(selectedDate);\n        dayAfterSelected.setDate(dayAfterSelected.getDate() + 1);\n        const dayAfterSelectedString = dayAfterSelected.getFullYear() + '-' + \n          String(dayAfterSelected.getMonth() + 1).padStart(2, '0') + '-' + \n          String(dayAfterSelected.getDate()).padStart(2, '0');\n        \n        if (bookedDates.includes(dayAfterSelectedString)) {\n          return true; // Selected date is between two booked dates\n        }\n      }\n    }\n    \n    return false;\n  };\n\n  const calculateDays = () => {\n    if (!bookingDetails.checkInDate) {\n      return 0;\n    }\n    \n    // If check-in date is between booked dates, it's a single night stay\n    if (isDateBetweenBookedDates(bookingDetails.checkInDate)) {\n      return 1;\n    }\n    \n    if (!bookingDetails.checkOutDate) {\n      return 0;\n    }\n    \n    const checkIn = new Date(bookingDetails.checkInDate);\n    const checkOut = new Date(bookingDetails.checkOutDate);\n    const timeDiff = checkOut.getTime() - checkIn.getTime();\n    const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));\n    return daysDiff > 0 ? daysDiff : 0;\n  };\n\n  // Check if checkout date picker should be hidden\n  const shouldHideCheckoutDate = () => {\n    return bookingDetails.checkInDate && isDateBetweenBookedDates(bookingDetails.checkInDate);\n  };\n\n  const getSelectedRoom = () => {\n    return availableRooms.find(room => room.roomNumber === bookingDetails.roomNumber);\n  };\n\n  const calculateTotalPrice = () => {\n    const days = calculateDays();\n    const selectedRoom = getSelectedRoom();\n    if (!selectedRoom) return 0;\n    return days * selectedRoom.price;\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!bookingDetails.roomNumber) newErrors.roomNumber = \"Room number is required\";\n    // Removed userId validation - now optional for third-party bookings\n    if (!bookingDetails.guestName) newErrors.guestName = \"Guest name is required\";\n    \n    // Validate check-in date\n    if (!bookingDetails.checkInDate) {\n      newErrors.checkInDate = \"Check-in date is required\";\n    } else {\n      const checkInDate = new Date(bookingDetails.checkInDate);\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      if (checkInDate < today) {\n        newErrors.checkInDate = \"Check-in date cannot be in the past\";\n      }\n    }\n    \n    // Validate check-out date (skip if check-in is between booked dates)\n    if (!shouldHideCheckoutDate() && !bookingDetails.checkOutDate) {\n      newErrors.checkOutDate = \"Check-out date is required\";\n    } else if (bookingDetails.checkOutDate) {\n      const checkOutDate = new Date(bookingDetails.checkOutDate);\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      if (checkOutDate <= today) {\n        newErrors.checkOutDate = \"Check-out date must be after today\";\n      } else if (bookingDetails.checkInDate) {\n        const checkInDate = new Date(bookingDetails.checkInDate);\n        if (checkOutDate <= checkInDate) {\n          newErrors.checkOutDate = \"Check-out date must be after check-in date\";\n        }\n      }\n    }\n\n    // Validate CID Number (only required for Bhutanese citizens)\n    if (bookingDetails.isBhutanese) {\n      if (!bookingDetails.cid.trim()) {\n        newErrors.cid = \"CID number is required for Bhutanese citizens\";\n      } else {\n        const cid = bookingDetails.cid.trim();\n        \n        // Rule 1: Must be exactly 11 digits\n        if (!/^\\d{11}$/.test(cid)) {\n          newErrors.cid = \"CID must be exactly 11 digits\";\n        } else {\n          // Rule 2: Dzongkhag code must be 01–20\n          const dzongkhagCode = parseInt(cid.substring(0, 2), 10);\n          if (dzongkhagCode < 1 || dzongkhagCode > 20) {\n            newErrors.cid = \"Invalid Dzongkhag code (must be 01–20)\";\n          }\n          // Additional validation: Check if it's not all zeros or all same digits\n          else if (/^0{11}$/.test(cid)) {\n            newErrors.cid = \"CID number cannot be all zeros\";\n          } else if (/^(\\d)\\1{10}$/.test(cid)) {\n            newErrors.cid = \"CID number cannot be all same digits\";\n          }\n          // CID is valid if it passes all the above checks\n        }\n      }\n    }\n\n    // Validate Destination\n    if (!bookingDetails.destination.trim()) {\n      newErrors.destination = \"Destination is required\";\n    } else if (bookingDetails.destination.length < 2) {\n      newErrors.destination = \"Destination must be at least 2 characters long\";\n    } else if (bookingDetails.destination.length > 50) {\n      newErrors.destination = \"Destination must not exceed 50 characters\";\n    } else if (!/^[a-zA-Z\\s\\-_.,]+$/.test(bookingDetails.destination)) {\n      newErrors.destination = \"Destination can only contain letters, spaces, hyphens, underscores, commas, and periods\";\n    }\n\n    // Validate Origin\n    if (!bookingDetails.origin.trim()) {\n      newErrors.origin = \"Origin is required\";\n    } else if (bookingDetails.origin.length < 2) {\n      newErrors.origin = \"Origin must be at least 2 characters long\";\n    } else if (bookingDetails.origin.length > 50) {\n      newErrors.origin = \"Origin must not exceed 50 characters\";\n    } else if (!/^[a-zA-Z\\s\\-_.,]+$/.test(bookingDetails.origin)) {\n      newErrors.origin = \"Origin can only contain letters, spaces, hyphens, underscores, commas, and periods\";\n    }\n\n    const validateBhutanesePhone = (phone) => {\n      const cleanPhone = phone.replace(/[\\s\\-\\(\\)]/g, \"\");\n      if (!cleanPhone) return \"Phone number is required\";\n      if (!/^\\d+$/.test(cleanPhone)) return \"Phone number should contain only digits\";\n      if (cleanPhone.length !== 8) return \"Phone number must be exactly 8 digits\";\n      const mobilePattern = /^(16|17|77)\\d{6}$/;\n      if (!mobilePattern.test(cleanPhone)) return \"Invalid Bhutanese mobile number. Must start with 16, 17, or 77.\";\n      return null;\n    };\n\n    const phoneError = validateBhutanesePhone(bookingDetails.phone);\n    if (phoneError) newErrors.phone = phoneError;\n    \n    return newErrors;\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setBookingDetails((prev) => ({\n      ...prev,\n      [name]: name === \"guests\" ? parseInt(value) : value,\n    }));\n  };\n\n  // Handle date selection from CustomDatePicker\n  const handleDateSelect = (name, date) => {\n    let dateValue = '';\n    if (date) {\n      // Create a new date normalized to avoid timezone issues\n      const normalizedDate = new Date(date);\n      normalizedDate.setHours(12, 0, 0, 0);\n      // Use toLocaleDateString with specific format to avoid timezone issues\n      const year = normalizedDate.getFullYear();\n      const month = String(normalizedDate.getMonth() + 1).padStart(2, '0');\n      const day = String(normalizedDate.getDate()).padStart(2, '0');\n      dateValue = `${year}-${month}-${day}`;\n    }\n    \n    setBookingDetails((prev) => {\n      const newDetails = {\n        ...prev,\n        [name]: dateValue,\n      };\n      \n      // If selecting check-in date and it's between booked dates, set checkout to next day\n      if (name === \"checkInDate\" && dateValue && isDateBetweenBookedDates(dateValue)) {\n        const checkInDate = new Date(dateValue);\n        const checkOutDate = new Date(checkInDate);\n        checkOutDate.setDate(checkOutDate.getDate() + 1);\n        \n        const checkOutDateString = checkOutDate.getFullYear() + '-' + \n          String(checkOutDate.getMonth() + 1).padStart(2, '0') + '-' + \n          String(checkOutDate.getDate()).padStart(2, '0');\n        \n        newDetails.checkOutDate = checkOutDateString;\n      }\n      \n      return newDetails;\n    });\n    \n    // Clear error for this field\n    if (errors[name]) {\n      setErrors((prev) => ({\n        ...prev,\n        [name]: undefined\n      }));\n    }\n    \n    // Clear checkout date error if check-in is between booked dates\n    if (name === \"checkInDate\" && dateValue && isDateBetweenBookedDates(dateValue)) {\n      setErrors((prev) => ({\n        ...prev,\n        checkOutDate: undefined\n      }));\n    }\n  };\n\n  // Handle room selection change to fetch booked dates\n  const handleRoomSelect = (roomNumber) => {\n    setBookingDetails(prev => ({ ...prev, roomNumber }));\n    \n    // Find the selected room and fetch its booked dates\n    const selectedRoom = availableRooms.find(room => room.roomNumber === roomNumber);\n    if (selectedRoom && selectedRoom.id) {\n      // Only fetch if we haven't already fetched for this room\n      if (selectedRoomForDates !== selectedRoom.id) {\n        fetchBookedDates(selectedRoom.id);\n      }\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const formErrors = validateForm();\n    if (Object.keys(formErrors).length > 0) {\n      setErrors(formErrors);\n      return;\n    }\n\n    try {\n      const selectedRoom = getSelectedRoom();\n      if (!selectedRoom) {\n        toast.error(\"Selected room not found\", {\n          duration: 6000\n        });\n        return;\n      }\n\n      const payload = {\n        ...bookingDetails,\n        roomId: selectedRoom.id,\n        hotelId: hotelId,\n        totalPrice: calculateTotalPrice(),\n        days: calculateDays(),\n        // Set userId to null for all third-party bookings\n        userId: null,\n      };\n      \n      const res = await api.post(\"/bookings\", payload);\n      if (res.status === 200) {\n        toast.success(\"Booking Successful!\", {\n          description: `Room ${bookingDetails.roomNumber} has been booked for ${bookingDetails.guestName}.`,\n          duration: 6000\n        });\n        \n        setBookingDetails({\n          roomNumber: \"\",\n          hotelId: hotelId,\n          checkInDate: \"\",\n          checkOutDate: \"\",\n          guests: 1,\n          phone: \"\",\n          guestName: \"\",\n          cid: \"\",\n          destination: \"\",\n          origin: \"\",\n          isBhutanese: true,\n        });\n        setErrors({});\n        setOpenBookingDialog(false);\n        \n        // Only call onBookingSuccess to refresh data - avoid multiple API calls\n        if (onBookingSuccess) {\n          try {\n            onBookingSuccess();\n          } catch (error) {\n            console.error(\"Error in onBookingSuccess callback:\", error);\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Booking failed:\", error);\n      toast.error(\"Booking Failed\", {\n        description: \"There was an error processing the booking. Please try again.\",\n        duration: 6000\n      });\n    }\n  };\n\n  const days = calculateDays();\n  const totalPrice = calculateTotalPrice();\n  const selectedRoom = getSelectedRoom();\n\n  return (\n    <>\n      <Button \n        onClick={() => setOpenBookingDialog(true)}\n        className=\"w-auto cursor-pointer ml-4 sm:ml-0\"\n        disabled={loading}\n      >\n        <Calendar className=\"mr-2 h-4 w-4\" />\n        {loading ? \"Loading...\" : \"Create New Booking\"}\n      </Button>\n\n      <Dialog \n        open={openBookingDialog} \n        onOpenChange={(open) => {\n          setOpenBookingDialog(open);\n          // Reset all validation errors when dialog closes\n          if (!open) {\n            setErrors({});\n          }\n        }}\n      >\n        <DialogContent className=\"sm:max-w-md max-h-[90vh] overflow-hidden\">\n          <DialogHeader>\n            <DialogTitle>Create New Booking</DialogTitle>\n            <DialogDescription>Book a room for a customer (registered user or walk-in guest)</DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleSubmit}>\n            <div className=\"grid gap-4 py-4 overflow-y-auto max-h-[60vh]\">\n              {/* Loading indicator for booked dates */}\n              {isLoadingBookedDates && (\n                <div className=\"flex items-center gap-2 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                  <svg className=\"w-4 h-4 animate-spin text-blue-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.646 9.646 8 0 0118 15.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                  </svg>\n                  <span className=\"text-sm text-blue-700\">Loading booking calendar...</span>\n                </div>\n              )}\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"roomNumber\">Room Number <span className=\"text-destructive\">*</span></Label>\n                <Select\n                  value={bookingDetails.roomNumber}\n                  onValueChange={handleRoomSelect}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a room\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {availableRooms.length > 0 ? (\n                      availableRooms.map((room) => (\n                        <SelectItem key={room.id} value={room.roomNumber}>\n                          Room {room.roomNumber} - {room.roomType} (Nu. {room.price}/night)\n                        </SelectItem>\n                      ))\n                    ) : (\n                      <div className=\"px-2 py-6 text-center text-sm text-muted-foreground\">\n                        No rooms available\n                      </div>\n                    )}\n                  </SelectContent>\n                </Select>\n                {errors.roomNumber && <p className=\"text-sm text-destructive\">{errors.roomNumber}</p>}\n              </div>\n\n              {/* Date Selection - Moved to top after room selection */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-base font-semibold text-foreground\">Select Booking Dates</h3>\n                \n                <div className=\"grid gap-2\">\n                  <CustomDatePicker\n                    selectedDate={bookingDetails.checkInDate ? new Date(bookingDetails.checkInDate + 'T12:00:00') : null}\n                    onDateSelect={(date) => handleDateSelect(\"checkInDate\", date)}\n                    blockedDates={bookedDates}\n                    minDate={new Date()}\n                    placeholder=\"Select check-in date\"\n                    label=\"Check-in Date *\"\n                    error={errors.checkInDate}\n                    disabled={isLoadingBookedDates}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                {!shouldHideCheckoutDate() && (\n                  <div className=\"grid gap-2\">\n                    <CustomDatePicker\n                      selectedDate={bookingDetails.checkOutDate ? new Date(bookingDetails.checkOutDate + 'T12:00:00') : null}\n                      onDateSelect={(date) => handleDateSelect(\"checkOutDate\", date)}\n                      blockedDates={bookedDates}\n                      minDate={bookingDetails.checkInDate ? new Date(new Date(bookingDetails.checkInDate).getTime() + 24 * 60 * 60 * 1000) : new Date(new Date().getTime() + 24 * 60 * 60 * 1000)}\n                      placeholder=\"Select check-out date\"\n                      label=\"Check-out Date *\"\n                      error={errors.checkOutDate}\n                      disabled={isLoadingBookedDates}\n                      className=\"w-full\"\n                    />\n                  </div>\n                )}\n                \n                {shouldHideCheckoutDate() && (\n                  <div className=\"grid gap-2\">\n                    <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                      <div className=\"flex items-start gap-2\">\n                        <svg className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                        </svg>\n                        <div className=\"text-sm\">\n                          <p className=\"font-medium text-blue-800\">Single Night Stay</p>\n                          <p className=\"text-blue-700 mt-1\">\n                            This date is available for one night only. Checkout date is automatically set to {bookingDetails.checkOutDate ? new Date(bookingDetails.checkOutDate).toLocaleDateString() : 'the next day'}.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <Separator />\n\n              {/* Guest Information */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-base font-semibold text-foreground\">Guest Information</h3>\n                \n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"guestName\">Guest Name <span className=\"text-destructive\">*</span></Label>\n                  <Input\n                    id=\"guestName\"\n                    name=\"guestName\"\n                    type=\"text\"\n                    value={bookingDetails.guestName}\n                    onChange={handleInputChange}\n                    placeholder=\"Enter guest name\"\n                  />\n                  {errors.guestName && <p className=\"text-sm text-destructive\">{errors.guestName}</p>}\n                </div>\n\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"phone\">Phone Number <span className=\"text-destructive\">*</span></Label>\n                  <div className=\"relative\">\n                    <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-sm text-muted-foreground\">+975</span>\n                    <Input\n                      id=\"phone\"\n                      name=\"phone\"\n                      type=\"tel\"\n                      value={bookingDetails.phone}\n                      onChange={handleInputChange}\n                      placeholder=\"17123456\"\n                      className=\"pl-14\"\n                    />\n                  </div>\n                  {errors.phone && <p className=\"text-sm text-destructive\">{errors.phone}</p>}\n                </div>\n\n                {/* Nationality Selection */}\n                <div className=\"grid gap-2\">\n                  <Label className=\"text-sm\">Nationality <span className=\"text-destructive\">*</span></Label>\n                  <div className=\"flex items-center space-x-3\">\n                    <span className=\"text-sm text-muted-foreground\">Bhutanese</span>\n                    <Switch\n                      checked={bookingDetails.isBhutanese}\n                      onCheckedChange={(checked) => {\n                        setBookingDetails((prev) => ({\n                          ...prev,\n                          isBhutanese: checked,\n                          // Clear CID when switching to non-Bhutanese\n                          cid: checked ? prev.cid : \"\"\n                        }));\n                        // Clear CID error when switching nationality\n                        if (errors.cid) {\n                          setErrors((prev) => ({\n                            ...prev,\n                            cid: undefined\n                          }));\n                        }\n                      }}\n                    />\n                  </div>\n                </div>\n\n                {/* CID Number - Only show for Bhutanese */}\n                {bookingDetails.isBhutanese && (\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"cid\" className=\"text-sm\">CID Number <span className=\"text-destructive\">*</span></Label>\n                    <Input\n                      id=\"cid\"\n                      name=\"cid\"\n                      type=\"text\"\n                      value={bookingDetails.cid}\n                      onChange={handleInputChange}\n                      placeholder=\"11 digits (e.g., 10901001065)\"\n                      maxLength={11}\n                      className={`text-sm ${errors.cid ? \"border-destructive\" : \"\"}`}\n                    />\n                    \n                    {errors.cid && (\n                      <p className=\"text-sm text-destructive\">{errors.cid}</p>\n                    )}\n                  </div>\n                )}\n\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"destination\" className=\"text-sm\">Destination <span className=\"text-destructive\">*</span></Label>\n                  <Input\n                    id=\"destination\"\n                    name=\"destination\"\n                    type=\"text\"\n                    value={bookingDetails.destination}\n                    onChange={handleInputChange}\n                    placeholder=\"Enter destination\"\n                    className={`text-sm ${errors.destination ? \"border-destructive\" : \"\"}`}\n                  />\n                  {errors.destination && (\n                    <p className=\"text-sm text-destructive\">{errors.destination}</p>\n                  )}\n                </div>\n\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"origin\" className=\"text-sm\">Origin <span className=\"text-destructive\">*</span></Label>\n                  <Input\n                    id=\"origin\"\n                    name=\"origin\"\n                    type=\"text\"\n                    value={bookingDetails.origin}\n                    onChange={handleInputChange}\n                    placeholder=\"Enter origin\"\n                    className={`text-sm ${errors.origin ? \"border-destructive\" : \"\"}`}\n                  />\n                  {errors.origin && (\n                    <p className=\"text-sm text-destructive\">{errors.origin}</p>\n                  )}\n                </div>\n\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"guests\">Number of Guests</Label>\n                  <Select\n                    name=\"guests\"\n                    value={String(bookingDetails.guests)}\n                    onValueChange={(value) => setBookingDetails(prev => ({ ...prev, guests: parseInt(value) }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select guests\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {[1, 2, 3, 4, 5, 6].map((num) => (\n                        <SelectItem key={num} value={String(num)}>\n                          {num} {num === 1 ? \"guest\" : \"guests\"}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <Separator className=\"my-2\" />\n\n              {selectedRoom && (\n                              <div className=\"space-y-2 text-sm\">\n                {bookingDetails.checkInDate && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Check-in</span>\n                    <span className=\"font-medium\">\n                      {new Date(bookingDetails.checkInDate).toLocaleDateString()}\n                    </span>\n                  </div>\n                )}\n                {bookingDetails.checkOutDate && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Check-out</span>\n                    <span className=\"font-medium\">\n                      {new Date(bookingDetails.checkOutDate).toLocaleDateString()}\n                    </span>\n                  </div>\n                )}\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Room Type</span>\n                  <span className=\"font-medium\">{selectedRoom.roomType}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Price per night</span>\n                  <span className=\"font-medium\">Nu {selectedRoom.price.toFixed(2)}</span>\n                </div>\n                {days > 0 && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">{days} {days === 1 ? \"night\" : \"nights\"}</span>\n                    <span className=\"font-medium\">Nu {totalPrice.toFixed(2)}</span>\n                  </div>\n                )}\n                <Separator className=\"my-2\" />\n                <div className=\"flex justify-between font-bold text-base\">\n                  <span>Total Price</span>\n                  <span>Nu {totalPrice.toFixed(2)}</span>\n                </div>\n                {days === 0 && (bookingDetails.checkInDate || bookingDetails.checkOutDate) && (\n                  <p className=\"text-sm text-amber-600\">\n                    {!bookingDetails.checkInDate && !bookingDetails.checkOutDate \n                      ? \"Please select check-in and check-out dates.\"\n                      : !bookingDetails.checkInDate \n                      ? \"Please select a check-in date.\"\n                      : \"Please select a valid check-out date.\"\n                    }\n                  </p>\n                )}\n              </div>\n              )}\n            </div>\n            <DialogFooter>\n              <DialogClose asChild>\n                <Button type=\"button\" variant=\"outline\">Cancel</Button>\n              </DialogClose>\n              <Button type=\"submit\">Create Booking</Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/BookingTable.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchBookings' and 'searchBookingsByRoom'. Either include them or remove the dependency array.","line":181,"column":6,"nodeType":"ArrayExpression","endLine":181,"endColumn":61,"suggestions":[{"desc":"Update the dependencies array to be: [currentPage, fetchBookings, hotelId, isSearchMode, lastSearchedQuery, searchBookingsByRoom]","fix":{"range":[5092,5147],"text":"[currentPage, fetchBookings, hotelId, isSearchMode, lastSearchedQuery, searchBookingsByRoom]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":249,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":249,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport {\n  ChevronLeft,\n  ChevronRight,\n  User,\n  Phone,\n  Calendar,\n  Users,\n  DollarSign,\n  CheckCircle,\n  LogIn,\n  LogOut,\n  Trash2,\n  MoreHorizontal,\n  XCircle,\n  Info,\n  Search,\n  X,\n  ThumbsUp,\n  ThumbsDown,\n} from \"lucide-react\";\n\nimport api from \"../../shared/services/Api\"; // Your API service for making requests\nimport { useBookingContext } from \"../../features/booking/BookingContext\";\n\n// shadcn/ui components\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/shared/components\";\nimport { Badge } from \"@/shared/components\";\nimport { Button } from \"@/shared/components\";\nimport { Input } from \"@/shared/components\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/shared/components\";\nimport { toast } from \"sonner\"; // For toast notifications\n\n// shadcn/ui AlertDialog components for the confirmation dialog\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/shared/components\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/shared/components\";\n\n// --- DeleteConfirmationDialog Component ---\n// This component provides a generic confirmation dialog\nconst DeleteConfirmationDialog = ({\n  open,\n  onOpenChange,\n  onConfirm,\n  title,\n  description,\n}) => {\n  return (\n    <AlertDialog open={open} onOpenChange={onOpenChange}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>{title}</AlertDialogTitle>\n          <AlertDialogDescription>{description}</AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel>Cancel</AlertDialogCancel>\n          <AlertDialogAction onClick={onConfirm}>Continue</AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n};\n\nconst BookingTable = ({ hotelId }) => {\n  const { socket } = useBookingContext();\n  const [bookings, setBookings] = useState([]);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [deleteDialog, setDeleteDialog] = useState(false); // Controls the delete confirmation dialog visibility\n  const [bookingToDelete, setBookingToDelete] = useState(null); // Stores the ID of the booking to be deleted\n  const [selectedBooking, setSelectedBooking] = useState(null); // Stores the booking to show details\n  \n  // Search functionality state\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isSearchMode, setIsSearchMode] = useState(false);\n  const [searchLoading, setSearchLoading] = useState(false);\n  const [lastSearchedQuery, setLastSearchedQuery] = useState(\"\");\n\n  const pageSize = 10; // Number of bookings per page\n\n  // --- Search Bookings by Room Number ---\n  const searchBookingsByRoom = async (roomNumber, page = 0) => {\n    setSearchLoading(true);\n    setError(null);\n\n    try {\n      const res = await api.get(`/bookings/search/room-number?roomNumber=${roomNumber}&hotelId=${hotelId}&page=${page}&size=${pageSize}`);\n      if (!res.data) {\n        throw new Error(\"Failed to search bookings\");\n      }\n      const data = res.data;\n\n      if (data.content) {\n        setBookings(data.content);\n        setTotalPages(data.totalPages || 1);\n      } else if (Array.isArray(data)) {\n        // Fallback if API returns array directly\n        setBookings(data);\n        setTotalPages(Math.ceil(data.length / pageSize));\n      }\n    } catch (err) {\n      setError(err.message);\n      toast.error(\n        <div className=\"flex items-center gap-2\">\n          <XCircle className=\"h-5 w-5 text-red-500\" />\n          Failed to search bookings. Please try again.\n        </div>,\n        {\n          duration: 6000\n        }\n      );\n    } finally {\n      setSearchLoading(false);\n    }\n  };\n\n  // --- Fetch Bookings Data ---\n  const fetchBookings = async (page) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const res = await api.get(`/bookings/?page=${page}&size=${pageSize}&hotelId=${hotelId}`);\n      if (!res.data) {\n        throw new Error(\"Failed to fetch bookings\");\n      }\n      const data = res.data;\n\n      if (data.content) {\n        setBookings(data.content);\n        setTotalPages(data.totalPages || 1);\n      } else if (Array.isArray(data)) {\n        // Fallback if API returns array directly (e.g., for smaller datasets)\n        setBookings(data);\n        setTotalPages(Math.ceil(data.length / pageSize));\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (hotelId) {\n      if (isSearchMode && lastSearchedQuery) {\n        searchBookingsByRoom(lastSearchedQuery, currentPage);\n      } else if (!isSearchMode) {\n        fetchBookings(currentPage);\n      }\n    }\n  }, [currentPage, hotelId, isSearchMode, lastSearchedQuery]);\n\n  // --- Update Booking Status ---\n  const updateBookingStatus = async (id, newStatus) => {\n    setLoading(true);\n    try {\n      const res = await api.put(`/bookings/${id}/status/${newStatus}`);\n      if (res.status === 200) {\n        // Send WebSocket message to notify about status change\n        if (socket && socket.readyState === WebSocket.OPEN) {\n          socket.send(JSON.stringify({\n            type: 'BOOKING_STATUS_UPDATE',\n            payload: {\n              bookingId: id,\n              newStatus,\n              hotelId,\n              userId: res.data?.userId || null\n            }\n          }));\n        }\n        \n        toast.success(\n          <div className=\"flex items-center gap-2\">\n            <CheckCircle className=\"h-5 w-5 text-green-500\" />\n            Booking status updated successfully to {newStatus.replace(\"_\", \" \")}\n            .\n          </div>,\n          {\n            duration: 6000\n          }\n        );\n      }\n      // Re-fetch to get updated data\n      if (isSearchMode && lastSearchedQuery) {\n        searchBookingsByRoom(lastSearchedQuery, currentPage);\n      } else {\n        fetchBookings(currentPage);\n      }\n    } catch (err) {\n      toast.error(\n        <div className=\"flex items-center gap-2\">\n          <XCircle className=\"h-5 w-5 text-red-500\" />\n          Failed to update booking status. Please try again.\n        </div>,\n        {\n          duration: 6000\n        }\n      );\n      console.error(\"Status update error:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // --- Handle Cancellation Request Actions ---\n  const handleCancellationRequestAction = async (bookingId, action) => {\n    try {\n      const res = await api.put(`/bookings/cancellation-requests/${bookingId}/${action}`);\n      \n      toast.success(\n        <div className=\"flex items-center gap-2\">\n          <CheckCircle className=\"h-5 w-5 text-green-500\" />\n          {res.data?.message || `Cancellation request ${action}d successfully`}\n        </div>,\n        {\n          duration: 6000\n        }\n      );\n    } catch (err) {\n      toast.error(\n        <div className=\"flex items-center gap-2\">\n          <XCircle className=\"h-5 w-5 text-red-500\" />\n          Failed to {action} cancellation request. Please try again.\n        </div>,\n        {\n          duration: 6000\n        }\n      );\n    }\n  };\n\n  // --- Handle Booking Deletion ---\n  // This function is called when the user confirms deletion from the dialog.\n  const handleDeleteBooking = async () => {\n    if (!bookingToDelete) return; // Should not happen if dialog is opened correctly\n\n    setLoading(true);\n    try {\n      await api.delete(`/bookings/${bookingToDelete}`);\n      toast.success(\n        <div className=\"flex items-center gap-2\">\n          <CheckCircle className=\"h-5 w-5 text-green-500\" />\n          Booking {bookingToDelete} has been removed successfully.\n        </div>,\n        {\n          duration: 6000\n        }\n      );\n      // Re-fetch to get updated data\n      if (isSearchMode && lastSearchedQuery) {\n        searchBookingsByRoom(lastSearchedQuery, currentPage);\n      } else {\n        fetchBookings(currentPage);\n      }\n    } catch (err) {\n      toast.error(\n        <div className=\"flex items-center gap-2\">\n          <XCircle className=\"h-5 w-5 text-red-500\" />\n          Failed to delete booking. Please try again.\n        </div>,\n        {\n          duration: 6000\n        }\n      );\n      console.error(\"Delete booking error:\", err);\n    } finally {\n      setLoading(false);\n      setDeleteDialog(false); // Close the dialog\n      setBookingToDelete(null); // Reset the ID\n    }\n  };\n\n  // --- Search Handlers ---\n  const handleSearch = (e) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      setLastSearchedQuery(searchQuery.trim());\n      setIsSearchMode(true);\n      setCurrentPage(0); // Reset to first page when searching\n      // The useEffect will automatically trigger the search due to lastSearchedQuery change\n    }\n  };\n\n  const handleClearSearch = () => {\n    setSearchQuery(\"\");\n    setLastSearchedQuery(\"\");\n    setIsSearchMode(false);\n    setCurrentPage(0);\n  };\n\n  const handleSearchInputChange = (e) => {\n    setSearchQuery(e.target.value);\n    // Only clear search mode if input is completely empty\n    if (!e.target.value.trim()) {\n      setIsSearchMode(false);\n    }\n  };\n\n  // --- Pagination Handlers ---\n  const handlePreviousPage = () => {\n    if (currentPage > 0) {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n\n  const handleNextPage = () => {\n    if (currentPage < totalPages - 1) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  const handlePageClick = (page) => {\n    setCurrentPage(page);\n  };\n\n  // Generate page numbers for pagination controls\n  const getPageNumbers = () => {\n    const pages = [];\n    const maxVisiblePages = 5;\n\n    let startPage = Math.max(0, currentPage - Math.floor(maxVisiblePages / 2));\n    let endPage = Math.min(totalPages - 1, startPage + maxVisiblePages - 1);\n\n    if (endPage - startPage + 1 < maxVisiblePages) {\n      startPage = Math.max(0, endPage - maxVisiblePages + 1);\n    }\n\n    for (let i = startPage; i <= endPage; i++) {\n      pages.push(i);\n    }\n\n    return pages;\n  };\n\n  // --- Status Badge Styling ---\n  const getStatusBadge = (status) => {\n    let colorClass = \"bg-slate-100 text-slate-700 border border-slate-200\";\n    let textClass = \"\";\n    \n    switch (status) {\n      case \"CONFIRMED\":\n        colorClass = \"bg-emerald-50 text-emerald-700 border border-emerald-200\";\n        break;\n      case \"PENDING\":\n        colorClass = \"bg-amber-50 text-amber-700 border border-amber-200\";\n        break;\n      case \"CHECKED_IN\":\n        colorClass = \"bg-blue-50 text-blue-700 border border-blue-200\";\n        break;\n      case \"CHECKED_OUT\":\n        colorClass = \"bg-slate-50 text-slate-600 border border-slate-200\";\n        break;\n      case \"CANCELLED\":\n        colorClass = \"bg-red-50 text-red-700 border border-red-200\";\n        break;\n      case \"APPROVED\":\n        colorClass = \"bg-green-50 text-green-700 border border-green-200\";\n        break;\n      case \"REJECTED\":\n        colorClass = \"bg-red-50 text-red-700 border border-red-200\";\n        break;\n      case \"CANCELLATION_REJECTED\":\n        colorClass = \"bg-orange-50 text-orange-700 border border-orange-200\";\n        textClass = \"line-through\";\n        break;\n      case \"CANCELLATION_APPROVED\":\n        colorClass = \"bg-green-50 text-green-700 border border-green-200\";\n        break;\n      default:\n        colorClass = \"bg-slate-50 text-slate-600 border border-slate-200\";\n    }\n    \n    return (\n      <Badge className={`${colorClass} px-3 py-1 rounded-full text-xs font-medium shadow-sm`}>\n        <span className={textClass}>{status.replace(\"_\", \" \")}</span>\n      </Badge>\n    );\n  };\n\n  if (!hotelId) {\n    return (\n      <div className=\"flex justify-center items-center h-64 text-muted-foreground\">\n        No hotel selected. Please log in as a hotel admin or select a hotel.\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div>\n        {/* --- Search Section --- */}\n        <div className=\"mb-6 p-4 bg-gray-50 rounded-lg border\">\n          <form onSubmit={handleSearch} className=\"flex flex-col sm:flex-row gap-4 items-end\">\n            <div className=\"flex-1 w-full\">\n              <label htmlFor=\"room-search\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Search by Room Number\n              </label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"room-search\"\n                  type=\"text\"\n                  placeholder=\"Enter room number (e.g., 101, 205)\"\n                  value={searchQuery}\n                  onChange={handleSearchInputChange}\n                  className=\"pl-10 pr-10 text-sm\"\n                />\n                {searchQuery && (\n                  <button\n                    type=\"button\"\n                    onClick={handleClearSearch}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </button>\n                )}\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button type=\"submit\" disabled={!searchQuery.trim() || searchLoading}>\n                {searchLoading ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    Searching...\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-2\">\n                    <Search className=\"h-4 w-4\" />\n                    Search\n                  </div>\n                )}\n              </Button>\n             \n            </div>\n          </form>\n          \n          {/* Search Results Info */}\n          {isSearchMode && (\n            <div className=\"mt-3 text-sm text-gray-600\">\n              <span className=\"font-medium\">Search Results:</span> Showing bookings for room number \"{lastSearchedQuery}\"\n              {bookings.length === 0 && !searchLoading && (\n                <span className=\"text-amber-600 ml-2\">(No bookings found for this room)</span>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* --- Error Message Display --- */}\n        {error && (\n          <div\n            className=\"bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4\"\n            role=\"alert\"\n          >\n            <p className=\"font-bold\">Error:</p>\n            <p>{error}</p>\n            <p className=\"text-sm mt-1\">Using mock data for demonstration</p>\n          </div>\n        )}\n\n        {/* --- Bookings Table --- */}\n        <div className=\"overflow-x-auto scrollbar-hide px-4 sm:px-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Guest Info</TableHead>\n                <TableHead>Phone</TableHead>\n                <TableHead>Room</TableHead>\n                <TableHead>Guests</TableHead>\n                <TableHead>Check-in</TableHead>\n                <TableHead>Check-out</TableHead>\n                <TableHead>Total Price</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {bookings.map((booking) => (\n                <TableRow key={booking.id}>\n                  <TableCell>\n                    <div className=\"font-medium\">{booking.guestName} {booking.name}</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {booking.email}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center\">\n                      <Phone className=\"h-4 w-4 mr-1 text-muted-foreground\" />\n                      {booking.phone || \"N/A\"}\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"font-medium\">\n                    {booking.roomNumber}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center\">\n                      <Users className=\"h-4 w-4 mr-1 text-muted-foreground\" />\n                      {booking.guests}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center\">\n                      <Calendar className=\"h-4 w-4 mr-1 text-muted-foreground\" />\n                      {booking.checkInDate}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center\">\n                      <Calendar className=\"h-4 w-4 mr-1 text-muted-foreground\" />\n                      {booking.checkOutDate}\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"font-medium\">\n                    <div className=\"flex items-center\">\n                      Nu.{\" \"}\n                      {new Intl.NumberFormat(\"en-IN\").format(\n                        booking.totalPrice\n                      )}\n                      /-\n                    </div>\n                  </TableCell>\n\n\n\n                  <TableCell>{getStatusBadge(booking.status)}</TableCell>\n                  <TableCell className=\"text-right\">\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                          <span className=\"sr-only\">Open menu</span>\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem\n                          onClick={() => setSelectedBooking(booking)}\n                        >\n                          <Info className=\"h-4 w-4 mr-2\" /> View Details\n                        </DropdownMenuItem>\n                        {booking.status === \"PENDING\" && (\n                          <DropdownMenuItem\n                            onClick={() =>\n                              updateBookingStatus(booking.id, \"CONFIRMED\")\n                            }\n                          >\n                            <CheckCircle className=\"h-4 w-4 mr-2\" /> Confirm\n                          </DropdownMenuItem>\n                        )}\n                        {(booking.status === \"CONFIRMED\" ||\n                          booking.status === \"PENDING\") && (\n                          <DropdownMenuItem\n                            onClick={() =>\n                              updateBookingStatus(booking.id, \"CHECKED_IN\")\n                            }\n                          >\n                            <LogIn className=\"h-4 w-4 mr-2\" /> Check-in\n                          </DropdownMenuItem>\n                        )}\n                        {booking.status === \"CHECKED_IN\" && (\n                          <DropdownMenuItem\n                            onClick={() =>\n                              updateBookingStatus(booking.id, \"CHECKED_OUT\")\n                            }\n                          >\n                            <LogOut className=\"h-4 w-4 mr-2\" /> Check-out\n                          </DropdownMenuItem>\n                        )}\n                        {booking.status === \"CANCELLATION_REQUESTED\" && (\n                          <DropdownMenuItem\n                            onClick={() =>\n                              handleCancellationRequestAction(booking.id, \"approve\")\n                            }\n                          >\n                            <ThumbsUp className=\"h-4 w-4 mr-2\" /> Approve\n                          </DropdownMenuItem>\n                        )}\n                        {booking.status === \"CANCELLATION_REQUESTED\" && (\n                          <DropdownMenuItem\n                            onClick={() =>\n                              handleCancellationRequestAction(booking.id, \"reject\")\n                            }\n                          >\n                            <ThumbsDown className=\"h-4 w-4 mr-2\" /> Reject\n                          </DropdownMenuItem>\n                        )}\n                        <DropdownMenuItem\n                          onClick={() => {\n                            setBookingToDelete(booking.id); // Set the ID to be deleted\n                            setDeleteDialog(true); // Open the confirmation dialog\n                          }}\n                          className=\"text-red-600\" // Highlight delete action\n                        >\n                          <Trash2 className=\"h-4 w-4 mr-2\" /> Delete\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n\n        {/* --- Pagination Controls --- */}\n        <div className=\"flex items-center justify-between px-4 py-3 sm:px-6\">\n          {/* Mobile pagination */}\n          <div className=\"flex-1 flex justify-between sm:hidden\">\n            <Button\n              onClick={handlePreviousPage}\n              disabled={currentPage === 0}\n              variant=\"outline\"\n            >\n              Previous\n            </Button>\n            <Button\n              onClick={handleNextPage}\n              disabled={currentPage === totalPages - 1}\n              variant=\"outline\"\n            >\n              Next\n            </Button>\n          </div>\n          {/* Desktop pagination */}\n          <div className=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">\n                {isSearchMode ? (\n                  <>\n                    Showing search results page{\" \"}\n                    <span className=\"font-medium\">{currentPage + 1}</span> of{\" \"}\n                    <span className=\"font-medium\">{totalPages}</span>\n                    {\" \"}for room \"{lastSearchedQuery}\"\n                  </>\n                ) : (\n                  <>\n                    Showing page{\" \"}\n                    <span className=\"font-medium\">{currentPage + 1}</span> of{\" \"}\n                    <span className=\"font-medium\">{totalPages}</span>\n                  </>\n                )}\n              </p>\n            </div>\n            <div>\n              <nav\n                className=\"flex rounded-md shadow-sm -space-x-px\"\n                aria-label=\"Pagination\"\n              >\n                <Button\n                  onClick={handlePreviousPage}\n                  disabled={currentPage === 0}\n                  variant=\"outline\"\n                  className=\"rounded-l-md rounded-r-none\"\n                >\n                  <ChevronLeft className=\"h-5 w-5\" />\n                </Button>\n\n                {getPageNumbers().map((page) => (\n                  <Button\n                    key={page}\n                    onClick={() => handlePageClick(page)}\n                    variant={page === currentPage ? \"default\" : \"outline\"}\n                    className=\"rounded-none\"\n                  >\n                    {page + 1}\n                  </Button>\n                ))}\n\n                <Button\n                  onClick={handleNextPage}\n                  disabled={currentPage === totalPages - 1}\n                  variant=\"outline\"\n                  className=\"rounded-r-md rounded-l-none\"\n                >\n                  <ChevronRight className=\"h-5 w-5\" />\n                </Button>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* --- Delete Confirmation Dialog --- */}\n      {/* This dialog is controlled by `deleteDialog` state and uses `bookingToDelete` for the actual ID */}\n      <DeleteConfirmationDialog\n        open={deleteDialog}\n        onOpenChange={setDeleteDialog} // Function to close the dialog\n        onConfirm={handleDeleteBooking} // Function to call when confirmed\n        title=\"Confirm Deletion\"\n        description={`Are you sure you want to delete booking ID ${bookingToDelete}? This action cannot be undone.`}\n      />\n\n      {/* --- Booking Details Modal --- */}\n      {selectedBooking && (\n        <Dialog open={!!selectedBooking} onOpenChange={() => setSelectedBooking(null)}>\n          <DialogContent className=\"sm:max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader className=\"pb-6\">\n              <DialogTitle className=\"flex items-center gap-3 text-2xl font-bold text-gray-900\">\n                <Info className=\"h-6 w-6 text-blue-600\" />\n                Booking Details\n              </DialogTitle>\n            </DialogHeader>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 py-2\">\n              {/* Guest Information */}\n              <div className=\"space-y-5\">\n                <h3 className=\"text-xl font-bold text-gray-900 border-b border-gray-200 pb-3\">Guest Information</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">Name:</span>\n                                            <span className=\"text-gray-900 text-sm\">{selectedBooking.guestName || selectedBooking.name || 'Not provided'}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">Email:</span>\n                    <span className=\"text-gray-900 text-sm\">{selectedBooking.email || 'Not provided'}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">Phone:</span>\n                    <span className=\"text-gray-900 text-sm\">+975 {selectedBooking.phone}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">CID:</span>\n                    <span className=\"text-gray-900 text-sm\">{selectedBooking.cid || 'Not provided'}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">Guests:</span>\n                    <span className=\"text-gray-900 text-sm\">{selectedBooking.guests}</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Travel Information */}\n              <div className=\"space-y-5\">\n                <h3 className=\"text-xl font-bold text-gray-900 border-b border-gray-200 pb-3\">Travel Information</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">Origin:</span>\n                    <span className=\"text-gray-900 text-sm\">{selectedBooking.origin || 'Not provided'}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">Destination:</span>\n                    <span className=\"text-gray-900 text-sm\">{selectedBooking.destination || 'Not provided'}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">Hotel:</span>\n                    <span className=\"text-gray-900 text-sm\">{selectedBooking.hotelName || 'Not provided'}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">District:</span>\n                    <span className=\"text-gray-900 text-sm\">{selectedBooking.hotelDistrict || 'Not provided'}</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Booking Details */}\n              <div className=\"space-y-5 md:col-span-2\">\n                <h3 className=\"text-xl font-bold text-gray-900 border-b border-gray-200 pb-3\">Booking Details</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">Room:</span>\n                    <span className=\"text-gray-900 text-sm\">{selectedBooking.roomNumber}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">Check-in:</span>\n                    <span className=\"text-gray-900 text-sm\">{selectedBooking.checkInDate}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">Check-out:</span>\n                    <span className=\"text-gray-900 text-sm\">{selectedBooking.checkOutDate}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">Status:</span>\n                    <div className=\"mt-1\">{getStatusBadge(selectedBooking.status)}</div>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">Total Price:</span>\n                    <span className=\"text-gray-900 font-bold text-sm text-green-600\">\n                      Nu. {new Intl.NumberFormat(\"en-IN\").format(selectedBooking.totalPrice)}/-\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <DialogFooter className=\"pt-6\">\n              <Button variant=\"outline\" onClick={() => setSelectedBooking(null)}>\n                Close\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n};\n\nexport default BookingTable;","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/BookingsInventoryTable.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchBookings', 'getSearchParams', and 'searchTerm'. Either include them or remove the dependency array.","line":109,"column":6,"nodeType":"ArrayExpression","endLine":109,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [hotelId, currentPage, searchTerm, getSearchParams, fetchBookings]","fix":{"range":[3674,3696],"text":"[hotelId, currentPage, searchTerm, getSearchParams, fetchBookings]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Download, Search, Calendar, FileText, Loader2, ChevronLeft, ChevronRight, Filter, X } from \"lucide-react\";\nimport * as XLSX from \"xlsx\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/shared/components/card\";\nimport { Button } from \"@/shared/components/button\";\nimport { Input } from \"@/shared/components/input\";\nimport { Badge } from \"@/shared/components/badge\";\n\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/shared/components/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/shared/components/table\";\nimport api from \"../../shared/services/Api\";\nimport { toast } from \"sonner\";\n\nconst BookingsInventoryTable = ({ hotelId }) => {\n  const [bookings, setBookings] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [searchOption, setSearchOption] = useState(\"all\"); // Updated search options\n  const [currentPage, setCurrentPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(1);\n  const [totalElements, setTotalElements] = useState(0);\n  \n\n\n  const pageSize = 10; // Number of bookings per page\n\n  // Fetch bookings data with pagination and search\n  const fetchBookings = async (page, searchParams = {}) => {\n    if (!hotelId) return;\n\n    try {\n      setLoading(true);\n      let url = \"\";\n      const baseParams = `page=${page}&size=${pageSize}&hotelId=${hotelId}`;\n      \n      // Determine which endpoint to use based on search criteria\n      if (searchParams.searchOption && searchParams.searchTerm) {\n        switch (searchParams.searchOption) {\n          case \"cid\":\n            url = `/bookings/search/cid?cid=${encodeURIComponent(searchParams.searchTerm)}&${baseParams}`;\n            break;\n          case \"phone\":\n            url = `/bookings/search/phone?phone=${encodeURIComponent(searchParams.searchTerm)}&${baseParams}`;\n            break;\n          case \"checkin\":\n            url = `/bookings/search/checkin-date?checkInDate=${encodeURIComponent(searchParams.searchTerm)}&${baseParams}`;\n            break;\n          case \"checkout\":\n            url = `/bookings/search/checkout-date?checkOutDate=${encodeURIComponent(searchParams.searchTerm)}&${baseParams}`;\n            break;\n          default:\n            url = `/bookings/?${baseParams}`;\n        }\n\n      } else {\n        url = `/bookings/?${baseParams}`;\n      }\n\n      const response = await api.get(url);\n      \n      if (response.data && response.data.content) {\n        // Paginated response\n        setBookings(response.data.content);\n        setTotalPages(response.data.totalPages || 1);\n        setTotalElements(response.data.totalElements || 0);\n      } else if (Array.isArray(response.data)) {\n        // Fallback for direct array response\n        setBookings(response.data);\n        setTotalPages(Math.ceil(response.data.length / pageSize));\n        setTotalElements(response.data.length);\n      }\n      \n      console.log(\"Bookings fetched:\", response.data);\n    } catch (error) {\n      console.error(\"Error fetching bookings:\", error);\n      toast.error(\"Failed to fetch bookings data\");\n      setBookings([]);\n      setTotalPages(1);\n      setTotalElements(0);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Initial load and page changes\n  useEffect(() => {\n    // Only pass search params if we're maintaining an active search across page changes\n    const hasActiveSearch = searchTerm;\n    const searchParams = hasActiveSearch ? getSearchParams() : {};\n    fetchBookings(currentPage, searchParams);\n  }, [hotelId, currentPage]);\n\n  // Manual search function\n  const handleSearch = () => {\n    if (searchTerm) {\n      setCurrentPage(0); // Reset to first page when searching\n      const searchParams = getSearchParams();\n      fetchBookings(0, searchParams);\n    } else {\n      // Clear search - fetch all bookings\n      setCurrentPage(0);\n      fetchBookings(0);\n    }\n  };\n\n  // Handle Enter key press in search input\n  const handleSearchKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  // Helper function to get current search parameters\n  const getSearchParams = () => {\n    if (searchTerm && searchOption !== \"all\") {\n      return { searchOption, searchTerm };\n    }\n    return {};\n  };\n\n  // Export to Excel function\n  const exportToExcel = async () => {\n    try {\n      if (totalElements === 0) {\n        toast.warning(\"No data to export\");\n        return;\n      }\n\n      // Show loading toast\n      const loadingToast = toast.loading(\"Preparing Excel export...\");\n\n      // Fetch all bookings for export using current search criteria\n      let allBookings = [];\n      try {\n        const searchParams = getSearchParams();\n        let url = \"\";\n        const baseParams = `page=0&size=${totalElements}&hotelId=${hotelId}`;\n        \n        // Use the same endpoint logic as fetchBookings\n        if (searchParams.searchOption && searchParams.searchTerm) {\n          switch (searchParams.searchOption) {\n            case \"cid\":\n              url = `/bookings/search/cid?cid=${encodeURIComponent(searchParams.searchTerm)}&${baseParams}`;\n              break;\n            case \"phone\":\n              url = `/bookings/search/phone?phone=${encodeURIComponent(searchParams.searchTerm)}&${baseParams}`;\n              break;\n            case \"checkin\":\n              url = `/bookings/search/checkin-date?checkInDate=${encodeURIComponent(searchParams.searchTerm)}&${baseParams}`;\n              break;\n            case \"checkout\":\n              url = `/bookings/search/checkout-date?checkOutDate=${encodeURIComponent(searchParams.searchTerm)}&${baseParams}`;\n              break;\n            default:\n              url = `/bookings/?${baseParams}`;\n          }\n\n        } else {\n          url = `/bookings/?${baseParams}`;\n        }\n\n        const response = await api.get(url);\n        if (response.data && response.data.content) {\n          allBookings = response.data.content;\n        } else if (Array.isArray(response.data)) {\n          allBookings = response.data;\n        }\n      } catch (error) {\n        console.error(\"Error fetching all bookings for export:\", error);\n        // Fallback to current page data\n        allBookings = bookings;\n      }\n\n      let filteredAllBookings = allBookings;\n\n      if (filteredAllBookings.length === 0) {\n        toast.dismiss(loadingToast);\n        toast.warning(\"No data to export with current filters\");\n        return;\n      }\n\n      // Prepare data for Excel\n      const excelData = filteredAllBookings.map((booking) => ({\n        ID: booking.id,\n        \"Guest Name\": booking.name,\n        \"Phone\": booking.phone,\n        \"Email\": booking.email,\n        \"CID\": booking.cid,\n        \"Room Number\": booking.roomNumber,\n        \"Passcode\": booking.passcode,\n        \"Check-In Date\": booking.checkInDate,\n        \"Check-Out Date\": booking.checkOutDate,\n        \"Guests\": booking.guests,\n        \"Status\": booking.status,\n        \"Total Price\": booking.totalPrice,\n        \"Origin\": booking.origin,\n        \"Destination\": booking.destination,\n        \"Hotel Name\": booking.hotelName,\n        \"Hotel District\": booking.hotelDistrict,\n        \"Created At\": new Date(booking.createdAt).toLocaleString(),\n      }));\n\n      // Create workbook and worksheet\n      const workbook = XLSX.utils.book_new();\n      const worksheet = XLSX.utils.json_to_sheet(excelData);\n\n      // Set column widths\n      const columnWidths = [\n        { wch: 8 },  // ID\n        { wch: 20 }, // Guest Name\n        { wch: 15 }, // Phone\n        { wch: 25 }, // Email\n        { wch: 15 }, // CID\n        { wch: 12 }, // Room Number\n        { wch: 10 }, // Passcode\n        { wch: 12 }, // Check-In Date\n        { wch: 12 }, // Check-Out Date\n        { wch: 8 },  // Guests\n        { wch: 12 }, // Status\n        { wch: 12 }, // Total Price\n        { wch: 15 }, // Origin\n        { wch: 15 }, // Destination\n        { wch: 20 }, // Hotel Name\n        { wch: 15 }, // Hotel District\n        { wch: 20 }, // Created At\n      ];\n      worksheet[\"!cols\"] = columnWidths;\n\n      // Add worksheet to workbook\n      XLSX.utils.book_append_sheet(workbook, worksheet, \"Bookings\");\n\n      // Generate filename with current date\n      const fileName = `Hotel_Bookings_${new Date().toISOString().split('T')[0]}.xlsx`;\n\n      // Write and download file\n      XLSX.writeFile(workbook, fileName);\n\n      // Dismiss loading toast and show success\n      toast.dismiss(loadingToast);\n      toast.success(`Exported ${filteredAllBookings.length} bookings to Excel`, {\n        duration: 6000,\n      });\n    } catch (error) {\n      console.error(\"Error exporting to Excel:\", error);\n      toast.error(\"Failed to export data to Excel\");\n    }\n  };\n\n  // Get status badge variant\n  const getStatusBadgeVariant = (status) => {\n    switch (status?.toUpperCase()) {\n      case \"CONFIRMED\":\n        return \"default\";\n      case \"CHECKED_IN\":\n        return \"secondary\";\n      case \"CANCELLED\":\n        return \"destructive\";\n      case \"COMPLETED\":\n        return \"outline\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  // Format currency\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"BTN\", // Bhutanese Ngultrum\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2,\n    }).format(amount);\n  };\n\n  // Format date\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n\n\n  // Pagination handlers\n  const handlePreviousPage = () => {\n    if (currentPage > 0) {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n\n  const handleNextPage = () => {\n    if (currentPage < totalPages - 1) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  const handlePageClick = (page) => {\n    setCurrentPage(page);\n  };\n\n  // Generate page numbers for pagination controls\n  const getPageNumbers = () => {\n    const pages = [];\n    const maxVisiblePages = 5;\n\n    let startPage = Math.max(0, currentPage - Math.floor(maxVisiblePages / 2));\n    let endPage = Math.min(totalPages - 1, startPage + maxVisiblePages - 1);\n\n    if (endPage - startPage + 1 < maxVisiblePages) {\n      startPage = Math.max(0, endPage - maxVisiblePages + 1);\n    }\n\n    for (let i = startPage; i <= endPage; i++) {\n      pages.push(i);\n    }\n\n    return pages;\n  };\n\n  // Get search placeholder text based on selected option\n  const getSearchPlaceholder = () => {\n    switch (searchOption) {\n      case \"cid\":\n        return \"Enter CID number...\";\n      case \"phone\":\n        return \"Enter phone number...\";\n      case \"checkin\":\n        return \"Enter check-in date (YYYY-MM-DD)...\";\n      case \"checkout\":\n        return \"Enter check-out date (YYYY-MM-DD)...\";\n      default:\n        return \"Select search criteria...\";\n    }\n  };\n\n  // Clear search function\n  const clearSearch = () => {\n    setSearchTerm(\"\");\n    setSearchOption(\"all\");\n    // Immediately fetch all bookings when clearing\n    setCurrentPage(0);\n    fetchBookings(0);\n  };\n\n\n\n  if (loading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-4 w-4 text-primary\" />\n            Bookings Inventory\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-center py-12\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n            <span className=\"ml-2 text-muted-foreground\">Loading bookings...</span>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      {/* <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-lg\">\n          <FileText className=\"h-4 w-4 text-primary\" />\n          Bookings Inventory\n        </CardTitle>\n      </CardHeader> */}\n      <CardContent className=\"space-y-4\">\n        {/* Controls Section */}\n        <div className=\"flex flex-col md:flex-row gap-4 items-start md:items-center justify-between\">\n          <div className=\"flex flex-col sm:flex-row gap-3 flex-1\">\n            {/* Search Options and Input */}\n            <div className=\"flex flex-col sm:flex-row gap-2 flex-1\">\n              {/* Search Option Selector */}\n              <Select value={searchOption} onValueChange={setSearchOption}>\n                <SelectTrigger className=\"min-w-[160px]\">\n                  <SelectValue placeholder=\"Search by...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Bookings</SelectItem>\n                  <SelectItem value=\"cid\">Search by CID</SelectItem>\n                  <SelectItem value=\"phone\">Search by Phone</SelectItem>\n                  <SelectItem value=\"checkin\">Search by Check-in Date</SelectItem>\n                  <SelectItem value=\"checkout\">Search by Check-out Date</SelectItem>\n                </SelectContent>\n              </Select>\n\n              {/* Conditional Search Input */}\n              {searchOption !== \"all\" ? (\n                <div className=\"flex gap-2 flex-1\">\n                  <div className=\"relative flex-1\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      placeholder={getSearchPlaceholder()}\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      onKeyPress={handleSearchKeyPress}\n                      className=\"pl-10 w-full\"\n                    />\n                  </div>\n                  <Button\n                    onClick={handleSearch}\n                    disabled={!searchTerm.trim()}\n                    className=\"px-4\"\n                  >\n                    <Search className=\"h-4 w-4 mr-1\" />\n                    Search\n                  </Button>\n                </div>\n              ) : null}\n\n              {/* Clear Search Button */}\n              {searchTerm && (\n                <Button\n                  onClick={clearSearch}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"px-3\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {/* Export Button */}\n          <Button\n            onClick={exportToExcel}\n            disabled={totalElements === 0}\n            className=\"bg-primary hover:bg-primary/90\"\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export Excel\n            {/* ({totalElements} total) */}\n          </Button>\n        </div>\n\n        {/* Summary Stats */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-muted/50 rounded-lg\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-primary\">{totalElements}</div>\n            <div className=\"text-sm text-muted-foreground\">Total Bookings</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-primary\">\n              {bookings.filter((b) => b.status === \"CONFIRMED\").length}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Confirmed</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-primary\">\n              {bookings.filter((b) => b.status === \"CHECKED_IN\").length}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Checked In</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-yellow-500\">\n              {formatCurrency(\n                bookings.reduce((sum, booking) => sum + (booking.totalPrice || 0), 0)\n              )}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Revenue</div>\n          </div>\n        </div>\n\n        {/* Bookings Table */}\n        {bookings.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Calendar className=\"h-12 w-12 text-muted-foreground/30 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-foreground mb-2\">\n              {bookings.length === 0 ? \"No Bookings Found\" : \"No Matching Bookings\"}\n            </h3>\n            <p className=\"text-sm text-muted-foreground max-w-sm mx-auto\">\n              {bookings.length === 0\n                ? \"There are no bookings for this hotel yet.\"\n                : \"Try adjusting your search criteria or filters.\"}\n            </p>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto rounded-lg border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  {/* <TableHead className=\"w-16\">Sl.No. </TableHead> */}\n                  <TableHead className=\"w-32 font-bold\">CID</TableHead>\n                  <TableHead className=\"min-w-40 font-bold\">Guest Details</TableHead>\n                  <TableHead className=\"min-w-32 font-bold\">Room Info</TableHead>\n                  <TableHead className=\"min-w-40 font-bold\">Stay Period</TableHead>\n                  <TableHead className=\"w-24 font-bold\">Guests</TableHead>\n                  <TableHead className=\"w-28 font-bold\">Status</TableHead>\n                  <TableHead className=\"w-32 font-bold\">Price</TableHead>\n                  <TableHead className=\"min-w-40 font-bold\">Travel Info</TableHead>\n                  <TableHead className=\"min-w-32 font-bold\">Booked on</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {bookings.map((booking) => (\n                  <TableRow key={booking.id} className=\"hover:bg-muted/50\">\n                    {/* <TableCell className=\"font-medium\">{booking.id}</TableCell> */}\n                    {/* CID */}\n                    <TableCell className=\"font-medium text-sm\">\n                      {booking.cid || (\n                        <span className=\"text-muted-foreground text-xs\">N/A</span>\n                      )}\n                    </TableCell>\n                    {/* Guest Details */}\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <div className=\"font-medium text-sm\">{booking.name} {booking.guestName}</div>\n                        <div className=\"text-xs text-muted-foreground\">{booking.email}</div>\n                        <div className=\"text-xs text-muted-foreground\">{booking.phone}</div>\n                      </div>\n                    </TableCell>\n                    {/* Room Info */}\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <div className=\"font-medium text-sm\">Room {booking.roomNumber}</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          Code: {booking.passcode}\n                        </div>\n                      </div>\n                    </TableCell>\n\n                    {/* Stay Period */}\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <div className=\"text-sm\">\n                          <div className=\"text-xs text-muted-foreground\">Check-in</div>\n                          <div>{formatDate(booking.checkInDate)}</div>\n                        </div>\n                        <div className=\"text-sm\">\n                          <div className=\"text-xs text-muted-foreground\">Check-out</div>\n                          <div>{formatDate(booking.checkOutDate)}</div>\n                        </div>\n                      </div>\n                    </TableCell>\n\n                    {/* Guests */}\n                    <TableCell className=\"text-center font-medium\">\n                      {booking.guests}\n                    </TableCell>\n\n                    {/* Status */}\n                    <TableCell>\n                      <Badge variant={getStatusBadgeVariant(booking.status)}>\n                        {booking.status}\n                      </Badge>\n                    </TableCell>\n\n                    {/* Price */}\n                    <TableCell className=\"font-medium text-black\">\n                      {formatCurrency(booking.totalPrice)}\n                    </TableCell>\n\n                    {/* Travel Info */}\n                    <TableCell>\n                      {booking.origin || booking.destination ? (\n                        <div className=\"space-y-1 text-sm\">\n                          {booking.origin && (\n                            <div>\n                              <span className=\"text-xs text-muted-foreground\">From:</span>{\" \"}\n                              {booking.origin}\n                            </div>\n                          )}\n                          {booking.destination && (\n                            <div>\n                              <span className=\"text-xs text-muted-foreground\">To:</span>{\" \"}\n                              {booking.destination}\n                            </div>\n                          )}\n                        </div>\n                      ) : (\n                        <span className=\"text-muted-foreground text-sm\">-</span>\n                      )}\n                    </TableCell>\n\n                    {/* Created */}\n                    <TableCell className=\"text-sm\">\n                      {formatDate(booking.createdAt)}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        )}\n\n        {/* Results Summary */}\n        {bookings.length > 0 && (\n          <div className=\"text-sm text-muted-foreground text-center\">\n            Showing {bookings.length} of {totalElements} bookings\n            {searchTerm && \" (filtered)\"}\n          </div>\n        )}\n\n        {/* Pagination Controls */}\n        {totalPages > 1 && (\n          <div className=\"flex items-center justify-between px-4 py-3 bg-background border-t\">\n            {/* Mobile pagination */}\n            <div className=\"flex-1 flex justify-between sm:hidden\">\n              <Button\n                onClick={handlePreviousPage}\n                disabled={currentPage === 0}\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                <ChevronLeft className=\"h-4 w-4 mr-1\" />\n                Previous\n              </Button>\n              <Button\n                onClick={handleNextPage}\n                disabled={currentPage === totalPages - 1}\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                Next\n                <ChevronRight className=\"h-4 w-4 ml-1\" />\n              </Button>\n            </div>\n\n            {/* Desktop pagination */}\n            <div className=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">\n                  Showing page{\" \"}\n                  <span className=\"font-medium\">{currentPage + 1}</span> of{\" \"}\n                  <span className=\"font-medium\">{totalPages}</span>\n                  {\" \"}({totalElements} total bookings)\n                </p>\n              </div>\n              <div>\n                <nav\n                  className=\"relative z-0 inline-flex rounded-md shadow-sm -space-x-px\"\n                  aria-label=\"Pagination\"\n                >\n                  <Button\n                    onClick={handlePreviousPage}\n                    disabled={currentPage === 0}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"rounded-l-md rounded-r-none\"\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </Button>\n\n                  {getPageNumbers().map((page) => (\n                    <Button\n                      key={page}\n                      onClick={() => handlePageClick(page)}\n                      variant={page === currentPage ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      className=\"rounded-none\"\n                    >\n                      {page + 1}\n                    </Button>\n                  ))}\n\n                  <Button\n                    onClick={handleNextPage}\n                    disabled={currentPage === totalPages - 1}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"rounded-r-md rounded-l-none\"\n                  >\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </nav>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default BookingsInventoryTable;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/BookingsTrendChart.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchBookingsData'. Either include it or remove the dependency array.","line":179,"column":6,"nodeType":"ArrayExpression","endLine":179,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [selectedDate, hotelId, fetchBookingsData]","fix":{"range":[4996,5019],"text":"[selectedDate, hotelId, fetchBookingsData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  Legend,\n} from \"recharts\";\nimport {\n  Calendar,\n  TrendingUp,\n  BarChart3,\n  LineChart as LineChartIcon,\n  Download,\n} from \"lucide-react\";\nimport * as XLSX from 'xlsx';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/shared/components/card\";\nimport api from \"../../shared/services/Api\";\nimport { useAuth } from \"@/features/authentication\";\nimport YakRoomsLoader from \"@/shared/components/YakRoomsLoader\";\n\nconst BookingsTrendChart = () => {\n  const { hotelId } = useAuth();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [chartType, setChartType] = useState(\"bar\"); // 'bar' or 'line'\n  const [selectedDate, setSelectedDate] = useState(\"2025-01-01\");\n\n  // Format month for display\n  const formatMonthLabel = (monthString) => {\n    const date = new Date(monthString + \"-01\");\n    return date.toLocaleDateString(\"en-US\", {\n      month: \"short\",\n      year: \"2-digit\",\n    });\n  };\n\n  // Export data to Excel\n  const exportToExcel = () => {\n    if (!data || data.length === 0) {\n      alert(\"No data available to export\");\n      return;\n    }\n\n    try {\n      // Prepare data for Excel export\n      const exportData = data.map((item, index) => ({\n        'Month': item.monthLabel,\n        'Month-Year': item.month,\n        'Total Bookings': item.bookings,\n        'Rank': index + 1\n      }));\n\n      // Add summary statistics\n      const totalBookings = data.reduce((sum, item) => sum + item.bookings, 0);\n      const averageBookings = Math.round(totalBookings / data.length);\n      const peakBookings = Math.max(...data.map((item) => item.bookings));\n      const peakMonth = data.find(item => item.bookings === peakBookings)?.monthLabel || 'N/A';\n\n      // Add empty row and summary\n      exportData.push({});\n      exportData.push({\n        'Month': 'SUMMARY STATISTICS',\n        'Month-Year': '',\n        'Total Bookings': '',\n        'Rank': ''\n      });\n      exportData.push({\n        'Month': 'Total Bookings (12 months)',\n        'Month-Year': '',\n        'Total Bookings': totalBookings,\n        'Rank': ''\n      });\n      exportData.push({\n        'Month': 'Average per Month',\n        'Month-Year': '',\n        'Total Bookings': averageBookings,\n        'Rank': ''\n      });\n      exportData.push({\n        'Month': 'Peak Month',\n        'Month-Year': peakMonth,\n        'Total Bookings': peakBookings,\n        'Rank': ''\n      });\n\n      // Create workbook and worksheet\n      const wb = XLSX.utils.book_new();\n      const ws = XLSX.utils.json_to_sheet(exportData);\n\n      // Set column widths for better formatting\n      const colWidths = [\n        { wch: 15 }, // Month\n        { wch: 12 }, // Month-Year\n        { wch: 15 }, // Total Bookings\n        { wch: 8 }   // Rank\n      ];\n      ws['!cols'] = colWidths;\n\n      // Add worksheet to workbook\n      XLSX.utils.book_append_sheet(wb, ws, \"Booking Trends\");\n\n      // Generate filename with current date\n      const currentDate = new Date().toISOString().split('T')[0];\n      const filename = `booking-trends-report-${currentDate}.xlsx`;\n\n      // Save the file\n      XLSX.writeFile(wb, filename);\n\n      console.log(`Excel file exported successfully: ${filename}`);\n    } catch (error) {\n      console.error(\"Error exporting to Excel:\", error);\n      alert(\"Failed to export data. Please try again.\");\n    }\n  };\n\n  // Fetch data from API\n  const fetchBookingsData = async () => {\n    if (!hotelId) {\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const res = await api.get(\n        `/booking-statistics/monthly/hotel/${hotelId}?startDate=${selectedDate}`\n      );\n\n      console.log(\"Fetching from:\", res.config.url);\n\n      const result = res.data;\n\n      // Validate response structure\n      if (!Array.isArray(result)) {\n        throw new Error(\n          \"Invalid API response: Expected an array of booking data\"\n        );\n      }\n\n      // Process the data to add formatted month labels\n      const processedData = result\n        .map((item) => {\n          if (!item.monthYear || typeof item.bookingCount !== \"number\") {\n            console.warn(\"Invalid data item:\", item);\n            return null;\n          }\n          return {\n            month: item.monthYear,\n            bookings: item.bookingCount,\n            monthLabel: formatMonthLabel(item.monthYear),\n          };\n        })\n        .filter(Boolean);\n\n      if (processedData.length === 0) {\n        throw new Error(\"No valid booking data received from API\");\n      }\n\n      setData(processedData);\n      setLoading(false);\n    } catch (err) {\n      console.error(\"Error fetching bookings data:\", err);\n      setError(err.message);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchBookingsData();\n  }, [selectedDate, hotelId]);\n\n  // Custom tooltip component\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white p-3 border border-gray-200 rounded-lg shadow-lg\">\n          <p className=\"font-medium text-gray-900\">{label}</p>\n          {payload.map((entry, index) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              {entry.name}:{\" \"}\n              <span className=\"font-semibold\">{entry.value} bookings</span>\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  // Loading skeleton\n  if (loading) {\n    return (\n      <Card className=\"w-full\">\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"text-xl font-semibold text-gray-900 flex items-center gap-2\">\n            <TrendingUp className=\"h-5 w-5 text-blue-600\" />\n            Monthly Booking Trends\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"flex items-center justify-center h-96\">\n            <div className=\"text-center\">\n              <YakRoomsLoader \n                size={112} \n                showTagline={false} \n                loadingText=\"\"\n                className=\"mb-4\"\n              />\n              <p className=\"text-gray-600\">Loading booking data...</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Error state\n  if (error) {\n    return (\n      <Card className=\"w-full\">\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"text-xl font-semibold text-gray-900 flex items-center gap-2\">\n            <TrendingUp className=\"h-5 w-5 text-blue-600\" />\n            Monthly Booking Trends\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-red-600 mb-4\">\n              Error loading booking data: {error}\n            </p>\n            <button\n              onClick={fetchBookingsData}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n            >\n              Retry\n            </button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"pb-4\">\n        <CardTitle className=\"text-xl font-semibold text-gray-900 flex items-center gap-2\">\n          <TrendingUp className=\"h-5 w-5 text-blue-600\" />\n          Monthly Booking Trends\n        </CardTitle>\n        <p className=\"text-sm text-gray-500 mt-1\">\n          Track monthly booking patterns and trends\n        </p>\n\n        {/* Controls */}\n        <div className=\"flex flex-wrap items-center justify-between gap-4 mt-4\">\n          <div className=\"flex flex-wrap items-center gap-4\">\n            {/* Chart Type Toggle */}\n            <div className=\"flex items-center gap-2\">\n              <button\n                className={`px-3 py-2 text-sm rounded-md transition-colors ${\n                  chartType === \"bar\"\n                    ? \"bg-blue-600 text-white\"\n                    : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\n                }`}\n                onClick={() => setChartType(\"bar\")}\n              >\n                <BarChart3 className=\"h-4 w-4 inline mr-1\" />\n                Bar\n              </button>\n              <button\n                className={`px-3 py-2 text-sm rounded-md transition-colors ${\n                  chartType === \"line\"\n                    ? \"bg-blue-600 text-white\"\n                    : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\n                }`}\n                onClick={() => setChartType(\"line\")}\n              >\n                <LineChartIcon className=\"h-4 w-4 inline mr-1\" />\n                Line\n              </button>\n            </div>\n\n            {/* Date Picker */}\n            <div className=\"flex items-center gap-2\">\n              <Calendar className=\"h-4 w-4 text-gray-500\" />\n              <input\n                type=\"date\"\n                value={selectedDate}\n                onChange={(e) => setSelectedDate(e.target.value)}\n                min=\"2025-01-01\"\n                className=\"px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm\"\n              />\n            </div>\n          </div>\n\n          {/* Export Button */}\n          <button\n            onClick={exportToExcel}\n            disabled={!data || data.length === 0}\n            className={`flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-md transition-colors ${\n              data && data.length > 0\n                ? \"bg-gray-100 hover:bg-gray-200 text-gray-700 border border-gray-300\"\n                : \"bg-gray-300 text-gray-500 cursor-not-allowed\"\n            }`}\n            title={data && data.length > 0 ? \"Export data to Excel\" : \"No data available to export\"}\n          >\n            <Download className=\"h-4 w-4\" />\n            Export Excel\n          </button>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"p-0\">\n        <div className=\"w-full h-80 md:h-96 lg:h-[500px]\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            {chartType === \"bar\" ? (\n              <BarChart\n                data={data}\n                margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                <XAxis\n                  dataKey=\"monthLabel\"\n                  tick={{ fontSize: 14, fontWeight: 500 }}\n                  tickLine={{ stroke: \"#e0e0e0\" }}\n                  axisLine={{ stroke: \"#e0e0e0\", strokeWidth: 1 }}\n                />\n                <YAxis\n                  tick={{ fontSize: 14, fontWeight: 500 }}\n                  tickLine={{ stroke: \"#e0e0e0\" }}\n                  axisLine={{ stroke: \"#e0e0e0\", strokeWidth: 1 }}\n                />\n                <Tooltip content={<CustomTooltip />} />\n                <Legend />\n                <Bar\n                  dataKey=\"bookings\"\n                  name=\"This Year\"\n                  fill=\"#3b82f6\"\n                  radius={[1, 1, 0, 0]}\n                />\n              </BarChart>\n            ) : (\n              <LineChart\n                data={data}\n                margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                <XAxis\n                  dataKey=\"monthLabel\"\n                  tick={{ fontSize: 14, fontWeight: 500 }}\n                  tickLine={{ stroke: \"#e0e0e0\" }}\n                  axisLine={{ stroke: \"#e0e0e0\", strokeWidth: 1 }}\n                />\n                <YAxis\n                  tick={{ fontSize: 14, fontWeight: 500 }}\n                  tickLine={{ stroke: \"#e0e0e0\" }}\n                  axisLine={{ stroke: \"#e0e0e0\", strokeWidth: 1 }}\n                />\n                <Tooltip content={<CustomTooltip />} />\n                <Legend />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"bookings\"\n                  name=\"This Year\"\n                  stroke=\"#3b82f6\"\n                  strokeWidth={3}\n                  dot={{ fill: \"#3b82f6\", strokeWidth: 2, r: 4 }}\n                  activeDot={{ r: 6, stroke: \"#3b82f6\", strokeWidth: 2 }}\n                />\n              </LineChart>\n            )}\n          </ResponsiveContainer>\n        </div>\n\n        {/* Summary Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6 pt-6 border-t\">\n          <div className=\"text-center\">\n            <p className=\"text-xl md:text-2xl font-bold text-blue-600\">\n              {data.reduce((sum, item) => sum + item.bookings, 0)}\n            </p>\n            <p className=\"text-xs md:text-sm text-gray-600\">\n              Total Bookings (12 months)\n            </p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-xl md:text-2xl font-bold text-green-600\">\n              {data.length > 0\n                ? Math.round(\n                    data.reduce((sum, item) => sum + item.bookings, 0) /\n                      data.length\n                  )\n                : 0}\n            </p>\n            <p className=\"text-xs md:text-sm text-gray-600\">\n              Average per Month\n            </p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-xl md:text-2xl font-bold text-purple-600\">\n              {data.length > 0\n                ? Math.max(...data.map((item) => item.bookings))\n                : 0}\n            </p>\n            <p className=\"text-xs md:text-sm text-gray-600\">Peak Month</p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default BookingsTrendChart;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/CancellationRequestsTable.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'page' is defined but never used.","line":111,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":111,"endColumn":48,"suggestions":[{"messageId":"removeVar","data":{"varName":"page"},"fix":{"range":[3109,3113],"text":""},"desc":"Remove unused variable 'page'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchCancellationRequests'. Either include it or remove the dependency array.","line":138,"column":6,"nodeType":"ArrayExpression","endLine":138,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [currentPage, fetchCancellationRequests, hotelId]","fix":{"range":[3846,3868],"text":"[currentPage, fetchCancellationRequests, hotelId]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport {\n  ChevronLeft,\n  ChevronRight,\n  User,\n  Phone,\n  Calendar,\n  CheckCircle,\n  XCircle,\n  MoreHorizontal,\n  Info,\n  AlertTriangle,\n} from \"lucide-react\";\n\nimport api from \"../../shared/services/Api\";\nimport { useBookingContext } from \"../booking/BookingContext\";\n\n// shadcn/ui components\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/shared/components\";\nimport { Badge } from \"@/shared/components\";\nimport { Button } from \"@/shared/components\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/shared/components\";\nimport { toast } from \"sonner\";\n\n// shadcn/ui AlertDialog components for the confirmation dialog\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/shared/components\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/shared/components\";\n\n// --- ConfirmationDialog Component ---\nconst ConfirmationDialog = ({\n  open,\n  onOpenChange,\n  onConfirm,\n  title,\n  description,\n  confirmText = \"Confirm\",\n  cancelText = \"Cancel\",\n  variant = \"default\", // \"default\" or \"destructive\"\n}) => {\n  return (\n    <AlertDialog open={open} onOpenChange={onOpenChange}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle className=\"flex items-center gap-2\">\n            {variant === \"destructive\" ? (\n              <AlertTriangle className=\"h-5 w-5 text-destructive\" />\n            ) : (\n              <CheckCircle className=\"h-5 w-5 text-primary\" />\n            )}\n            {title}\n          </AlertDialogTitle>\n          <AlertDialogDescription>{description}</AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel>{cancelText}</AlertDialogCancel>\n          <AlertDialogAction\n            onClick={onConfirm}\n            className={variant === \"destructive\" ? \"bg-destructive text-destructive-foreground hover:bg-destructive/90\" : \"\"}\n          >\n            {confirmText}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n};\n\nconst CancellationRequestsTable = ({ hotelId }) => {\n  const { socket } = useBookingContext();\n  const [cancellationRequests, setCancellationRequests] = useState([]);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedRequest, setSelectedRequest] = useState(null);\n  const [actionDialog, setActionDialog] = useState(false);\n  const [actionType, setActionType] = useState(null); // \"approve\" or \"reject\"\n  const [requestToAction, setRequestToAction] = useState(null);\n\n  const pageSize = 10; // Number of requests per page\n\n  // --- Fetch Cancellation Requests Data ---\n  const fetchCancellationRequests = async (page) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const res = await api.get(`/bookings/cancellation-requests/hotel/${hotelId}`);\n      if (!res.data) {\n        throw new Error(\"Failed to fetch cancellation requests\");\n      }\n      const data = res.data;\n\n      if (Array.isArray(data)) {\n        setCancellationRequests(data);\n        setTotalPages(Math.ceil(data.length / pageSize));\n      } else {\n        throw new Error(\"Invalid data format received\");\n      }\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error fetching cancellation requests:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (hotelId) fetchCancellationRequests(currentPage);\n  }, [currentPage, hotelId]);\n\n  // --- Handle Cancellation Request Actions ---\n  const handleCancellationAction = async (requestId, action) => {\n    setLoading(true);\n    try {\n      let res;\n      \n      if (action === \"approve\") {\n        // Use the same API pattern as BookingTable for canceling the booking\n        res = await api.put(`/bookings/${requestId}/status/CANCELLED`);\n        \n        // Send WebSocket message to notify about status change (same as BookingTable)\n        if (socket && socket.readyState === WebSocket.OPEN) {\n          socket.send(JSON.stringify({\n            type: 'BOOKING_STATUS_UPDATE',\n            payload: {\n              bookingId: requestId,\n              newStatus: 'CANCELLED',\n              hotelId,\n              userId: res.data?.userId || null\n            }\n          }));\n        }\n        \n        toast.success(\n          <div className=\"flex items-center gap-2\">\n            <CheckCircle className=\"h-5 w-5 text-green-500\" />\n            Cancellation request approved and booking cancelled successfully.\n          </div>,\n          {\n            duration: 6000\n          }\n        );\n      } else {\n        // For reject action, use the original endpoint\n        res = await api.put(`/bookings/cancellation-requests/${requestId}/reject`);\n        \n        toast.success(\n          <div className=\"flex items-center gap-2\">\n            <CheckCircle className=\"h-5 w-5 text-green-500\" />\n            Cancellation request rejected successfully.\n          </div>,\n          {\n            duration: 6000\n          }\n        );\n      }\n      \n      fetchCancellationRequests(currentPage); // Re-fetch to get updated data\n    } catch (err) {\n      toast.error(\n        <div className=\"flex items-center gap-2\">\n          <XCircle className=\"h-5 w-5 text-red-500\" />\n          Failed to {action} cancellation request. Please try again.\n        </div>,\n        {\n          duration: 6000\n        }\n      );\n      console.error(\"Cancellation action error:\", err);\n    } finally {\n      setLoading(false);\n      setActionDialog(false);\n      setRequestToAction(null);\n      setActionType(null);\n    }\n  };\n\n  // --- Pagination Handlers ---\n  const handlePreviousPage = () => {\n    if (currentPage > 0) {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n\n  const handleNextPage = () => {\n    if (currentPage < totalPages - 1) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  const handlePageClick = (page) => {\n    setCurrentPage(page);\n  };\n\n  // Generate page numbers for pagination controls\n  const getPageNumbers = () => {\n    const pages = [];\n    const maxVisiblePages = 5;\n\n    let startPage = Math.max(0, currentPage - Math.floor(maxVisiblePages / 2));\n    let endPage = Math.min(totalPages - 1, startPage + maxVisiblePages - 1);\n\n    if (endPage - startPage + 1 < maxVisiblePages) {\n      startPage = Math.max(0, endPage - maxVisiblePages + 1);\n    }\n\n    for (let i = startPage; i <= endPage; i++) {\n      pages.push(i);\n    }\n\n    return pages;\n  };\n\n  // --- Status Badge Styling ---\n  const getStatusBadge = (status) => {\n    let colorClass = \"bg-slate-100 text-slate-700 border border-slate-200\";\n    let icon = null;\n    let textClass = \"\";\n    \n    switch (status) {\n      case \"CANCELLED\":\n        colorClass = \"bg-red-100 text-red-800 border border-red-300 shadow-sm\";\n        icon = <XCircle className=\"h-3 w-3 mr-1\" />;\n        break;\n      case \"CANCELLATION_REJECTED\":\n        colorClass = \"bg-orange-100 text-orange-800 border border-orange-300 shadow-sm\";\n        icon = <XCircle className=\"h-3 w-3 mr-1\" />;\n        textClass = \"line-through\";\n        break;\n      case \"CANCELLATION_REQUESTED\":\n        colorClass = \"bg-yellow-100 text-yellow-800 border border-yellow-300 shadow-sm\";\n        icon = <AlertTriangle className=\"h-3 w-3 mr-1\" />;\n        break;\n      default:\n        colorClass = \"bg-slate-100 text-slate-700 border border-slate-200 shadow-sm\";\n        icon = <Info className=\"h-3 w-3 mr-1\" />;\n    }\n    \n    return (\n      <Badge className={`${colorClass} px-3 py-1.5 rounded-full text-xs font-semibold flex items-center justify-center`}>\n        {icon}\n        <span className={textClass}>{status.replace(\"_\", \" \")}</span>\n      </Badge>\n    );\n  };\n\n  // Format date for display\n  const formatDate = (dateString) => {\n    if (!dateString) return \"N/A\";\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  // Format datetime for display\n  const formatDateTime = (dateString) => {\n    if (!dateString) return \"N/A\";\n    return new Date(dateString).toLocaleString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  if (!hotelId) {\n    return (\n      <div className=\"flex justify-center items-center h-64 text-muted-foreground\">\n        No hotel selected. Please log in as a hotel admin or select a hotel.\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  // Get paginated data\n  const startIndex = currentPage * pageSize;\n  const endIndex = startIndex + pageSize;\n  const paginatedRequests = cancellationRequests.slice(startIndex, endIndex);\n\n  return (\n    <div>\n      <div>\n        {/* --- Error Message Display --- */}\n        {error && (\n          <div\n            className=\"bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4\"\n            role=\"alert\"\n          >\n            <p className=\"font-bold\">Error:</p>\n            <p>{error}</p>\n            <p className=\"text-sm mt-1\">Please check your connection and try again</p>\n          </div>\n        )}\n\n        {/* --- Cancellation Requests Table --- */}\n        <div className=\"overflow-x-auto scrollbar-hide px-4 sm:px-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Guest Info</TableHead>\n                <TableHead>Phone</TableHead>\n                <TableHead>Check-in</TableHead>\n                <TableHead>Check-out</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Request Date</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {paginatedRequests.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={8} className=\"text-center py-8 text-muted-foreground\">\n                    <div className=\"flex flex-col items-center gap-2\">\n                      <AlertTriangle className=\"h-8 w-8 text-muted-foreground/50\" />\n                      <p>No cancellation requests found</p>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ) : (\n                paginatedRequests.map((request) => (\n                  <TableRow key={request.bookingId}>\n                    <TableCell>\n                      <div className=\"font-medium\">{request.guestName}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {request.userName}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center\">\n                        <Phone className=\"h-4 w-4 mr-1 text-muted-foreground\" />\n                        {request.phone || \"N/A\"}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center\">\n                        <Calendar className=\"h-4 w-4 mr-1 text-muted-foreground\" />\n                        {formatDate(request.checkInDate)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center\">\n                        <Calendar className=\"h-4 w-4 mr-1 text-muted-foreground\" />\n                        {formatDate(request.checkOutDate)}\n                      </div>\n                    </TableCell>\n                    <TableCell>{getStatusBadge(request.status)}</TableCell>\n                    <TableCell>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {formatDate(request.bookingCreatedAt)}\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <span className=\"sr-only\">Open menu</span>\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem\n                            onClick={() => setSelectedRequest(request)}\n                          >\n                            <Info className=\"h-4 w-4 mr-2\" /> View Details\n                          </DropdownMenuItem>\n                          {request.status !== \"CANCELLATION_REJECTED\" && request.status !== \"CANCELLED\" && (\n                            <>\n                              <DropdownMenuItem\n                                onClick={() => {\n                                  setRequestToAction(request);\n                                  setActionType(\"approve\");\n                                  setActionDialog(true);\n                                }}\n                                className=\"text-green-600\"\n                              >\n                                <CheckCircle className=\"h-4 w-4 mr-2\" /> Approve\n                              </DropdownMenuItem>\n                              <DropdownMenuItem\n                                onClick={() => {\n                                  setRequestToAction(request);\n                                  setActionType(\"reject\");\n                                  setActionDialog(true);\n                                }}\n                                className=\"text-red-600\"\n                              >\n                                <XCircle className=\"h-4 w-4 mr-2\" /> Reject\n                              </DropdownMenuItem>\n                            </>\n                          )}\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </div>\n\n        {/* --- Pagination Controls --- */}\n        {totalPages > 1 && (\n          <div className=\"flex items-center justify-between px-4 py-3 sm:px-6\">\n            {/* Mobile pagination */}\n            <div className=\"flex-1 flex justify-between sm:hidden\">\n              <Button\n                onClick={handlePreviousPage}\n                disabled={currentPage === 0}\n                variant=\"outline\"\n              >\n                Previous\n              </Button>\n              <Button\n                onClick={handleNextPage}\n                disabled={currentPage === totalPages - 1}\n                variant=\"outline\"\n              >\n                Next\n              </Button>\n            </div>\n            {/* Desktop pagination */}\n            <div className=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">\n                  Showing page{\" \"}\n                  <span className=\"font-medium\">{currentPage + 1}</span> of{\" \"}\n                  <span className=\"font-medium\">{totalPages}</span>\n                </p>\n              </div>\n              <div>\n                <nav\n                  className=\"flex rounded-md shadow-sm -space-x-px\"\n                  aria-label=\"Pagination\"\n                >\n                  <Button\n                    onClick={handlePreviousPage}\n                    disabled={currentPage === 0}\n                    variant=\"outline\"\n                    className=\"rounded-l-md rounded-r-none\"\n                  >\n                    <ChevronLeft className=\"h-5 w-5\" />\n                  </Button>\n\n                  {getPageNumbers().map((page) => (\n                    <Button\n                      key={page}\n                      onClick={() => handlePageClick(page)}\n                      variant={page === currentPage ? \"default\" : \"outline\"}\n                      className=\"rounded-none\"\n                    >\n                      {page + 1}\n                    </Button>\n                  ))}\n\n                  <Button\n                    onClick={handleNextPage}\n                    disabled={currentPage === totalPages - 1}\n                    variant=\"outline\"\n                    className=\"rounded-r-md rounded-l-none\"\n                  >\n                    <ChevronRight className=\"h-5 w-5\" />\n                  </Button>\n                </nav>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* --- Action Confirmation Dialog --- */}\n      <ConfirmationDialog\n        open={actionDialog}\n        onOpenChange={setActionDialog}\n        onConfirm={() => handleCancellationAction(requestToAction?.bookingId, actionType)}\n        title={`${actionType === \"approve\" ? \"Approve\" : \"Reject\"} Cancellation Request`}\n        description={`Are you sure you want to ${actionType} the cancellation request for booking #${requestToAction?.bookingId}? This action cannot be undone.`}\n        confirmText={actionType === \"approve\" ? \"Approve\" : \"Reject\"}\n        variant={actionType === \"reject\" ? \"destructive\" : \"default\"}\n      />\n\n      {/* --- Request Details Modal --- */}\n      {selectedRequest && (\n        <Dialog open={!!selectedRequest} onOpenChange={() => setSelectedRequest(null)}>\n          <DialogContent className=\"sm:max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader className=\"pb-6\">\n              <DialogTitle className=\"flex items-center gap-3 text-2xl font-bold text-gray-900\">\n                <Info className=\"h-6 w-6 text-blue-600\" />\n                Cancellation Request Details\n              </DialogTitle>\n            </DialogHeader>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 py-2\">\n              {/* Guest Information */}\n              <div className=\"space-y-5\">\n                <h3 className=\"text-xl font-bold text-gray-900 border-b border-gray-200 pb-3\">Guest Information</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">Guest Name:</span>\n                    <span className=\"text-gray-900 text-sm\">{selectedRequest.guestName || 'Not provided'}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">User Name:</span>\n                    <span className=\"text-gray-900 text-sm\">{selectedRequest.userName || 'Not provided'}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">Phone:</span>\n                    <span className=\"text-gray-900 text-sm\">{selectedRequest.phone || 'Not provided'}</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Booking Information */}\n              <div className=\"space-y-5\">\n                <h3 className=\"text-xl font-bold text-gray-900 border-b border-gray-200 pb-3\">Booking Information</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">Booking ID:</span>\n                    <span className=\"text-gray-900 text-sm\">#{selectedRequest.bookingId}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">Status:</span>\n                    <div className=\"mt-1\">{getStatusBadge(selectedRequest.status)}</div>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">Booking Date:</span>\n                    <span className=\"text-gray-900 text-sm\">{formatDateTime(selectedRequest.bookingCreatedAt)}</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Travel Dates */}\n              <div className=\"space-y-5 md:col-span-2\">\n                <h3 className=\"text-xl font-bold text-gray-900 border-b border-gray-200 pb-3\">Travel Dates</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">Check-in Date:</span>\n                    <span className=\"text-gray-900 text-sm\">{formatDate(selectedRequest.checkInDate)}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-semibold text-gray-600 text-sm\">Check-out Date:</span>\n                    <span className=\"text-gray-900 text-sm\">{formatDate(selectedRequest.checkOutDate)}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <DialogFooter className=\"pt-6\">\n              <Button variant=\"outline\" onClick={() => setSelectedRequest(null)}>\n                Close\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n};\n\nexport default CancellationRequestsTable;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/FilterSidebar.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/HotelAdminDashboard.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'clearStorage' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":65,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"clearStorage"},"fix":{"range":[1858,1872],"text":""},"desc":"Remove unused variable 'clearStorage'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'toast' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":69,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"toast"},"fix":{"range":[2088,2119],"text":""},"desc":"Remove unused variable 'toast'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isMobile' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":104,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":104,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"isMobile"},"fix":{"range":[3484,3605],"text":""},"desc":"Remove unused variable 'isMobile'."}]},{"ruleId":"no-undef","severity":2,"message":"'fetchHotelData' is not defined.","line":278,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":278,"endColumn":19}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useRef } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport {\n  Home,\n  Calendar,\n  PieChart,\n  Hotel,\n  Bed,\n  Package,\n  Users,\n  ArrowLeft,\n  List,\n  X,\n  Bell,\n  Trash2,\n  QrCode,\n} from \"lucide-react\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/shared/components/card\";\nimport { Button } from \"@/shared/components/button\";\nimport { Separator } from \"@/shared/components/separator\";\nimport { Badge } from \"@/shared/components/badge\";\nimport { Avatar, AvatarFallback } from \"@/shared/components/avatar\";\nimport StaffManager from \"./StaffManager\";\nimport StaffCardGrid from \"../admin/StaffCardGrid\";\nimport RoomStatusTable from \"./RoomStatusTable\";\nimport BookingsTrendChart from \"./BookingsTrendChart\";\nimport MonthlyPerformanceChart from \"./MonthlyPerformanceChart\";\nimport PasscodeVerification from \"./PasscodeVerification\";\n// import { useMediaQuery } from \"@/lib/hooks/useMediaQuery\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/shared/components/dropdown-menu\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/shared/components/sheet\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/shared/components/tabs\";\nimport HotelInfoForm from \"./HotelInfoForm\";\nimport RoomManager from \"../admin/RoomManager\";\nimport BookingTable from \"./BookingTable\";\nimport CancellationRequestsTable from \"./CancellationRequestsTable\";\nimport AdminBookingForm from \"./AdminBookingForm\";\nimport QRCodeScanner from \"./QRCodeScanner\";\nimport ScannedBookingModal from \"./ScannedBookingModal\";\nimport BookingsInventoryTable from \"./BookingsInventoryTable\";\nimport { useAuth } from \"../authentication\";\nimport { getStorageItem, clearStorage } from \"@/shared/utils/safariLocalStorage\";\nimport api from \"../../shared/services/Api\";\nimport { TopHotelBadge } from \"../../shared/components\";\nimport { API_BASE_URL } from \"../../shared/services/firebaseConfig\";\nimport { toast } from \"sonner\";\nimport { YakRoomsText } from \"@/shared/components\";\n\nconst HotelAdminDashboard = () => {\n  const navigate = useNavigate();\n  const {\n    userId,\n    userName,\n    hotelId,\n    lastLogin,\n    roles,\n    isTopHotel,\n    topHotelIds,\n  } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n\n  // Redirect to dashboard if user doesn't have access to current tab\n  useEffect(() => {\n    if (activeTab === \"staff\" && roles && roles.includes(\"STAFF\")) {\n      setActiveTab(\"dashboard\");\n    }\n  }, [activeTab, roles]);\n  const [hotel, setHotel] = useState(null);\n  const [bookings, setBookings] = useState([]);\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [loadingNotifications, setLoadingNotifications] = useState(false);\n  const notificationRef = useRef(null);\n  const [showStaffGrid, setShowStaffGrid] = useState(false);\n  const [scannedBookingData, setScannedBookingData] = useState(null);\n  const [showScannedBookingModal, setShowScannedBookingModal] = useState(false);\n  const [verificationTab, setVerificationTab] = useState(\"qr-scanner\"); // \"qr-scanner\" or \"passcode\"\n  // Simple media query hook for small screens (max-width: 640px)\n  const isMobile =\n    typeof window !== \"undefined\"\n      ? window.matchMedia(\"(max-width: 640px)\").matches\n      : false;\n\n  useEffect(() => {\n    console.log(\"Hotel id :\" + getStorageItem(\"hotelId\"));\n  }, [userId]);\n\n  // Debug logging for top hotel functionality\n  useEffect(() => {\n    console.log(\"🏨 [TOP HOTEL DEBUG] Hotel Dashboard Values:\");\n    console.log(\"  - hotelId:\", hotelId);\n    console.log(\"  - topHotelIds:\", topHotelIds);\n    console.log(\"  - topHotelIds length:\", topHotelIds?.length);\n    console.log(\"  - isTopHotel function exists:\", typeof isTopHotel);\n\n    if (hotelId) {\n      const isTop = isTopHotel(hotelId);\n      console.log(\"  - isTopHotel(\" + hotelId + \"):\", isTop);\n      console.log(\"  - hotelId type:\", typeof hotelId);\n      console.log(\n        \"  - topHotelIds includes hotelId:\",\n        topHotelIds?.includes(hotelId)\n      );\n\n      // Check if there's a type mismatch\n      if (topHotelIds?.length > 0) {\n        console.log(\"  - topHotelIds[0] type:\", typeof topHotelIds[0]);\n        console.log(\"  - topHotelIds content:\", JSON.stringify(topHotelIds));\n      }\n    } else {\n      console.log(\"  - No hotelId found!\");\n    }\n    console.log(\"🏨 [END DEBUG]\");\n  }, [hotelId, topHotelIds, isTopHotel]);\n\n  useEffect(() => {\n    const fetchHotelData = async () => {\n      try {\n        const res = await api.get(`/hotels/${userId}`);\n        setHotel(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    fetchHotelData();\n  }, [userId]);\n\n  // Fetch all notifications from backend when component mounts\n  useEffect(() => {\n    const fetchNotifications = async () => {\n      if (!userId) return;\n\n      try {\n        setLoadingNotifications(true);\n        const response = await api.get(`/notifications/user/${userId}`);\n        const fetchedNotifications = response.data;\n\n        // Filter notifications to show BOOKING_CREATED and BOOKING_CANCELLATION_REQUEST types\n        const filteredNotifications = fetchedNotifications.filter(\n          (notif) => notif.type === \"HOTEL_BOOKING_CREATED\" || notif.type === \"HOTEL_CANCELLATION_REQUEST\"\n        );\n\n        // Sort notifications by createdAt (newest first) and calculate unread count\n        const sortedNotifications = filteredNotifications.sort(\n          (a, b) => new Date(b.createdAt) - new Date(a.createdAt)\n        );\n\n        const unreadNotifications = sortedNotifications.filter(\n          (notif) => !notif.isRead\n        );\n\n        setNotifications(sortedNotifications);\n        setUnreadCount(unreadNotifications.length);\n\n        console.log(\"[API] Fetched notifications:\", sortedNotifications);\n        console.log(\"[API] Unread count:\", unreadNotifications.length);\n      } catch (error) {\n        console.error(\"[API] Error fetching notifications:\", error);\n      } finally {\n        setLoadingNotifications(false);\n      }\n    };\n\n    fetchNotifications();\n  }, [userId]);\n\n  // Mark all notifications as read via API\n  const markAllNotificationsAsRead = async () => {\n    try {\n      await api.put(`/notifications/user/${userId}/markAllRead`);\n\n      // Update local state\n      setNotifications((prev) =>\n        prev.map((notif) => ({ ...notif, isRead: true }))\n      );\n      setUnreadCount(0);\n\n      console.log(\"[API] Successfully marked all notifications as read\");\n    } catch (error) {\n      console.error(\"[API] Error marking notifications as read:\", error);\n    }\n  };\n\n  // Delete all notifications via API\n  const deleteAllNotifications = async () => {\n    try {\n      await api.delete(`/notifications/user/${userId}`);\n\n      // Update local state\n      setNotifications([]);\n      setUnreadCount(0);\n\n      console.log(\"[API] Successfully deleted all notifications\");\n    } catch (error) {\n      console.error(\"[API] Error deleting notifications:\", error);\n    }\n  };\n\n  // Note: Real-time booking notifications were previously handled via WebSocket\n  // For now, notifications will need to be fetched manually or via polling\n\n  // Close notification dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (\n        notificationRef.current &&\n        !notificationRef.current.contains(event.target)\n      ) {\n        setShowNotifications(false);\n      }\n    };\n\n    if (showNotifications) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [showNotifications]);\n\n  // Handle notification dropdown click\n  const handleNotificationClick = async () => {\n    setShowNotifications((prev) => !prev);\n\n    // Mark all as read when opening dropdown (only if there are unread notifications)\n    if (!showNotifications && unreadCount > 0) {\n      await markAllNotificationsAsRead();\n    }\n  };\n\n  // Clear all notifications\n  const clearAllNotifications = async () => {\n    await deleteAllNotifications();\n    setShowNotifications(false);\n  };\n\n  const updateHotel = (updatedHotel) => {\n    setHotel(updatedHotel);\n  };\n\n  const updateBookingStatus = (id, status) => {\n    setBookings(\n      bookings.map((booking) =>\n        booking.id === id ? { ...booking, status } : booking\n      )\n    );\n  };\n\n  const handleBookingSuccess = () => {\n    // Refresh bookings when a new booking is created\n    fetchHotelData();\n  };\n\n  // Handle QR scan success\n  const handleQRScanSuccess = (data) => {\n    setScannedBookingData(data);\n    setShowScannedBookingModal(true);\n  };\n\n  // Navigate to account deletion page\n  const handleDeleteAccount = () => {\n    navigate(\"/account-deletion\");\n  };\n\n  const formatLoginTime = (date) => {\n    if (!date) return \"Never\";\n    const d = typeof date === \"string\" ? new Date(date) : date;\n    return d.toLocaleString(undefined, {\n      weekday: \"short\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      hour12: true,\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  const navigationItems = [\n    { id: \"dashboard\", label: \"Dashboard\", icon: Home },\n    { id: \"hotel\", label: \"Hotel Details\", icon: Hotel },\n    { id: \"rooms\", label: \"Room Management\", icon: Bed },\n    ...(roles && !roles.includes(\"STAFF\")\n      ? [{ id: \"staff\", label: \"Staff Management\", icon: Users }]\n      : []),\n    { id: \"inventory\", label: \"Bookings Inventory\", icon: Package },\n    { id: \"analytics\", label: \"Analytics\", icon: PieChart },\n    { id: \"booking\", label: \"Booking\", icon: Calendar },\n  ];\n\n  const getPageTitle = () => {\n    const titles = {\n      dashboard: \"Dashboard\",\n      hotel: \"Hotel Details\",\n      rooms: \"Room Management\",\n      staff: \"Staff Management\",\n      inventory: \"Bookings Inventory\",\n      analytics: \"Analytics & Reports\",\n      booking: \"Booking Management\",\n    };\n    return titles[activeTab] || \"Dashboard\";\n  };\n\n  const getPageDescription = () => {\n    const descriptions = {\n      dashboard: \"Overview of your hotel operations and recent activity\",\n      hotel: \"Manage your hotel information and details\",\n      rooms: \"Add, edit, and manage your room inventory\",\n      inventory: \"View all bookings data in tabular format with Excel export\",\n      staff: \"Manage your hotel staff and their roles\",\n      analytics: \"Insights and reports about your business performance\",\n      booking: \"Manage and view your hotel bookings\",\n    };\n    return descriptions[activeTab] || \"Manage your hotel operations\";\n  };\n\n  const NavigationButton = ({ item, onClick, isActive }) => {\n    const Icon = item.icon;\n    return (\n      <Button\n        variant={isActive ? \"secondary\" : \"ghost\"}\n        className={`w-full justify-start transition-colors py-2 px-3 text-sm ${\n          isActive\n            ? \"bg-primary/10 text-primary hover:bg-primary/10\"\n            : \"hover:bg-accent\"\n        }`}\n        onClick={onClick}\n      >\n        <Icon className=\"mr-2 h-4 w-4\" />\n        <span className=\"text-sm\">{item.label}</span>\n        {isActive && (\n          <div className=\"ml-auto w-1.5 h-1.5 rounded-full bg-primary\" />\n        )}\n      </Button>\n    );\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      {/* Desktop Sidebar */}\n      <aside className=\"w-56 lg:w-64 bg-card shadow-sm hidden md:block border-r flex flex-col\">\n        <div className=\"p-4 lg:p-5 border-b\">\n          <div className=\"flex items-center gap-2 lg:gap-3 mb-3\">\n            <div>\n              <YakRoomsText size=\"default\" />\n              <p className=\"text-xs text-muted-foreground\">Admin Panel</p>\n            </div>\n          </div>\n        </div>\n\n        <nav className=\"p-3 lg:p-4 flex-1\">\n          <div className=\"space-y-1\">\n            {navigationItems.map((item) => (\n              <NavigationButton\n                key={item.id}\n                item={item}\n                isActive={activeTab === item.id}\n                onClick={() => setActiveTab(item.id)}\n              />\n            ))}\n          </div>\n        </nav>\n\n        <div className=\"p-3 lg:p-4 border-t\">\n          <Link to=\"/\">\n            <Button\n              variant=\"default\"\n              size=\"sm\"\n              className=\"w-full text-xs lg:text-sm bg-primary hover:bg-primary/90 text-primary-foreground\"\n            >\n              <ArrowLeft className=\"mr-2 h-3 w-3 lg:h-4 lg:w-4\" />\n              Back to Website\n            </Button>\n          </Link>\n        </div>\n      </aside>\n\n      {/* Main Content */}\n      <div className=\"flex-1 overflow-auto\">\n        {/* Top Header */}\n        <header className=\"bg-card shadow-sm border-b sticky top-0 z-10\">\n          <div className=\"px-4 py-3 lg:px-6 lg:py-4 flex justify-between items-center\">\n            <div className=\"space-y-0.5 flex-1 min-w-0\">\n              <h2 className=\"hidden md:block text-xl sm:text-xl lg:text-2xl font-semibold text-foreground truncate\">\n                {getPageTitle()}\n              </h2>\n              {activeTab !== \"dashboard\" && (\n                <p className=\"hidden md:block text-sm sm:text-sm text-muted-foreground line-clamp-2 sm:line-clamp-1\">\n                  {getPageDescription()}\n                </p>\n              )}\n            </div>\n\n            {/* Right side actions */}\n            <div className=\"flex items-center space-x-3 flex-shrink-0\">\n              {/* Notification Bell */}\n              <div className=\"relative\" ref={notificationRef}>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"relative\"\n                  onClick={handleNotificationClick}\n                  disabled={loadingNotifications}\n                >\n                  <Bell className=\"h-5 w-5\" />\n                  {unreadCount > 0 && (\n                    <span className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full bg-red-500 text-[10px] text-white flex items-center justify-center font-bold\">\n                      {unreadCount > 99 ? \"99+\" : unreadCount}\n                    </span>\n                  )}\n                </Button>\n\n                {/* Notification Dropdown */}\n\n                {showNotifications && (\n                  <div className=\"fixed left-4 right-4 top-16 sm:absolute sm:right-0 sm:left-auto sm:top-auto sm:mt-2 w-auto sm:w-80 bg-card border rounded-lg shadow-lg z-50\">\n                    <div className=\"p-3 sm:p-4 border-b\">\n                      <div className=\"flex items-center justify-between\">\n                        <h3 className=\"font-semibold text-foreground text-sm sm:text-base\">\n                          Notifications\n                        </h3>\n                        {notifications.length > 0 && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-xs text-muted-foreground hover:text-foreground h-7 px-2\"\n                            onClick={clearAllNotifications}\n                          >\n                            Clear all\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"max-h-64 sm:max-h-96 overflow-y-auto\">\n                      {loadingNotifications ? (\n                        <div className=\"p-4 sm:p-6 text-center\">\n                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary mx-auto mb-2\"></div>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Loading notifications...\n                          </p>\n                        </div>\n                      ) : notifications.length === 0 ? (\n                        <div className=\"p-4 sm:p-6 text-center\">\n                          <Bell className=\"h-6 w-6 sm:h-8 sm:w-8 text-muted-foreground/30 mx-auto mb-2\" />\n                          <p className=\"text-sm text-muted-foreground\">\n                            No notifications\n                          </p>\n                        </div>\n                      ) : (\n                        <div className=\"divide-y\">\n                          {notifications.map((notification) => (\n                            <div\n                              key={notification.id}\n                              className={`p-3 sm:p-4 transition-colors ${\n                                notification.isRead\n                                  ? \"hover:bg-muted/50\"\n                                  : \"bg-blue-50/50 dark:bg-blue-950/20 hover:bg-blue-50 dark:hover:bg-blue-950/30\"\n                              }`}\n                            >\n                              <div className=\"space-y-2\">\n                                <div className=\"flex items-start gap-2\">\n                                  <div className=\"flex-1 min-w-0\">\n                                    <div className=\"flex items-center gap-2 mb-1\">\n                                      <p className=\"font-medium text-sm flex-1 line-clamp-2\">\n                                        {notification.title}\n                                      </p>\n                                      {!notification.isRead && (\n                                        <div className=\"w-2 h-2 rounded-full bg-blue-500 flex-shrink-0\"></div>\n                                      )}\n                                    </div>\n\n                                  </div>\n                                </div>\n                                <div className=\"space-y-1\">\n                                  {notification.guestName && (\n                                    <p className=\"text-sm text-muted-foreground\">\n                                      <span className=\"font-medium\">Guest: </span> {notification.guestName}\n                                    </p>\n                                  )}\n                                  {notification.roomNumber && (\n                                    <p className=\"text-sm text-muted-foreground\">\n                                      <span className=\"font-medium\">Room:</span> {notification.roomNumber}\n                                    </p>\n                                  )}\n                                </div>\n                                <div className=\"flex justify-end\">\n                                  <span className=\"text-xs text-muted-foreground\">\n                                    {notification.displayTime ||\n                                      new Date(\n                                        notification.createdAt\n                                      ).toLocaleString()}\n                                  </span>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Mobile Navigation Button */}\n              <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n                <SheetTrigger asChild>\n                  <List className=\"h-4 w-4 md:hidden\" />\n                </SheetTrigger>\n                <SheetContent\n                  side=\"left\"\n                  className=\"w-[280px] p-0 flex flex-col\"\n                >\n                  <SheetHeader className=\"p-4 border-b\">\n                    <SheetTitle className=\"flex items-center gap-3\">\n                      <div>\n                        <YakRoomsText size=\"default\" />\n                        <p className=\"text-xs text-muted-foreground\">\n                          Admin Panel\n                        </p>\n                      </div>\n                    </SheetTitle>\n                  </SheetHeader>\n\n                  <div className=\"flex-1 flex flex-col p-4\">\n                    <nav className=\"space-y-1 flex-1\">\n                      {navigationItems.map((item) => (\n                        <NavigationButton\n                          key={item.id}\n                          item={item}\n                          isActive={activeTab === item.id}\n                          onClick={() => {\n                            setActiveTab(item.id);\n                            setMobileMenuOpen(false);\n                          }}\n                        />\n                      ))}\n                    </nav>\n\n                    <div className=\"space-y-3 mt-4 pt-4 border-t\">\n                      <div className=\"flex items-center gap-3 p-3 rounded-lg bg-muted/50\">\n                        <Avatar className=\"h-9 w-9 border-2 border-primary/20\">\n                          <AvatarFallback className=\"bg-primary/10 text-primary text-sm\">\n                            {userName?.charAt(0).toUpperCase() || \"U\"}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-sm font-medium leading-none truncate\">\n                            {userName}\n                          </p>\n                          <p className=\"text-xs leading-none text-muted-foreground mt-1\">\n                            Hotel Administrator\n                          </p>\n                        </div>\n                      </div>\n\n                      <Link to=\"/\" className=\"block\">\n                        <Button\n                          variant=\"default\"\n                          size=\"sm\"\n                          className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground\"\n                        >\n                          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                          Back to Website\n                        </Button>\n                      </Link>\n\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"w-full border-destructive text-destructive hover:bg-destructive hover:text-destructive-foreground\"\n                        onClick={handleDeleteAccount}\n                      >\n                        <Trash2 className=\"mr-2 h-4 w-4\" />\n                        Delete Account\n                      </Button>\n                    </div>\n                  </div>\n                </SheetContent>\n              </Sheet>\n\n              <Separator\n                orientation=\"vertical\"\n                className=\"h-4 sm:h-6 hidden sm:block\"\n              />\n\n              {/* Desktop User Menu - Hidden on mobile */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"relative h-8 w-8 sm:h-10 sm:w-10 rounded-full p-0 hidden md:flex\"\n                  >\n                    <Avatar className=\"h-8 w-8 sm:h-10 sm:w-10 border-2 border-primary/20\">\n                      <AvatarFallback className=\"bg-primary/10 text-primary text-xs sm:text-sm\">\n                        {userName?.charAt(0).toUpperCase() || \"U\"}\n                      </AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-48 sm:w-56\" align=\"end\">\n                  <DropdownMenuLabel className=\"font-normal\">\n                    <div className=\"flex flex-col space-y-1\">\n                      <p className=\"text-sm font-medium leading-none truncate\">\n                        {userName}\n                      </p>\n                      <p className=\"text-xs leading-none text-muted-foreground\">\n                        Hotel Administrator\n                      </p>\n                    </div>\n                  </DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem asChild>\n                    <Link to=\"/\" className=\"w-full\">\n                      <Home className=\"mr-2 h-4 w-4\" />\n                      <span>Return to Website</span>\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem\n                    className=\"text-destructive focus:text-destructive cursor-pointer\"\n                    onClick={handleDeleteAccount}\n                  >\n                    <Trash2 className=\"mr-2 h-4 w-4\" />\n                    <span>Delete Account</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </header>\n\n        {/* Dashboard Content */}\n        <main className=\"py-4 sm:p-4 lg:p-6 space-y-4\">\n          {activeTab === \"dashboard\" && (\n            <div className=\"space-y-4\">\n              {/* Welcome Card */}\n              {/* <Card className=\"bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow duration-200\"> */}\n              <CardContent className=\"p-4 md:p-6\">\n                <div className=\"flex flex-col sm:flex-row sm:items-start justify-between gap-4 sm:gap-6\">\n                  {/* Left Content */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center gap-3 mb-2\">\n                      <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center\">\n                        <svg\n                          className=\"w-5 h-5 text-primary\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\n                          />\n                        </svg>\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg sm:text-lg font-semibold text-foreground mb-1 truncate\">\n                          Welcome back, {userName}!\n                        </h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Here's what's happening with your hotel today.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Right Content */}\n                  <div className=\"hidden md:block flex-shrink-0 flex flex-col items-end gap-8\">\n                    <Badge\n                      variant=\"secondary\"\n                      className=\"bg-primary/10 text-primary border-primary/20 text-xs font-medium px-3 py-1\"\n                    >\n                      Admin\n                    </Badge>\n\n                    <div className=\"text-left\">\n                      <p className=\"text-xs text-muted-foreground\">\n                        Last login\n                      </p>\n                      <p className=\"text-xs font-medium text-foreground\">\n                        {formatLoginTime(lastLogin)}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Top Hotel Congratulations Section */}\n\n                {hotelId && isTopHotel(hotelId) && (\n                  <div className=\"mt-6 p-4 bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-950/20 dark:to-orange-950/20 border border-yellow-200 dark:border-yellow-800 rounded-lg\">\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"flex-shrink-0\">\n                        <div className=\"w-8 h-8 bg-yellow-500 rounded-full flex items-center justify-center\">\n                          <svg\n                            className=\"w-5 h-5 text-white\"\n                            fill=\"currentColor\"\n                            viewBox=\"0 0 20 20\"\n                          >\n                            <path\n                              fillRule=\"evenodd\"\n                              d=\"M10 18l-1.45-1.32C5.4 13.36 2 9.28 2 5.5 2 3.42 3.42 2 5.5 2c1.74 0 3.41.81 4.5 2.09C11.09 2.81 12.76 2 14.5 2 16.58 2 18 3.42 18 5.5c0 3.78-3.4 7.86-6.55 11.18L10 18z\"\n                            />\n                          </svg>\n                        </div>\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <h4 className=\"text-base font-semibold text-yellow-800 dark:text-yellow-200\">\n                            Congratulations!\n                          </h4>\n                          <TopHotelBadge hotelId={hotelId} className=\"ml-1\" />\n                        </div>\n                        <p className=\"text-sm text-yellow-700 dark:text-yellow-300 leading-relaxed\">\n                          Your hotel is featured among our{\" \"}\n                          <strong>Top Listed Lodges</strong>! This recognition\n                          showcases your exceptional hospitality and service\n                          quality. Thank you for being an outstanding partner\n                          with YakRooms.\n                        </p>\n                        <div className=\"mt-3 flex items-center text-xs text-yellow-600 dark:text-yellow-400\">\n                          <svg\n                            className=\"w-4 h-4 mr-1\"\n                            fill=\"currentColor\"\n                            viewBox=\"0 0 20 20\"\n                          >\n                            <path\n                              fillRule=\"evenodd\"\n                              d=\"M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z\"\n                              clipRule=\"evenodd\"\n                            />\n                          </svg>\n                          Featured on our homepage and highly visible to guests\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n              {/* </Card> */}\n\n                <div className=\"mb-10\">\n                  <RoomStatusTable hotelId={hotelId} />\n                </div>\n\n              {/* Toggle for StaffCardGrid (visible on all screens) */}\n              <div className=\"mb-2\">\n                <Button\n                  variant={showStaffGrid ? \"secondary\" : \"outline\"}\n                  className=\"w-full\"\n                  onClick={() => setShowStaffGrid((prev) => !prev)}\n                >\n                  {showStaffGrid\n                    ? \"Hide Staff Overview\"\n                    : \"Show Staff Overview\"}\n                </Button>\n              </div>\n\n              {showStaffGrid && <StaffCardGrid hotelId={hotelId} />}\n            </div>\n          )}\n\n          {activeTab === \"hotel\" && hotel && (\n            <div className=\"space-y-4\">\n              <HotelInfoForm hotel={hotel} onUpdate={updateHotel} />\n            </div>\n          )}\n\n          {activeTab === \"rooms\" && (\n            <Card>\n              <CardContent className=\"p-0 md:px-6 md:pb-6\">\n                <RoomManager />\n              </CardContent>\n            </Card>\n          )}\n\n          {activeTab === \"inventory\" && (\n            <div className=\"space-y-4\">\n              <BookingsInventoryTable hotelId={hotelId} />\n            </div>\n          )}\n\n          {activeTab === \"staff\" && ( // Changed from \"bookings\" to \"staff\"\n            <Card>\n              <CardContent className=\"p-0 md:px-6 md:pb-6\">\n                <StaffManager /> {/* Changed component */}\n              </CardContent>\n            </Card>\n          )}\n\n          {activeTab === \"analytics\" && (\n              <CardContent className=\"p-0 md:px-6 md:pb-6\">\n                <div className=\"space-y-8\">\n                  <BookingsTrendChart />\n                  <MonthlyPerformanceChart />\n                </div>\n              </CardContent>\n          )}\n\n          {activeTab === \"booking\" && (\n            <div className=\"space-y-4\">\n              {/* Admin Booking Form */}\n\n              <AdminBookingForm\n                hotelId={hotelId}\n                onBookingSuccess={handleBookingSuccess}\n              />\n\n              {/* Booking Verification Section with Tabs */}\n              {/* <Card> */}\n                <CardHeader className=\"\">\n                  <CardTitle className=\"flex items-center gap-2 text-lg\">\n                    <QrCode className=\"h-4 w-4 text-primary\" />\n                    Booking Verification\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-4 md:px-6 md:pb-6\">\n                  <Tabs\n                    value={verificationTab}\n                    onValueChange={setVerificationTab}\n                    className=\"w-full\"\n                  >\n                    <TabsList className=\"grid w-full grid-cols-2\">\n                      <TabsTrigger\n                        value=\"qr-scanner\"\n                        className=\"flex items-center gap-2\"\n                      >\n                        <QrCode className=\"h-4 w-4\" />\n                        QR Scanner\n                      </TabsTrigger>\n                      <TabsTrigger\n                        value=\"passcode\"\n                        className=\"flex items-center gap-2\"\n                      >\n                        <Bed className=\"h-4 w-4\" />\n                        Passcode\n                      </TabsTrigger>\n                    </TabsList>\n\n                    <TabsContent value=\"qr-scanner\" className=\"mt-4\">\n                      <div className=\"space-y-4\">\n                        <div className=\"text-center text-sm text-gray-600 mb-4\">\n                          Scan guest QR codes to verify booking details\n                        </div>\n                        <div className=\"flex justify-center\">\n                          <QRCodeScanner\n                            onScanSuccess={handleQRScanSuccess}\n                            isActive={verificationTab === \"qr-scanner\"}\n                          />\n                        </div>\n                      </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"passcode\" className=\"mt-4\">\n                      <div className=\"space-y-4\">\n                        <div className=\"text-center text-sm text-gray-600 mb-4\">\n                          Enter room passcode to verify guest booking\n                        </div>\n                        <PasscodeVerification />\n                      </div>\n                    </TabsContent>\n                  </Tabs>\n                </CardContent>\n              {/* </Card> */}\n\n              {/* Booking Table */}\n              <Card>\n                <CardHeader className=\"\">\n                  <CardTitle className=\"flex items-center gap-2 text-lg\">\n                    <Calendar className=\"h-4 w-4 text-primary\" />\n                    All Bookings\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0 md:px-6 md:pb-6\">\n                  <div className=\"overflow-x-auto\" data-booking-table>\n                    <BookingTable\n                      hotelId={hotelId}\n                      bookings={bookings}\n                      onStatusChange={updateBookingStatus}\n                      viewMode=\"compact\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </main>\n      </div>\n\n      {/* Scanned Booking Modal */}\n      <ScannedBookingModal\n        isOpen={showScannedBookingModal}\n        onClose={() => setShowScannedBookingModal(false)}\n        scannedData={scannedBookingData}\n      />\n    </div>\n  );\n};\n\nexport default HotelAdminDashboard;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/HotelDetailsPage.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'nextImage'. Either include it or remove the dependency array.","line":156,"column":6,"nodeType":"ArrayExpression","endLine":156,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [images.length, nextImage]","fix":{"range":[4220,4235],"text":"[images.length, nextImage]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'nextImage' and 'prevImage'. Either include them or remove the dependency array.","line":188,"column":6,"nodeType":"ArrayExpression","endLine":188,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [images.length, nextImage, prevImage]","fix":{"range":[5115,5130],"text":"[images.length, nextImage, prevImage]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'amenityIcons' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":394,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":394,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"amenityIcons"},"fix":{"range":[12234,12407],"text":""},"desc":"Remove unused variable 'amenityIcons'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'appState.hotel.locality'. Either include it or remove the dependency array.","line":650,"column":6,"nodeType":"ArrayExpression","endLine":650,"endColumn":54,"suggestions":[{"desc":"Update the dependencies array to be: [appState.hotel.name, appState.hotel.locality, appState.hotel.district]","fix":{"range":[20277,20325],"text":"[appState.hotel.name, appState.hotel.locality, appState.hotel.district]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'closeReviewSheet' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":656,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":656,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"closeReviewSheet"},"fix":{"range":[20450,20567],"text":""},"desc":"Remove unused variable 'closeReviewSheet'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useParams, useNavigate, Link } from \"react-router-dom\";\nimport RoomBookingCard from \"../../features/booking/RoomBookingCard\";\nimport Footer from \"../../layouts/Footer\";\nimport YakRoomsAdCard from \"@/shared/components/YakRoomsAdCard\";\nimport YakRoomsLoader from \"@/shared/components/YakRoomsLoader\";\nimport StarRating from \"@/shared/components/star-rating\";\nimport HotelReviewSheet from \"./HotelReviewSheet\";\nimport api from \"../../shared/services/Api\";\n\nimport {\n  ArrowLeft,\n  Share2,\n  Heart,\n  MapPin,\n  ChevronLeft,\n  ChevronRight,\n  CheckCircle,\n  Loader2,\n  Star,\n  StarHalf,\n  Home,\n  Building2,\n  Wifi,\n  Car,\n  Coffee,\n  Utensils,\n  Bath,\n  AirVent,\n  Phone,\n  X,\n  Clock,\n  MessageCircle,\n  LogIn,\n  LogOut,\n  Mountain,\n  Sparkles,\n  Shield,\n  Zap,\n  Users,\n  Calendar,\n  ArrowRight,\n} from \"lucide-react\";\n\nimport { Button } from \"@/shared/components/button\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/shared/components/tooltip\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/shared/components/card\";\nimport { Badge } from \"@/shared/components/badge\";\nimport { Separator } from \"@/shared/components/separator\";\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from \"@/shared/components/pagination\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/shared/components/sheet\";\nimport { useAuth } from \"../authentication\";\n\n// Utility function to format time from 24-hour to 12-hour format with descriptive text\nconst formatTimeWithDescription = (timeString, type = 'general') => {\n  if (!timeString) return \"Not specified\";\n  \n  try {\n    const [hours, minutes] = timeString.split(':').map(Number);\n    const hour12 = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    const formattedMinutes = minutes.toString().padStart(2, '0');\n    \n    let description = '';\n    if (hours === 0) {\n      description = '(Midnight)';\n    } else if (hours >= 1 && hours < 6) {\n      description = type === 'checkin' ? '(Evening)' : '(Morning)';\n    } else if (hours >= 6 && hours < 12) {\n      description = '(Morning)';\n    } else if (hours === 12) {\n      description = '(Noon)';\n    } else if (hours >= 13 && hours < 17) {\n      description = '(Afternoon)';\n    } else if (hours >= 17 && hours < 21) {\n      description = type === 'checkout' ? '(Evening)' : '(Evening)';\n    } else {\n      description = '(Night)';\n    }\n    \n    return `${hour12}:${formattedMinutes} ${ampm} ${description}`;\n  } catch (error) {\n    console.error('Error formatting time:', error);\n    return \"Invalid time\";\n  }\n};\n\n// Simple time formatter for sidebar (without description)\nconst formatTime = (timeString) => {\n  if (!timeString) return \"Not specified\";\n  \n  try {\n    const [hours, minutes] = timeString.split(':').map(Number);\n    const hour12 = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    const formattedMinutes = minutes.toString().padStart(2, '0');\n    \n    return `${hour12}:${formattedMinutes} ${ampm}`;\n  } catch (error) {\n    console.error('Error formatting time:', error);\n    return \"Invalid time\";\n  }\n};\n\n// Room Image Carousel Component\nconst RoomImageCarousel = ({ images, roomNumber, roomType }) => {\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [showImageModal, setShowImageModal] = useState(false);\n  const [imageLoading, setImageLoading] = useState(true);\n\n  const nextImage = () => {\n    setCurrentImageIndex((prev) => \n      prev === images.length - 1 ? 0 : prev + 1\n    );\n  };\n\n  const prevImage = () => {\n    setCurrentImageIndex((prev) => \n      prev === 0 ? images.length - 1 : prev - 1\n    );\n  };\n\n  const goToImage = (index) => {\n    setCurrentImageIndex(index);\n  };\n\n  // Auto-advance images every 5 seconds\n  useEffect(() => {\n    if (images.length <= 1) return;\n    \n    const interval = setInterval(() => {\n      nextImage();\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, [images.length]);\n\n  // Keyboard navigation - only when carousel is focused\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      // Don't handle keyboard events if user is typing in form inputs\n      if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA' || e.target.contentEditable === 'true') {\n        return;\n      }\n      \n      if (images.length <= 1) return;\n      \n      switch (e.key) {\n        case 'ArrowLeft':\n          e.preventDefault();\n          prevImage();\n          break;\n        case 'ArrowRight':\n          e.preventDefault();\n          nextImage();\n          break;\n        case ' ':\n          e.preventDefault();\n          setShowImageModal(true);\n          break;\n        default:\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [images.length]);\n\n  if (!images || images.length === 0) {\n    return (\n      <div className=\"h-64 w-full bg-gradient-to-br from-slate-100 to-slate-200 flex items-center justify-center\">\n        <div className=\"text-center text-slate-500\">\n          <Building2 className=\"h-12 w-12 mx-auto mb-2\" />\n          <p className=\"text-sm\">No images available</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"relative h-64 w-full overflow-hidden rounded-t-lg lg:rounded-l-lg lg:rounded-t-none group\">\n        {/* Main Image */}\n        <img\n          key={currentImageIndex}\n          src={images[currentImageIndex]}\n          alt={`${roomType} - Room ${roomNumber}`}\n          className={`h-full w-full object-cover cursor-pointer transition-all duration-500 ease-in-out hover:scale-105 ${\n            imageLoading ? 'blur-sm' : 'blur-0'\n          }`}\n          onClick={() => setShowImageModal(true)}\n          onLoad={() => setImageLoading(false)}\n          onError={() => setImageLoading(false)}\n        />\n\n        {/* Loading Overlay */}\n        {imageLoading && (\n          <div className=\"absolute inset-0 flex items-center justify-center bg-slate-100\">\n            <div className=\"flex items-center gap-2 text-slate-600\">\n              <Loader2 className=\"h-5 w-5 animate-spin\" />\n              <span className=\"text-sm\">Loading...</span>\n            </div>\n          </div>\n        )}\n\n        {/* Gradient Overlay */}\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent\" />\n\n        {/* Navigation Arrows - Only show if multiple images */}\n        {images.length > 1 && (\n          <>\n            <Button\n              variant=\"secondary\"\n              size=\"icon\"\n              onClick={prevImage}\n              className=\"absolute left-2 top-1/2 -translate-y-1/2 rounded-full bg-background/90 hover:bg-background h-8 w-8 opacity-0 group-hover:opacity-100 transition-all duration-200 hover:scale-110\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"secondary\"\n              size=\"icon\"\n              onClick={nextImage}\n              className=\"absolute right-2 top-1/2 -translate-y-1/2 rounded-full bg-background/90 hover:bg-background h-8 w-8 opacity-0 group-hover:opacity-100 transition-all duration-200 hover:scale-110\"\n            >\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </>\n        )}\n\n        {/* Image Indicators */}\n        {images.length > 1 && (\n          <div className=\"absolute bottom-3 left-0 right-0 flex justify-center gap-1.5\">\n            {images.map((_, index) => (\n              <button\n                key={index}\n                onClick={() => goToImage(index)}\n                className={`h-2.5 w-2.5 rounded-full transition-all duration-200 ${\n                  currentImageIndex === index\n                    ? \"bg-white scale-125 shadow-lg ring-2 ring-white/50\"\n                    : \"bg-white/50 hover:bg-white/75 hover:scale-110\"\n                }`}\n                aria-label={`Go to image ${index + 1}`}\n              />\n            ))}\n          </div>\n        )}\n\n        {/* Image Counter */}\n        {images.length > 1 && (\n          <div className=\"absolute top-3 right-3 bg-black/60 text-white px-2 py-1 rounded-full text-xs font-medium backdrop-blur-sm\">\n            {currentImageIndex + 1} / {images.length}\n          </div>\n        )}\n\n        {/* Availability Badge */}\n        <Badge\n          variant=\"default\"\n          className=\"absolute left-3 top-3 bg-green-600 hover:bg-green-700 shadow-lg\"\n        >\n          <CheckCircle className=\"mr-1 h-3.5 w-3.5\" />\n          Available\n        </Badge>\n      </div>\n\n      \n\n      {/* Image Modal */}\n      <Sheet open={showImageModal} onOpenChange={setShowImageModal}>\n        <SheetContent side=\"bottom\" className=\"h-[90vh]\">\n          <SheetHeader>\n            <SheetTitle>{roomType} - Room {roomNumber}</SheetTitle>\n          </SheetHeader>\n          <div className=\"mt-6 relative h-full\">\n            <img\n              src={images[currentImageIndex]}\n              alt={`${roomType} - Room ${roomNumber}`}\n              className=\"h-full w-full object-contain\"\n            />\n            {images.length > 1 && (\n              <>\n                <div className=\"absolute bottom-4 left-0 right-0 flex justify-center gap-2\">\n                  {images.map((_, index) => (\n                    <button\n                      key={index}\n                      onClick={() => goToImage(index)}\n                      className={`h-2 w-2 rounded-full transition-all ${\n                        currentImageIndex === index\n                          ? \"bg-primary scale-125\"\n                          : \"bg-muted-foreground/50\"\n                      }`}\n                    />\n                  ))}\n                </div>\n                <div className=\"absolute top-4 left-4 right-4 flex justify-between\">\n                  <Button\n                    variant=\"secondary\"\n                    size=\"icon\"\n                    onClick={prevImage}\n                    className=\"rounded-full bg-background/90 hover:bg-background h-10 w-10\"\n                  >\n                    <ChevronLeft className=\"h-5 w-5\" />\n                  </Button>\n                  <Button\n                    variant=\"secondary\"\n                    size=\"icon\"\n                    onClick={nextImage}\n                    className=\"rounded-full bg-background/90 hover:bg-background h-10 w-10\"\n                  >\n                    <ChevronRight className=\"h-5 w-5\" />\n                  </Button>\n                </div>\n              </>\n            )}\n          </div>\n        </SheetContent>\n      </Sheet>\n    </>\n  );\n};\n\nconst HotelDetailsPage = () => {\n  const { userId, isAuthenticated } = useAuth();\n  const { id } = useParams();\n  const navigate = useNavigate();\n  \n  // Combined state for better performance\n  const [appState, setAppState] = useState({\n    hotel: null,\n    loading: true,\n    error: null,\n    dataLoaded: false, // Track if initial data is loaded\n    criticalDataLoaded: false, // Track if critical hotel data is loaded\n  });\n  \n  const [uiState, setUiState] = useState({\n    currentImageIndex: 0,\n    isFavorite: false,\n    showImageModal: false,\n    reviewSheetOpen: false,\n  });\n\n  // Separate state for room image modal to avoid conflicts\n  const [roomImageModal, setRoomImageModal] = useState({\n    isOpen: false,\n    selectedImage: null,\n  });\n\n  // Rooms state\n  const [roomsState, setRoomsState] = useState({\n    availableRooms: [],\n    paginationData: null,\n    currentPage: 0,\n    loading: false,\n  });\n\n  // Testimonials state\n  const [testimonialsState, setTestimonialsState] = useState({\n    testimonials: [],\n    loading: false,\n    error: null,\n    pagination: null,\n    currentPage: 0,\n  });\n\n  // Refs\n  const roomsSectionRef = useRef(null);\n  const isInitialLoad = useRef(true);\n  const abortControllerRef = useRef(null);\n  const hasInitialDataLoaded = useRef(false);\n\n  // Amenity icons mapping\n  const amenityIcons = {\n    wifi: Wifi,\n    parking: Car,\n    breakfast: Coffee,\n    restaurant: Utensils,\n    bathroom: Bath,\n    ac: AirVent,\n    default: CheckCircle,\n  };\n\n\n  // Optimized data fetching with single API call for initial load\n  const fetchInitialData = useCallback(async () => {\n    if (!id || hasInitialDataLoaded.current) return;\n\n    // Cancel previous request if exists\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n    abortControllerRef.current = new AbortController();\n\n    try {\n      setAppState(prev => ({ ...prev, loading: true, error: null }));\n      setRoomsState(prev => ({ ...prev, loading: true }));\n      setTestimonialsState(prev => ({ ...prev, loading: true, error: null }));\n\n      // Fetch hotel data first (critical for page to function)\n      const hotelResponse = await api.get(`/hotels/details/${id}`, { \n        signal: abortControllerRef.current.signal \n      });\n      \n      // Update hotel state immediately once we have the critical data\n      setAppState(prev => ({\n        ...prev,\n        hotel: hotelResponse.data,\n        criticalDataLoaded: true,\n      }));\n      \n      // Mark that we've loaded initial data to prevent re-fetching\n      hasInitialDataLoaded.current = true;\n\n      // Fetch secondary data in parallel (rooms and testimonials)\n      // These can fail without breaking the page\n      const [roomsResult, testimonialsResult] = await Promise.allSettled([\n        api.get(`/rooms/available/${id}?page=0&size=3`, { signal: abortControllerRef.current.signal }),\n        api.get(`/reviews/hotel/${id}/testimonials/paginated?page=0&size=3`, { signal: abortControllerRef.current.signal })\n      ]);\n\n      // Handle rooms data\n      if (roomsResult.status === 'fulfilled') {\n        setRoomsState(prev => ({\n          ...prev,\n          availableRooms: roomsResult.value.data.content || [],\n          paginationData: roomsResult.value.data,\n          loading: false,\n        }));\n      } else {\n        console.error(\"Error fetching rooms:\", roomsResult.reason);\n        setRoomsState(prev => ({ ...prev, loading: false }));\n      }\n\n      // Handle testimonials data\n      if (testimonialsResult.status === 'fulfilled') {\n        setTestimonialsState(prev => ({\n          ...prev,\n          testimonials: testimonialsResult.value.data.content || [],\n          pagination: testimonialsResult.value.data,\n          loading: false,\n        }));\n      } else {\n        console.error(\"Error fetching testimonials:\", testimonialsResult.reason);\n        setTestimonialsState(prev => ({ \n          ...prev, \n          loading: false, \n          error: \"Failed to load reviews\" \n        }));\n      }\n      // Set loading to false only after all data fetching attempts are complete\n      setAppState(prev => ({\n        ...prev,\n        loading: false,\n        dataLoaded: true,\n      }));\n\n    } catch (err) {\n      if (err.name === 'AbortError') {\n        return; // Ignore aborted requests\n      }\n      \n      console.error(\"Error fetching hotel details:\", err);\n      \n      // Only set hotel error when hotel details specifically fail\n      setAppState(prev => ({\n        ...prev,\n        error: \"Failed to load hotel details\",\n        loading: false,\n      }));\n      setRoomsState(prev => ({ ...prev, loading: false }));\n      setTestimonialsState(prev => ({ ...prev, loading: false }));\n    }\n  }, [id]);\n\n  // Separate function for rooms pagination\n  const fetchRooms = useCallback(async (page) => {\n    if (!id) return;\n\n    try {\n      setRoomsState(prev => ({ ...prev, loading: true }));\n      const response = await api.get(`/rooms/available/${id}?page=${page}&size=3`);\n      \n      setRoomsState(prev => ({\n        ...prev,\n        availableRooms: response.data.content || [],\n        paginationData: response.data,\n        currentPage: page,\n        loading: false,\n      }));\n    } catch (err) {\n      console.error(\"Error fetching rooms:\", err);\n      setRoomsState(prev => ({ ...prev, loading: false }));\n    }\n  }, [id]);\n\n  // Separate function for testimonials pagination\n  const fetchTestimonials = useCallback(async (page) => {\n    if (!id) return;\n\n    try {\n      setTestimonialsState(prev => ({ ...prev, loading: true, error: null }));\n      const response = await api.get(`/reviews/hotel/${id}/testimonials/paginated?page=${page}&size=3`);\n      \n      setTestimonialsState(prev => ({\n        ...prev,\n        testimonials: response.data.content || [],\n        pagination: response.data,\n        currentPage: page,\n        loading: false,\n      }));\n    } catch (err) {\n      console.error(\"Error fetching testimonials:\", err);\n      setTestimonialsState(prev => ({\n        ...prev,\n        error: \"Failed to load testimonials\",\n        loading: false,\n      }));\n    }\n  }, [id]);\n\n  // Reset state when hotel ID changes\n  useEffect(() => {\n    hasInitialDataLoaded.current = false;\n    setAppState({\n      hotel: null,\n      loading: true,\n      error: null,\n      dataLoaded: false,\n      criticalDataLoaded: false,\n    });\n    setRoomsState({\n      availableRooms: [],\n      paginationData: null,\n      currentPage: 0,\n      loading: false,\n    });\n    setTestimonialsState({\n      testimonials: [],\n      loading: false,\n      error: null,\n      pagination: null,\n      currentPage: 0,\n    });\n  }, [id]);\n\n  // Initial data load effect\n  useEffect(() => {\n    fetchInitialData();\n    \n    // Cleanup function\n    return () => {\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, [fetchInitialData]);\n\n  // Room pagination effect - track page changes after initial load\n  const [hasNavigatedFromInitialPage, setHasNavigatedFromInitialPage] = useState(false);\n  \n  useEffect(() => {\n    if (appState.criticalDataLoaded && hasNavigatedFromInitialPage) {\n      fetchRooms(roomsState.currentPage);\n    }\n  }, [roomsState.currentPage, fetchRooms, appState.criticalDataLoaded, hasNavigatedFromInitialPage]);\n\n  // Testimonials pagination effect - only when page changes, not on initial load\n  useEffect(() => {\n    if (appState.criticalDataLoaded && testimonialsState.currentPage > 0) {\n      fetchTestimonials(testimonialsState.currentPage);\n    }\n  }, [testimonialsState.currentPage, fetchTestimonials, appState.criticalDataLoaded]);\n\n  // Scroll effect for rooms\n  useEffect(() => {\n    if (isInitialLoad.current) {\n      isInitialLoad.current = false;\n    } else if (roomsState.availableRooms.length > 0) {\n      roomsSectionRef.current?.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"start\",\n      });\n    }\n  }, [roomsState.availableRooms]);\n\n  // Memoized UI handlers\n  const nextImage = useCallback(() => {\n    if (appState.hotel?.photoUrls?.length) {\n      setUiState(prev => ({\n        ...prev,\n        currentImageIndex: prev.currentImageIndex === appState.hotel.photoUrls.length - 1 \n          ? 0 \n          : prev.currentImageIndex + 1\n      }));\n    }\n  }, [appState.hotel?.photoUrls?.length]);\n\n  const prevImage = useCallback(() => {\n    if (appState.hotel?.photoUrls?.length) {\n      setUiState(prev => ({\n        ...prev,\n        currentImageIndex: prev.currentImageIndex === 0 \n          ? appState.hotel.photoUrls.length - 1 \n          : prev.currentImageIndex - 1\n      }));\n    }\n  }, [appState.hotel?.photoUrls?.length]);\n\n  const handlePageChange = useCallback((page) => {\n    setHasNavigatedFromInitialPage(true);\n    setRoomsState(prev => ({ ...prev, currentPage: page }));\n  }, []);\n\n  const handleShare = useCallback(async () => {\n    if (navigator.share) {\n      try {\n        await navigator.share({\n          title: appState.hotel.name,\n          text: `Check out ${appState.hotel.name} in ${appState.hotel.locality && `${appState.hotel.locality}, `}${appState.hotel.district}, Bhutan`,\n          url: window.location.href,\n        });\n      } catch (err) {\n        console.log(\"Error sharing:\", err);\n      }\n    } else {\n      // Fallback to clipboard\n      navigator.clipboard.writeText(window.location.href);\n    }\n  }, [appState.hotel?.name, appState.hotel?.district]);\n\n  const openReviewSheet = useCallback(() => {\n    setUiState(prev => ({ ...prev, reviewSheetOpen: true }));\n  }, []);\n\n  const closeReviewSheet = useCallback(() => {\n    setUiState(prev => ({ ...prev, reviewSheetOpen: false }));\n  }, []);\n\n  const handleReviewSubmitSuccess = useCallback(() => {\n    setUiState(prev => ({ ...prev, reviewSheetOpen: false }));\n    // Refresh testimonials after successful review submission\n    fetchTestimonials(testimonialsState.currentPage);\n  }, [fetchTestimonials, testimonialsState.currentPage]);\n\n  const handleWhatsAppClick = useCallback(() => {\n    if (!appState.hotel?.phone) {\n      console.warn('No hotel phone number available');\n      return;\n    }\n\n    try {\n      // Format phone number for WhatsApp (remove any non-digit characters and add country code if needed)\n      let phoneNumber = appState.hotel.phone.replace(/\\D/g, '');\n      \n      // If phone number doesn't start with country code, assume it's Bhutan (+975)\n      if (!phoneNumber.startsWith('975')) {\n        phoneNumber = '975' + phoneNumber;\n      }\n      \n      // Create WhatsApp URL with a default message\n      const message = encodeURIComponent(\n        `Hi! I'm interested in booking a room at ${appState.hotel.name}. Could you please provide more information about availability and rates?`\n      );\n      \n      const whatsappUrl = `https://wa.me/${phoneNumber}?text=${message}`;\n      \n      // Open WhatsApp in new tab\n      window.open(whatsappUrl, '_blank');\n    } catch (error) {\n      console.error('Error opening WhatsApp:', error);\n    }\n  }, [appState.hotel?.phone, appState.hotel?.name]);\n\n  // Loading state - show YakRooms loader while fetching critical hotel data\n  if (appState.loading && !appState.criticalDataLoaded) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center space-y-4\">\n          <YakRoomsLoader \n            size={112} \n            showTagline={false} \n            loadingText=\"\"\n            className=\"mb-4\"\n          />\n        </div>\n      </div>\n    );\n  }\n\n  // Error state - only show when hotel details fetch fails (not secondary data)\n  if (appState.error && !appState.criticalDataLoaded) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center p-4 bg-background\">\n        <Card className=\"w-full max-w-md text-center\">\n          <CardHeader>\n            <CardTitle className=\"text-destructive\">\n              Something went wrong\n            </CardTitle>\n            <CardDescription>{appState.error || \"Hotel not found\"}</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            \n            <Button asChild>\n              <Link to=\"/\">\n                <Home className=\"mr-2 h-4 w-4\" /> Return Home\n              </Link>\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const transformedHotel = {\n    ...appState.hotel,\n    images:\n      appState.hotel.photoUrls?.length > 0\n        ? appState.hotel.photoUrls\n        : [\"https://via.placeholder.com/1000x600?text=No+Hotel+Image\"],\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Enhanced header with Bhutanese elements */}\n      <header className=\"sticky top-0 z-20 border-b border-orange-200 bg-white/95 backdrop-blur-md shadow-lg\">\n        <div className=\"mx-auto flex h-16 sm:h-20 items-center justify-between px-4 sm:px-6\">\n          {/* Left side - Navigation */}\n          <div className=\"flex items-center gap-2 sm:gap-3\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => navigate(-1)}\n              className=\"p-2 hover:bg-orange-50 rounded-xl transition-colors duration-200\"\n            >\n              <ArrowLeft className=\"h-5 w-5 text-orange-600\" />\n              <span className=\"hidden sm:inline ml-2 font-medium text-gray-700\">Back</span>\n            </Button>\n            <Button asChild variant=\"ghost\" className=\"p-2 hover:bg-orange-50 rounded-xl transition-colors duration-200\">\n              <Link to=\"/\" className=\"flex items-center gap-2\">\n                <span className=\"font-medium text-gray-700\">Home</span>\n              </Link>\n            </Button>\n          </div>\n\n          {/* Center - Enhanced title */}\n          <div className=\"text-center\">\n            <h1 className=\"text-lg sm:text-xl font-bold text-gray-900 truncate px-2\">\n              {appState.hotel.name}\n            </h1>\n            <div className=\"flex items-center justify-center gap-1 mt-1\">\n              <Mountain className=\"h-3 w-3 text-orange-500\" />\n              <span className=\"text-xs text-gray-600\">Bhutanese Hospitality</span>\n              <Sparkles className=\"h-3 w-3 text-yellow-500\" />\n            </div>\n          </div>\n\n          {/* Right side - Actions */}\n          <div className=\"flex items-center gap-2\">\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={handleShare}\n                    className=\"h-10 w-10 hover:bg-orange-50 rounded-xl transition-colors duration-200\"\n                  >\n                    <Share2 className=\"h-5 w-5 text-orange-600\" />\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent side=\"bottom\" className=\"text-xs bg-gray-900 text-white\">\n                  Share this hotel\n                </TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n          </div>\n        </div>\n      </header>\n\n      {/* Main content */}\n      <main className=\"container mx-auto px-4 sm:px-6 py-6 lg:py-8 space-y-8\">\n        {/* Enhanced Hero Section */}\n        <Card className=\"overflow-hidden rounded-2xl shadow-2xl border-0 bg-white\">\n          <div className=\"relative h-64 sm:h-80 md:h-96 lg:h-[500px] group\">\n            <img\n              src={transformedHotel.images[uiState.currentImageIndex]}\n              alt={transformedHotel.name}\n              className=\"h-full w-full object-cover cursor-pointer transition-transform duration-700 group-hover:scale-105\"\n              onClick={() => setUiState(prev => ({ ...prev, showImageModal: true }))}\n            />\n            \n            {/* Enhanced gradient overlay */}\n            <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent\" />\n\n            {/* Image Navigation */}\n            {transformedHotel.images.length > 1 && (\n              <>\n                <Button\n                  variant=\"secondary\"\n                  size=\"icon\"\n                  onClick={prevImage}\n                  className=\"absolute left-4 top-1/2 -translate-y-1/2 rounded-full bg-white/90 hover:bg-white h-10 w-10 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110\"\n                >\n                  <ChevronLeft className=\"h-5 w-5\" />\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  size=\"icon\"\n                  onClick={nextImage}\n                  className=\"absolute right-4 top-1/2 -translate-y-1/2 rounded-full bg-white/90 hover:bg-white h-10 w-10 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110\"\n                >\n                  <ChevronRight className=\"h-5 w-5\" />\n                </Button>\n              </>\n            )}\n\n            {/* Enhanced Image Indicators */}\n            <div className=\"absolute bottom-4 left-0 right-0 flex justify-center gap-2\">\n              {transformedHotel.images.map((_, index) => (\n                <button\n                  key={index}\n                  onClick={() => setUiState(prev => ({ ...prev, currentImageIndex: index }))}\n                  className={`h-3 w-3 rounded-full transition-all duration-300 ${\n                    uiState.currentImageIndex === index\n                      ? \"bg-white scale-125 shadow-lg ring-2 ring-white/50\"\n                      : \"bg-white/50 hover:bg-white/75 hover:scale-110\"\n                  }`}\n                  aria-label={`Go to image ${index + 1}`}\n                />\n              ))}\n            </div>\n\n            {/* Enhanced Image Counter */}\n            <div className=\"absolute top-4 right-4 bg-black/70 text-white px-3 py-1.5 rounded-full text-sm font-medium backdrop-blur-sm\">\n              {uiState.currentImageIndex + 1} / {transformedHotel.images.length}\n            </div>\n\n            {/* Hotel Type Badge */}\n            <div className=\"absolute top-4 left-4\">\n              <Badge className=\"bg-white/95 backdrop-blur-md shadow-lg border-0 text-sm font-semibold px-3 py-1.5 text-orange-600 rounded-full\">\n                <Building2 className=\"w-4 h-4 mr-1\" />\n                {(transformedHotel.hotelType || \"Hotel\").replace(/_/g, \" \")}\n              </Badge>\n            </div>\n          </div>\n\n          <CardContent className=\"px-6 pt-6 lg:px-8 lg:pt-8 bg-gradient-to-br from-white to-orange-50/30\">\n            <div className=\"space-y-6\">\n              {/* Hotel Header Section */}\n              <div className=\"text-center space-y-4\">\n                <div className=\"space-y-3\">\n                  <h1 className=\"text-2xl sm:text-3xl font-bold tracking-tight text-gray-900 leading-tight\">\n                    {transformedHotel.name}\n                  </h1>\n\n                  <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-center gap-4\">\n                    <div className=\"flex items-center justify-center group\">\n                      <div className=\"flex items-center justify-center w-12 h-12 rounded-full bg-gradient-to-br from-blue-100 to-indigo-100 mr-3 group-hover:shadow-lg transition-all duration-300 group-hover:scale-110\">\n                        <MapPin className=\"h-6 w-6 text-blue-600 flex-shrink-0\" />\n                      </div>\n                      <span className=\"text-base text-gray-700 font-medium group-hover:text-gray-900 transition-colors duration-300\">\n                        {transformedHotel.locality && `${transformedHotel.locality}, `}{transformedHotel.district}, Bhutan\n                      </span>\n                    </div>\n\n                    <div className=\"flex items-center justify-center group\">\n                      <div className=\"flex items-center justify-center w-12 h-12 rounded-full bg-gradient-to-br from-green-100 to-emerald-100 mr-3 group-hover:shadow-lg transition-all duration-300 group-hover:scale-110\">\n                        <Phone className=\"h-6 w-6 text-green-600 flex-shrink-0\" />\n                      </div>\n                      <a\n                        href={`tel:${transformedHotel.phone}`}\n                        className=\"text-base text-gray-700 font-medium hover:text-green-600 transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 rounded-md px-2 py-1\"\n                        aria-label={`Call ${transformedHotel.name} at ${transformedHotel.phone}`}\n                      >\n                        {transformedHotel.phone}\n                      </a>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-center gap-4\">\n                  {transformedHotel.averageRating > 0 && (\n                    <div className=\"flex items-center gap-2 bg-white/80 backdrop-blur-sm rounded-full px-4 py-2 shadow-lg\">\n                      <StarRating \n                        rating={transformedHotel.averageRating} \n                        size={18} \n                        showRating={true}\n                        className=\"flex-shrink-0\"\n                      />\n                      <span className=\"text-sm text-gray-600 font-medium\">\n                        Avg. Rating\n                      </span>\n                    </div>\n                  )}\n\n                  <Badge className=\"bg-gradient-to-r from-orange-500 to-red-500 text-white px-4 py-2 rounded-full shadow-lg\">\n                    <Shield className=\"w-4 h-4 mr-1\" />\n                    Verified Hotel\n                  </Badge>\n\n                  {isAuthenticated && (\n                    <Button\n                      onClick={openReviewSheet}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"flex items-center gap-2 text-blue-600 border-blue-200 hover:bg-blue-50 hover:border-blue-300 transition-colors duration-200 cursor-pointer rounded-full px-4 py-2\"\n                    >\n                      <Star className=\"h-4 w-4\" />\n                      Rate & Review\n                    </Button>\n                  )}\n                </div>\n              </div>\n\n\n              <div className=\"relative\">\n                <div className=\"prose prose-slate prose-lg max-w-none text-center\">\n                  <p className=\"text-gray-700 leading-relaxed text-base font-normal tracking-wide\">\n                    {transformedHotel.description}\n                  </p>\n                </div>\n\n                {/* Decorative elements */}\n                <div className=\"absolute -top-4 -left-4 w-20 h-20 bg-gradient-to-br from-orange-100/30 to-red-100/30 rounded-full blur-xl -z-10\"></div>\n                <div className=\"absolute -bottom-4 -right-4 w-16 h-16 bg-gradient-to-br from-blue-100/30 to-purple-100/30 rounded-full blur-xl -z-10\"></div>\n              </div>\n\n              {/* Enhanced Check-in/Check-out Times */}\n              <div className=\"mt-8 pt-6 border-t border-orange-200\">\n                <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-center gap-8\">\n                  {/* Check-in Time */}\n                  <div className=\"flex items-center gap-4 group\">\n                    <div className=\"flex items-center justify-center w-14 h-14 rounded-full bg-gradient-to-br from-green-100 to-emerald-100 group-hover:from-green-200 group-hover:to-emerald-200 transition-all duration-300 group-hover:scale-110 group-hover:shadow-lg\">\n                      <LogIn className=\"h-7 w-7 text-green-600 group-hover:text-green-700 transition-colors duration-300\" />\n                    </div>\n                    <div className=\"text-center sm:text-left\">\n                      <h4 className=\"text-base font-semibold text-gray-800 group-hover:text-gray-900 transition-colors duration-300\">Check-in Time</h4>\n                      <p className=\"text-sm text-gray-600 group-hover:text-gray-700 transition-colors duration-300\">\n                        {formatTimeWithDescription(appState.hotel?.checkinTime, 'checkin')}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  {/* Check-out Time */}\n                  <div className=\"flex items-center gap-4 group\">\n                    <div className=\"flex items-center justify-center w-14 h-14 rounded-full bg-gradient-to-br from-orange-100 to-red-100 group-hover:from-orange-200 group-hover:to-red-200 transition-all duration-300 group-hover:scale-110 group-hover:shadow-lg\">\n                      <LogOut className=\"h-7 w-7 text-orange-600 group-hover:text-orange-700 transition-colors duration-300\" />\n                    </div>\n                    <div className=\"text-center sm:text-left\">\n                      <h4 className=\"text-base font-semibold text-gray-800 group-hover:text-gray-900 transition-colors duration-300\">Check-out Time</h4>\n                      <p className=\"text-sm text-gray-600 group-hover:text-gray-700 transition-colors duration-300\">\n                        {formatTimeWithDescription(appState.hotel?.checkoutTime, 'checkout')}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"col-span-1 lg:col-span-2 space-y-8\">\n            {/* Enhanced Amenities Section */}\n            <Card className=\"rounded-2xl shadow-xl border-0 bg-gradient-to-br from-white to-orange-50/30\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"flex items-center gap-3 text-xl font-bold text-gray-900\">\n                  <div className=\"w-10 h-10 rounded-full bg-gradient-to-r from-orange-500 to-red-500 flex items-center justify-center\">\n                    <CheckCircle className=\"h-6 w-6 text-white\" />\n                  </div>\n                  Hotel Amenities\n                </CardTitle>\n                <CardDescription className=\"text-base text-gray-600\">\n                  Everything you need for a comfortable and memorable stay\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3\">\n                  {appState.hotel.amenities?.map((amenity, index) => (\n                    <div\n                      key={index}\n                      className=\"group\"\n                    >\n                      <div className=\"bg-white/80 backdrop-blur-sm border border-orange-200 rounded-xl px-4 py-3 text-center hover:bg-orange-50 hover:border-orange-300 transition-all duration-300 hover:scale-105 hover:shadow-lg\">\n                        <span className=\"text-sm font-semibold text-gray-700 group-hover:text-orange-700 transition-colors duration-300\">\n                          {amenity}\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Enhanced Testimonials Section */}\n            <Card className=\"rounded-2xl shadow-xl border-0 bg-gradient-to-br from-white to-blue-50/30\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"flex items-center gap-3 text-xl font-bold text-gray-900\">\n                  <div className=\"w-10 h-10 rounded-full bg-gradient-to-r from-blue-500 to-indigo-500 flex items-center justify-center\">\n                    <Star className=\"h-6 w-6 text-white\" />\n                  </div>\n                  Guest Reviews\n                </CardTitle>\n                <CardDescription className=\"text-base text-gray-600\">\n                  What our guests say about their experience\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                {testimonialsState.loading ? (\n                  <div className=\"flex justify-center py-8\">\n                    <YakRoomsLoader \n                      size={40} \n                      showTagline={false} \n                      loadingText=\"\"\n                      className=\"mb-2\"\n                    />\n                  </div>\n                ) : testimonialsState.error ? (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      {testimonialsState.error}\n                    </p>\n                  </div>\n                ) : testimonialsState.testimonials.length > 0 ? (\n                  <div className=\"space-y-6\">\n                    {testimonialsState.testimonials.map((testimonial) => (\n                      <div\n                        key={testimonial.id}\n                        className=\"bg-white/80 backdrop-blur-sm border border-blue-200 rounded-xl p-6 hover:shadow-lg transition-all duration-300 hover:scale-[1.02]\"\n                      >\n                        <div className=\"flex items-start gap-4\">\n                          <div className=\"flex-shrink-0\">\n                            <div className=\"w-12 h-12 rounded-full bg-gradient-to-br from-blue-100 to-indigo-100 flex items-center justify-center shadow-lg\">\n                              {testimonial.userProfilePicUrl ? (\n                                <img\n                                  src={testimonial.userProfilePicUrl}\n                                  alt={testimonial.userName}\n                                  className=\"w-12 h-12 rounded-full object-cover\"\n                                />\n                              ) : (\n                                <span className=\"text-lg font-bold text-blue-600\">\n                                  {testimonial.userName?.charAt(0)?.toUpperCase() || 'G'}\n                                </span>\n                              )}\n                            </div>\n                          </div>\n\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-3\">\n                              <div className=\"flex flex-col sm:flex-row sm:items-center gap-3\">\n                                <span className=\"text-base font-semibold text-gray-900\">\n                                  {testimonial.userName}\n                                </span>\n                                <StarRating \n                                  rating={testimonial.rating} \n                                  size={16} \n                                  showRating={false}\n                                  className=\"flex-shrink-0\"\n                                />\n                              </div>\n                              \n                              <span className=\"text-sm text-gray-500 sm:text-right\">\n                                {new Date(testimonial.createdAt).toLocaleDateString()}\n                              </span>\n                            </div>\n                            \n                            {testimonial.comment && (\n                              <p className=\"text-base text-gray-700 leading-relaxed italic\">\n                                \"{testimonial.comment}\"\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                    \n                    {testimonialsState.pagination && testimonialsState.pagination.totalPages > 1 && (\n                      <div className=\"flex justify-center pt-6 pb-2\">\n                        {testimonialsState.currentPage < testimonialsState.pagination.totalPages - 1 ? (\n                          <Button\n                            variant=\"outline\"\n                            onClick={() => setTestimonialsState(prev => ({ \n                              ...prev, \n                              currentPage: prev.currentPage + 1 \n                            }))}\n                            className=\"flex items-center gap-2 px-6 py-2\"\n                          >\n                            Load More...\n                          </Button>\n                        ) : (\n                          <p className=\"text-sm text-muted-foreground\"></p>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Star className=\"h-8 w-8 text-gray-300 mx-auto mb-2\" />\n                    <p className=\"text-sm text-muted-foreground\">\n                      No reviews yet. Be the first to share your experience!\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Enhanced Rooms Section */}\n            <div ref={roomsSectionRef} className=\"space-y-8 scroll-mt-24 mt-16\">\n              <div className=\"text-center space-y-3\">\n                <div className=\"flex items-center justify-center gap-3\">\n                  <div className=\"w-10 h-10 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 flex items-center justify-center\">\n                    <Building2 className=\"h-6 w-6 text-white\" />\n                  </div>\n                  <h2 className=\"text-2xl font-bold text-gray-900\">\n                    Available Rooms\n                  </h2>\n                </div>\n                <p className=\"text-base text-gray-600\">\n                  Choose from our selection of comfortable and beautifully designed rooms\n                </p>\n                {roomsState.loading && (\n                  <div className=\"flex justify-center\">\n                    <YakRoomsLoader \n                      size={40} \n                      showTagline={false} \n                      loadingText=\"\"\n                      className=\"mb-2\"\n                    />\n                  </div>\n                )}\n              </div>\n\n              <div className=\"space-y-6 min-h-[400px]\">\n                {roomsState.availableRooms.length > 0\n                  ? roomsState.availableRooms.map((room) => (\n                      <Card\n                        key={room.id}\n                        className=\"overflow-hidden transition-all duration-500 hover:shadow-2xl hover:-translate-y-2 border-0 shadow-xl rounded-2xl bg-gradient-to-br from-white to-green-50/30 group\"\n                      >\n                        <div className=\"flex flex-col lg:flex-row\">\n                          <div className=\"lg:w-1/3 relative flex-shrink-0 overflow-hidden\">\n                            <RoomImageCarousel\n                              images={\n                                room.imageUrl && Array.isArray(room.imageUrl) && room.imageUrl.length > 0\n                                  ? room.imageUrl\n                                  : [`https://via.placeholder.com/500x300?text=Room+${room.roomNumber}`]\n                              }\n                              roomNumber={room.roomNumber}\n                              roomType={room.roomType}\n                            />\n                          </div>\n\n                          <div className=\"flex flex-1 flex-col justify-between p-6\">\n                            <div className=\"space-y-4\">\n                              <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between gap-4\">\n                                <div className=\"space-y-2\">\n                                  <CardTitle className=\"text-xl\">\n                                    {room.roomType} - Room {room.roomNumber}\n                                  </CardTitle>\n                                  <CardDescription className=\"text-sm\">\n                                    - {room.description}\n                                  </CardDescription>\n                                </div>\n                                <div className=\"text-right flex-shrink-0\">\n                                  <div className=\"text-2xl font-bold text-yellow-500\">\n                                    {appState.hotel.lowestPrice ? (\n                                      <>\n                                        <span className=\"text-base font-normal text-muted-foreground\">\n                                          From{\" \"}\n                                        </span>\n                                        Nu.{\" \"}\n                                        {new Intl.NumberFormat(\"en-IN\").format(\n                                          appState.hotel.lowestPrice\n                                        )}\n                                      </>\n                                    ) : (\n                                      <>\n                                        Nu.{\" \"}\n                                        {new Intl.NumberFormat(\"en-IN\").format(\n                                          room.price\n                                        )}\n                                      </>\n                                    )}\n                                  </div>\n                                  <p className=\"text-sm text-muted-foreground\">\n                                    per night\n                                  </p>\n                                </div>\n                              </div>\n\n                              {room.amenities?.length > 0 && (\n                                <div>\n                                  <h4 className=\"font-medium text-sm mb-3 text-muted-foreground\">\n                                    Room Amenities\n                                  </h4>\n                                  <div className=\"flex flex-wrap gap-2\">\n                                    {room.amenities.map((amenity, index) => (\n                                      <Badge\n                                        key={index}\n                                        variant=\"outline\"\n                                        className=\"text-xs\"\n                                      >\n                                        {amenity}\n                                      </Badge>\n                                    ))}\n                                  </div>\n                                </div>\n                              )}\n                            </div>\n\n                            {/* Room Image Preview Section */}\n                            {room.imageUrl && Array.isArray(room.imageUrl) && room.imageUrl.length > 1 && (\n                              <div className=\"mt-6 pt-4 border-t\">\n                                <div className=\"mb-4\">\n                                  <h4 className=\"text-sm font-medium text-muted-foreground mb-3\">\n                                    Room Photos\n                                  </h4>\n                                  <div className=\"flex gap-2 overflow-x-auto pb-2\">\n                                    {room.imageUrl.map((image, index) => (\n                                      <button\n                                        key={index}\n                                        onClick={() => {\n                                          setRoomImageModal({\n                                            isOpen: true,\n                                            selectedImage: image\n                                          });\n                                        }}\n                                        className=\"flex-shrink-0 relative group transition-all duration-200 hover:ring-2 ring-muted-foreground/30 ring-offset-1\"\n                                      >\n                                        <img\n                                          src={image}\n                                          alt={`Room ${room.roomNumber} - Photo ${index + 1}`}\n                                          className=\"h-16 w-24 object-cover rounded-md transition-all duration-200 opacity-70 hover:opacity-100 hover:scale-105\"\n                                        />\n                                      </button>\n                                    ))}\n                                  </div>\n                                </div>\n                              </div>\n                            )}\n\n                            <div className=\"mt-6 pt-4 border-t\">\n                              <RoomBookingCard room={room} hotelId={id} />\n                            </div>\n                          </div>\n                        </div>\n                      </Card>\n                    ))\n                  : !roomsState.loading && (\n                      <Card>\n                        <CardContent className=\"pt-6\">\n                          <div className=\"text-center py-12\">\n                            <Building2 className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                            <h3 className=\"text-lg font-medium mb-2\">\n                              No rooms available\n                            </h3>\n                            <p className=\"text-base text-muted-foreground\">\n                              Please try different dates or contact the hotel\n                              directly.\n                            </p>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )}\n              </div>\n\n              {/* Enhanced Pagination */}\n              {roomsState.paginationData && roomsState.paginationData.totalPages > 1 && (\n                <div className=\"flex justify-center pt-4\">\n                  <Pagination>\n                    <PaginationContent>\n                      <PaginationItem>\n                        <PaginationPrevious\n                          href=\"#\"\n                          onClick={(e) => {\n                            e.preventDefault();\n                            if (roomsState.currentPage > 0)\n                              handlePageChange(roomsState.currentPage - 1);\n                          }}\n                          className={\n                            roomsState.currentPage === 0\n                              ? \"pointer-events-none opacity-50\"\n                              : undefined\n                          }\n                        />\n                      </PaginationItem>\n                      {[...Array(roomsState.paginationData.totalPages).keys()].map(\n                        (page) => (\n                          <PaginationItem key={page}>\n                            <PaginationLink\n                              href=\"#\"\n                              isActive={roomsState.currentPage === page}\n                              onClick={(e) => {\n                                e.preventDefault();\n                                handlePageChange(page);\n                              }}\n                            >\n                              {page + 1}\n                            </PaginationLink>\n                          </PaginationItem>\n                        )\n                      )}\n                      <PaginationItem>\n                        <PaginationNext\n                          href=\"#\"\n                          onClick={(e) => {\n                            e.preventDefault();\n                            if (roomsState.currentPage < roomsState.paginationData.totalPages - 1) {\n                              handlePageChange(roomsState.currentPage + 1);\n                            }\n                          }}\n                          className={\n                            roomsState.currentPage >= roomsState.paginationData.totalPages - 1\n                              ? \"pointer-events-none opacity-50\"\n                              : undefined\n                          }\n                        />\n                      </PaginationItem>\n                    </PaginationContent>\n                  </Pagination>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Enhanced Sidebar */}\n          <aside className=\"hidden lg:block space-y-6\">\n            {/* Quick Info Card */}\n            <Card className=\"mt-24 rounded-2xl shadow-xl border-0 bg-gradient-to-br from-white to-purple-50/30\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"flex items-center gap-3 text-xl font-bold text-gray-900\">\n                  <div className=\"w-10 h-10 rounded-full bg-gradient-to-r from-purple-500 to-indigo-500 flex items-center justify-center\">\n                    <Calendar className=\"h-6 w-6 text-white\" />\n                  </div>\n                  Quick Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center p-3 bg-white/80 backdrop-blur-sm rounded-xl border border-purple-200\">\n                    <span className=\"text-sm font-semibold text-gray-700\">Hotel Type</span>\n                    <span className=\"text-sm font-medium text-purple-600\">\n                      {(appState.hotel.hotelType || \"Hotel\").replace(/_/g, \" \")}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center p-3 bg-white/80 backdrop-blur-sm rounded-xl border border-purple-200\">\n                    <span className=\"text-sm font-semibold text-gray-700\">Location</span>\n                    <span className=\"text-sm font-medium text-purple-600\">\n                      {appState.hotel.locality && `${appState.hotel.locality}, `}{appState.hotel.district}\n                    </span>\n                  </div>\n                  {appState.hotel.address && (\n                    <div className=\"flex justify-between items-center p-3 bg-white/80 backdrop-blur-sm rounded-xl border border-purple-200\">\n                      <span className=\"text-sm font-semibold text-gray-700\">Address</span>\n                      <span className=\"text-sm font-medium text-purple-600\">{appState.hotel.address}</span>\n                    </div>\n                  )}\n                  <div className=\"flex justify-between items-center p-3 bg-white/80 backdrop-blur-sm rounded-xl border border-purple-200\">\n                    <span className=\"text-sm font-semibold text-gray-700\">Total Rooms</span>\n                    <span className=\"text-sm font-medium text-purple-600\">\n                      {roomsState.availableRooms.length}+ available\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center p-3 bg-white/80 backdrop-blur-sm rounded-xl border border-purple-200\">\n                    <span className=\"text-sm font-semibold text-gray-700\">Check-in Time</span>\n                    <span className=\"text-sm font-medium text-purple-600\">{formatTime(appState.hotel?.checkinTime)}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center p-3 bg-white/80 backdrop-blur-sm rounded-xl border border-purple-200\">\n                    <span className=\"text-sm font-semibold text-gray-700\">Check-out Time</span>\n                    <span className=\"text-sm font-medium text-purple-600\">{formatTime(appState.hotel?.checkoutTime)}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </aside>\n        </div>\n      </main>\n\n      <Footer />\n\n      {/* Image Modal for mobile */}\n      <Sheet open={uiState.showImageModal} onOpenChange={(open) => \n        setUiState(prev => ({ ...prev, showImageModal: open }))\n      }>\n        <SheetContent side=\"bottom\" className=\"h-[90vh]\">\n          <SheetHeader>\n            <SheetTitle>{appState.hotel.name} - Images</SheetTitle>\n          </SheetHeader>\n          <div className=\"mt-6 relative h-full\">\n            <img\n              src={transformedHotel.images[uiState.currentImageIndex]}\n              alt={transformedHotel.name}\n              className=\"h-full w-full object-contain\"\n            />\n            {transformedHotel.images.length > 1 && (\n              <div className=\"absolute bottom-4 left-0 right-0 flex justify-center gap-2\">\n                {transformedHotel.images.map((_, index) => (\n                  <button\n                    key={index}\n                    onClick={() => setUiState(prev => ({ ...prev, currentImageIndex: index }))}\n                    className={`h-2 w-2 rounded-full transition-all ${\n                      uiState.currentImageIndex === index\n                        ? \"bg-primary scale-125\"\n                        : \"bg-muted-foreground/50\"\n                    }`}\n                  />\n                ))}\n              </div>\n            )}\n          </div>\n        </SheetContent>\n      </Sheet>\n\n      {/* Hotel Review Sheet */}\n      <HotelReviewSheet\n        isOpen={uiState.reviewSheetOpen}\n        userId={userId}\n        hotelId={id}\n        onSubmitSuccess={handleReviewSubmitSuccess}\n      />\n\n      {/* Room Image Modal */}\n      {roomImageModal.isOpen && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/80 backdrop-blur-sm\">\n          <div className=\"relative bg-white rounded-lg shadow-2xl overflow-hidden max-w-[95vw] max-h-[90vh]\">\n            {/* Close Button */}\n            <button\n              onClick={() => setRoomImageModal({ isOpen: false, selectedImage: null })}\n              className=\"absolute top-2 right-2 sm:top-4 sm:right-4 z-10 bg-white/90 hover:bg-white rounded-full p-1.5 sm:p-2 shadow-lg transition-colors duration-200\"\n            >\n              <X className=\"h-4 w-4 sm:h-5 sm:w-5 text-gray-700\" />\n            </button>\n            \n            {/* Image Container */}\n            <div className=\"flex items-center justify-center\">\n              {roomImageModal.selectedImage && (\n                <img\n                  src={roomImageModal.selectedImage}\n                  alt=\"Room Photo\"\n                  className=\"max-w-full max-h-[80vh] object-contain rounded-lg\"\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Enhanced Floating WhatsApp Button */}\n      {appState.hotel?.phone && (\n        <TooltipProvider>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <button\n                onClick={() => handleWhatsAppClick()}\n                className=\"fixed bottom-6 right-6 z-40 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white p-4 rounded-full shadow-2xl hover:shadow-3xl transition-all duration-300 hover:scale-110 group\"\n                aria-label={`Chat with ${appState.hotel.name} on WhatsApp`}\n              >\n                <MessageCircle className=\"h-6 w-6\" />\n                \n                {/* Enhanced pulse animation ring */}\n                <div className=\"absolute inset-0 rounded-full bg-green-400 animate-ping opacity-30\"></div>\n                <div className=\"absolute inset-0 rounded-full bg-green-300 animate-pulse opacity-20\"></div>\n                \n                {/* Enhanced WhatsApp branding */}\n                <div className=\"absolute -top-2 -right-2 bg-white rounded-full p-1.5 shadow-lg\">\n                  <svg className=\"h-5 w-5 text-green-500\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488\"/>\n                  </svg>\n                </div>\n              </button>\n            </TooltipTrigger>\n            <TooltipContent side=\"left\" className=\"bg-gray-900 text-white text-sm font-medium px-3 py-2\">\n              <p>Chat with {appState.hotel.name}</p>\n            </TooltipContent>\n          </Tooltip>\n        </TooltipProvider>\n      )}\n    </div>\n  );\n};\n\nexport default HotelDetailsPage;","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/HotelInfoForm.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'email' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":53,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"email"},"fix":{"range":[1753,1781],"text":""},"desc":"Remove unused variable 'email'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport { useAuth } from \"../authentication\";\nimport api from \"../../shared/services/Api\";\nimport { uploadFile, deleteFileByUrl } from \"../../shared/services/uploadService\";\nimport { CheckCircle, XCircle, Upload, Plus, X } from \"lucide-react\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/shared/components\";\nimport { Button } from \"@/shared/components\";\nimport { Input } from \"@/shared/components\";\nimport { Label } from \"@/shared/components\";\nimport { Textarea } from \"@/shared/components\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/shared/components\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/shared/components\";\nimport { Badge } from \"@/shared/components\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { toast } from \"sonner\";\nimport { getCategorizedAmenities } from \"../../shared/utils/amenitiesHelper\";\nimport { districts, getLocalitiesForDistrict } from \"../../shared/constants\";\n\nconst formSchema = z.object({\n  name: z.string().min(1, \"Hotel name is required\"),\n  hotelType: z.string().min(1, \"Hotel type is required\"),\n  district: z.string().min(1, \"District is required\"),\n  locality: z.string().min(1, \"Locality is required\"),\n  address: z.string().min(1, \"Address is required\"),\n  phone: z.string().min(1, \"Phone number is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  photoUrls: z.array(z.string()).optional(),\n  license: z.string().optional(),\n  amenities: z.array(z.string()).optional(),\n});\n\nconst HotelInfoForm = ({ hotel, onUpdate }) => {\n  const { email } = useAuth();\n  const [formData, setFormData] = useState({\n    ...hotel,\n    locality: hotel.locality || \"\",\n  });\n  const [isEditing, setIsEditing] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedAmenities, setSelectedAmenities] = useState(hotel.amenities || []);\n  const [availableAmenities] = useState(getCategorizedAmenities(\"hotel\"));\n  const [deletingImageIndex, setDeletingImageIndex] = useState(null);\n\n\n\n  const form = useForm({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: hotel.name || \"\",\n      hotelType: hotel.hotelType || \"\",\n      district: hotel.district || \"\",\n      locality: hotel.locality || \"\",\n      address: hotel.address || \"\",\n      phone: hotel.phone || \"\",\n      description: hotel.description || \"\",\n      photoUrls: hotel.photoUrls || [],\n      license: hotel.license || \"\",\n      amenities: hotel.amenities || [],\n    },\n  });\n\n  useEffect(() => {\n    setFormData({\n      ...hotel,\n      locality: hotel.locality || \"\",\n    });\n    setSelectedAmenities(hotel.amenities || []);\n    form.reset({\n      name: hotel.name || \"\",\n      hotelType: hotel.hotelType || \"\",\n      district: hotel.district || \"\",\n      locality: hotel.locality || \"\",\n      address: hotel.address || \"\",\n      phone: hotel.phone || \"\",\n      description: hotel.description || \"\",\n      photoUrls: hotel.photoUrls || [],\n      license: hotel.license || \"\",\n      amenities: hotel.amenities || [],\n    });\n  }, [hotel, form]);\n\n  const handleImageUpload = async (e) => {\n    const files = Array.from(e.target.files);\n    \n    // Validate file sizes (4MB limit per file)\n    const maxFileSize = 4 * 1024 * 1024; // 4MB in bytes\n    const oversizedFiles = files.filter(file => file.size > maxFileSize);\n    \n    if (oversizedFiles.length > 0) {\n      const fileNames = oversizedFiles.map(file => file.name).join(', ');\n      toast.error(`File size too large: ${fileNames}`, {\n        description: \"Each image must be smaller than 4MB. Please compress your images and try again.\",\n        duration: 8000\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const uploadPromises = files.map((file) => uploadFile(file, \"photos\"));\n      const results = await Promise.all(uploadPromises);\n      const newImageUrls = results.map((result) => result.url);\n\n      const updatedPhotoUrls = [...formData.photoUrls, ...newImageUrls];\n      setFormData((prev) => ({\n        ...prev,\n        photoUrls: updatedPhotoUrls,\n      }));\n      form.setValue(\"photoUrls\", updatedPhotoUrls);\n      toast.success(\"Images uploaded successfully.\", {\n        duration: 6000\n      });\n    } catch (err) {\n      toast.error(\"Failed to upload images. Please try again.\", {\n        duration: 6000\n      });\n      console.error(\"Image upload error:\", err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const removeImage = async (index) => {\n    const imageUrl = formData.photoUrls[index];\n    \n    if (!imageUrl) {\n      toast.error(\"No image URL found to delete\");\n      return;\n    }\n\n    setDeletingImageIndex(index);\n    \n    try {\n      // Delete the file from backend\n      const result = await deleteFileByUrl(imageUrl);\n      \n      if (result.success) {\n        // Remove from local state only after successful deletion\n        const updatedPhotoUrls = formData.photoUrls.filter((_, i) => i !== index);\n        setFormData((prev) => ({\n          ...prev,\n          photoUrls: updatedPhotoUrls,\n        }));\n        form.setValue(\"photoUrls\", updatedPhotoUrls);\n        \n        toast.success(result.message || \"Image deleted successfully\", {\n          duration: 6000\n        });\n      } else {\n        toast.error(result.message || \"Failed to delete image\", {\n          duration: 6000\n        });\n      }\n    } catch (error) {\n      console.error(\"Error deleting image:\", error);\n      toast.error(\"Failed to delete image. Please try again.\", {\n        duration: 6000\n      });\n    } finally {\n      setDeletingImageIndex(null);\n    }\n  };\n\n  const handleAmenityToggle = (amenity) => {\n    const updatedAmenities = selectedAmenities.includes(amenity)\n      ? selectedAmenities.filter((a) => a !== amenity)\n      : [...selectedAmenities, amenity];\n    \n    setSelectedAmenities(updatedAmenities);\n    form.setValue(\"amenities\", updatedAmenities);\n  };\n\n  const handleDistrictChange = (value) => {\n    // Reset locality when district changes\n    form.setValue(\"locality\", \"\");\n    form.setValue(\"district\", value);\n  };\n\n  const onSubmit = async (values) => {\n    setIsLoading(true);\n\n    try {\n      const updateData = {\n        ...values,\n        contact: values.phone,\n        amenities: selectedAmenities,\n        id: formData.id,\n      };\n\n      const res = await api.put(`/hotels/${formData.id}`, updateData);\n      if (res.status === 200) {\n        onUpdate(res.data);\n        setIsEditing(false);\n        toast.success(\"Hotel details updated successfully.\", {\n          duration: 6000\n        });\n      }\n    } catch (err) {\n      toast.error(\"Failed to update hotel information.\", {\n        duration: 6000\n      });\n      console.error(\"Update error:\", err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row justify-between items-center\">\n        <CardTitle>Hotel Information</CardTitle>\n        {!isEditing ? (\n          <Button onClick={() => setIsEditing(true)} className=\"text-sm\">\n            Edit\n          </Button>\n        ) : (\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setIsEditing(false);\n                form.reset({\n                  ...hotel,\n                  locality: hotel.locality || \"\",\n                });\n                setFormData({\n                  ...hotel,\n                  locality: hotel.locality || \"\",\n                });\n                setSelectedAmenities(hotel.amenities || []);\n              }}\n              disabled={isLoading}\n            >\n              Cancel\n            </Button>\n            <Button onClick={form.handleSubmit(onSubmit)} disabled={isLoading}>\n              {isLoading ? \"Saving...\" : \"Save\"}\n            </Button>\n          </div>\n        )}\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Hotel Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} disabled={!isEditing} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"hotelType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Hotel Type</FormLabel>\n                    <Select\n                      onValueChange={field.onChange}\n                      defaultValue={field.value}\n                      disabled={!isEditing}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select Hotel Type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"ONE_STAR\">One Star</SelectItem>\n                        <SelectItem value=\"TWO_STAR\">Two Star</SelectItem>\n                        <SelectItem value=\"THREE_STAR\">Three Star</SelectItem>\n                        <SelectItem value=\"FOUR_STAR\">Four Star</SelectItem>\n                        <SelectItem value=\"FIVE_STAR\">Five Star</SelectItem>\n                        <SelectItem value=\"BUDGET\">Budget</SelectItem>\n                        <SelectItem value=\"BOUTIQUE\">Boutique</SelectItem>\n                        <SelectItem value=\"RESORT\">Resort</SelectItem>\n                        <SelectItem value=\"HOMESTAY\">Homestay</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"district\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>District</FormLabel>\n                    <Select\n                      onValueChange={handleDistrictChange}\n                      defaultValue={field.value}\n                      disabled={!isEditing}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select District\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {districts.map((district) => (\n                          <SelectItem key={district} value={district}>\n                            {district}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"locality\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Locality</FormLabel>\n                    <Select\n                      onValueChange={field.onChange}\n                      defaultValue={field.value}\n                      disabled={!isEditing}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select Locality\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {getLocalitiesForDistrict(form.watch(\"district\")).map((locality) => (\n                          <SelectItem key={locality} value={locality}>\n                            {locality}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Address</FormLabel>\n                    <FormControl>\n                      <Input {...field} disabled={!isEditing} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"md:col-span-2 border-t pt-4 mt-2\">\n                <h4 className=\"text-base font-semibold mb-3\">\n                  Contact Information\n                </h4>\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone</FormLabel>\n                      <FormControl>\n                        <Input type=\"tel\" {...field} disabled={!isEditing} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem className=\"md:col-span-2\">\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} rows={4} disabled={!isEditing} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Amenities Section */}\n              <div className=\"md:col-span-2\">\n                <Label className=\"block text-sm font-medium text-gray-700 mb-3\">\n                  Hotel Amenities\n                </Label>\n                \n                {/* Selected Amenities Display */}\n                {selectedAmenities.length > 0 && (\n                  <div className=\"mb-4\">\n                    <h5 className=\"text-sm font-medium text-gray-600 mb-2\">Selected Amenities:</h5>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {selectedAmenities.map((amenity) => (\n                        <Badge\n                          key={amenity}\n                          variant=\"secondary\"\n                          className=\"flex items-center gap-1\"\n                        >\n                          {amenity}\n                          {isEditing && (\n                            <button\n                              type=\"button\"\n                              onClick={() => handleAmenityToggle(amenity)}\n                              className=\"ml-1 hover:text-destructive\"\n                            >\n                              <X className=\"h-3 w-3\" />\n                            </button>\n                          )}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Amenities Selection */}\n                {isEditing && (\n                  <div className=\"space-y-4\">\n                    {Object.entries(availableAmenities).map(([category, amenities]) => (\n                      <div key={category} className=\"border rounded-lg p-4\">\n                        <h6 className=\"text-sm font-medium text-gray-700 mb-3 capitalize\">\n                          {category.replace(/([A-Z])/g, ' $1').trim()}\n                        </h6>\n                        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2\">\n                          {amenities.map((amenity) => (\n                            <button\n                              key={amenity}\n                              type=\"button\"\n                              onClick={() => handleAmenityToggle(amenity)}\n                              className={`flex items-center gap-2 px-3 py-2 text-sm rounded-md border transition-colors ${\n                                selectedAmenities.includes(amenity)\n                                  ? \"bg-primary text-primary-foreground border-primary\"\n                                  : \"bg-background hover:bg-accent border-border\"\n                              }`}\n                            >\n                              {selectedAmenities.includes(amenity) ? (\n                                <CheckCircle className=\"h-4 w-4\" />\n                              ) : (\n                                <Plus className=\"h-4 w-4\" />\n                              )}\n                              {amenity}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n\n                {/* Read-only view when not editing */}\n                {!isEditing && selectedAmenities.length === 0 && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    No amenities selected\n                  </p>\n                )}\n              </div>\n\n              <div className=\"md:col-span-2\">\n                <Label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Hotel Images\n                </Label>\n                <div className=\"flex flex-wrap gap-3 mb-3\">\n                  {formData.photoUrls?.map((image, index) => (\n                    <div key={index} className=\"relative\">\n                      <img\n                        src={image}\n                        alt={`Hotel ${index}`}\n                        className=\"w-24 h-24 object-cover rounded\"\n                      />\n                      {isEditing && (\n                        <Button\n                          type=\"button\"\n                          onClick={() => removeImage(index)}\n                          className=\"absolute -top-2 -right-2 rounded-full w-6 h-6 flex items-center justify-center text-xs p-0\"\n                          variant=\"destructive\"\n                          disabled={isLoading || deletingImageIndex === index}\n                        >\n                          {deletingImageIndex === index ? (\n                            <div className=\"w-3 h-3 border border-white border-t-transparent rounded-full animate-spin\" />\n                          ) : (\n                            <X className=\"w-3 h-3\" />\n                          )}\n                        </Button>\n                      )}\n                    </div>\n                  ))}\n                </div>\n                {isEditing && (\n                  <Label className=\"flex flex-col items-center justify-center w-full p-6 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-amber-400 transition\">\n                    {isLoading ? (\n                      <div className=\"text-amber-500\">Uploading images...</div>\n                    ) : (\n                      <>\n                        <Upload className=\"text-amber-500 text-2xl mb-2\" />\n                        <p className=\"text-sm text-gray-600\">\n                          Upload hotel images\n                        </p>\n                        <Input\n                          type=\"file\"\n                          multiple\n                          accept=\"image/*\"\n                          onChange={handleImageUpload}\n                          className=\"hidden\"\n                          disabled={isLoading}\n                        />\n                      </>\n                    )}\n                  </Label>\n                )}\n              </div>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default HotelInfoForm;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/HotelListingPage.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'hotelTypes' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":193,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"hotelTypes"},"fix":{"range":[6745,6873],"text":""},"desc":"Remove unused variable 'hotelTypes'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchHotels' and 'location.search'. Either include them or remove the dependency array.","line":343,"column":6,"nodeType":"ArrayExpression","endLine":343,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchHotels, location.search]","fix":{"range":[12011,12013],"text":"[fetchHotels, location.search]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'searchState.sortBy'. Either include it or remove the dependency array.","line":368,"column":6,"nodeType":"ArrayExpression","endLine":368,"endColumn":136,"suggestions":[{"desc":"Update the dependencies array to be: [searchState.district, searchState.locality, searchState.hotelType, fetchHotels, appState.initialLoadDone, appState.isInitialLoad, searchState.sortBy]","fix":{"range":[12882,13012],"text":"[searchState.district, searchState.locality, searchState.hotelType, fetchHotels, appState.initialLoadDone, appState.isInitialLoad, searchState.sortBy]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useRef, useMemo } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport {\n  MapPin,\n  Home,\n  Building2,\n  Search,\n  X,\n  Clock,\n} from \"lucide-react\";\nimport YakRoomsLoader from \"@/shared/components/YakRoomsLoader\";\nimport StarRating from \"@/shared/components/star-rating\";\nimport { SearchButton } from \"@/shared/components\";\n\nimport { Button } from \"@/shared/components/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/shared/components/card\";\nimport { Badge } from \"@/shared/components/badge\";\nimport { Input } from \"@/shared/components/input\";\nimport { Label } from \"@/shared/components/label\";\n\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/shared/components/select\";\n\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from \"@/shared/components/pagination\";\n\nimport api from \"../../shared/services/Api\";\nimport { YakRoomsText } from \"@/shared/components\";\n\n// Memoized HotelCard component to prevent unnecessary re-renders\nconst HotelCard = React.memo(({ hotel }) => (\n  <Card className=\"overflow-hidden flex flex-col group transition-all duration-300 hover:shadow-2xl hover:-translate-y-1 border border-border/50 shadow-lg rounded-lg bg-card\">\n    <div className=\"relative overflow-hidden rounded-t-lg\">\n      <Link to={`/hotel/${hotel.id}`}>\n        <img\n          src={hotel.image}\n          alt={hotel.name}\n          className=\"h-40 w-full object-cover transition-transform duration-700 ease-out group-hover:scale-105\"\n          loading=\"lazy\"\n        />\n      </Link>\n      <div className=\"absolute inset-0 bg-gradient-to-t from-black/40 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n\n      {/* Hotel Type Badge */}\n      <div className=\"absolute top-3 left-3\">\n        <Badge\n          variant=\"secondary\"\n          className=\"bg-background/95 backdrop-blur-md shadow-lg border border-border/20 text-xs font-medium px-2 py-0.5 text-yellow-700\"\n        >\n          {hotel.type}\n        </Badge>\n      </div>\n\n      {/* Price Badge - Compact positioning */}\n      {hotel.lowestPrice && hotel.lowestPrice > 0 && (\n        <div className=\"absolute top-3 right-3\">\n          <div className=\"bg-primary text-primary-foreground px-2 py-1.5 rounded-md shadow-lg backdrop-blur-md border border-primary/20\">\n            <span className=\"text-14 text-yellow-500\">From</span>\n            <div className=\"text-xs font-bold leading-none\">\n              Nu. {hotel.lowestPrice.toLocaleString()}\n            </div>\n            <div className=\"text-xs opacity-90 leading-none\">per night</div>\n          </div>\n        </div>\n      )}\n    </div>\n\n    <CardHeader className=\"flex-1 p-4 pb-3\">\n      <div className=\"space-y-2\">\n        <CardTitle className=\"text-lg font-semibold leading-tight group-hover:text-primary transition-colors duration-200 line-clamp-2\">\n          <Link\n            to={`/hotel/${hotel.id}`}\n            className=\"hover:underline decoration-2 underline-offset-2\"\n          >\n            {hotel.name}\n          </Link>\n        </CardTitle>\n        \n        <CardDescription className=\"flex items-center gap-1.5 text-sm\">\n          <MapPin className=\"h-3.5 w-3.5 flex-shrink-0 text-muted-foreground\" />\n          <span className=\"font-medium\">\n            {hotel.locality && `${hotel.locality}, `}{hotel.district}, Bhutan\n          </span>\n        </CardDescription>\n\n        {/* Check-in/Check-out Times */}\n        <div className=\"flex items-center gap-4 text-xs text-muted-foreground pt-1\">\n          <div className=\"flex items-center gap-1.5\">\n            <Clock className=\"h-3.5 w-3.5 flex-shrink-0\" />\n            <span>Check-in: 12:00 AM</span>\n          </div>\n          <div className=\"flex items-center gap-1.5\">\n            <Clock className=\"h-3.5 w-3.5 flex-shrink-0\" />\n            <span>Check-out: 2:00 PM</span>\n          </div>\n        </div>\n\n        {/* Rating Section */}\n        {hotel.averageRating > 0 && (\n          <div className=\"flex items-center gap-2 pt-1\">\n            <StarRating \n              rating={hotel.averageRating} \n              size={14} \n              showRating={true}\n              className=\"flex-shrink-0\"\n            />\n            <span className=\"text-xs text-muted-foreground\">\n              ({hotel.averageRating.toFixed(1)} Avg. Rating)\n            </span>\n          </div>\n        )}\n      </div>\n    </CardHeader>\n\n    <CardFooter className=\"bg-muted/30 border-t border-border/50 p-4 pt-3 mt-auto\">\n      <div className=\"flex justify-between items-center w-full\">\n        <div className=\"flex items-center gap-3\">\n          {/* Verified Badge */}\n          <Badge \n            variant=\"outline\" \n            className=\"bg-green-50 border-green-200 text-green-700 hover:bg-green-100 transition-colors duration-200 px-2 py-1 text-xs font-medium flex items-center gap-1\"\n          >\n            <svg className=\"w-3 h-3 text-green-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n            </svg>\n            Verified\n          </Badge>\n        </div>\n        \n        <Button \n          asChild \n          size=\"sm\" \n          className=\"ml-3 shadow-sm hover:shadow-md transition-shadow duration-200 px-4 py-1.5 font-medium text-sm bg-yellow-500 hover:bg-yellow-600 text-white rounded-[20px]\"\n        >\n          <Link to={`/hotel/${hotel.id}`}>View Details</Link>\n        </Button>\n      </div>\n    </CardFooter>\n  </Card>\n));\n\nconst HotelListingPage = () => {\n  const location = useLocation();\n  \n  // Consolidated state management to reduce re-renders\n  const [appState, setAppState] = useState({\n    hotels: [],\n    loading: true,\n    initialLoadDone: false,\n    isInitialLoad: true, // Track if we're in the initial load phase\n    lastFetchKey: null, // Track last fetch to prevent duplicate calls\n  });\n\n  const [searchState, setSearchState] = useState({\n    district: \"\",\n    locality: \"\",\n    hotelType: \"all\",\n    sortBy: \"default\",\n  });\n\n  const [pagination, setPagination] = useState({\n    page: 0,\n    size: 6,\n    totalPages: 1,\n    totalElements: 0,\n  });\n\n  // Refs for performance optimization\n  const debounceTimerRef = useRef(null);\n  const abortControllerRef = useRef(null);\n  const lastRequestRef = useRef(null);\n  const pendingRequestRef = useRef(null); // Track pending requests to prevent duplicates\n\n  // Memoized hotel types to prevent recreation on every render\n  const hotelTypes = useMemo(() => [\n    \"Resort\",\n    \"Hotel\", \n    \"Guesthouse\",\n    \"Homestay\",\n    \"Boutique Hotel\",\n  ], []);\n\n  // Memoized function to generate fetch key for deduplication\n  const generateFetchKey = useCallback((page, district, locality, hotelType, sortBy) => {\n    return `${page}-${district.trim()}-${locality.trim()}-${hotelType}-${sortBy}`;\n  }, []);\n\n  // Optimized fetch function with request deduplication and caching\n  const fetchHotels = useCallback(\n    async (page = 0, searchDistrict = \"\", searchLocality = \"\", searchHotelType = \"\", sortByParam = \"default\") => {\n      // Generate unique key for this request\n      const fetchKey = generateFetchKey(page, searchDistrict, searchLocality, searchHotelType, sortByParam);\n      \n      // Prevent duplicate API calls - check both completed and pending requests\n      if (appState.lastFetchKey === fetchKey && !appState.loading) {\n        return;\n      }\n      \n      // Prevent duplicate pending requests\n      if (pendingRequestRef.current === fetchKey) {\n        return;\n      }\n\n      // Cancel previous request if it exists\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n      \n      // Mark this request as pending\n      pendingRequestRef.current = fetchKey;\n\n      abortControllerRef.current = new AbortController();\n      const signal = abortControllerRef.current.signal;\n\n      try {\n        setAppState(prev => ({ \n          ...prev, \n          loading: true, \n          lastFetchKey: fetchKey\n        }));\n\n        let endpoint = `/hotels/list?page=${page}&size=${pagination.size}`;\n        const isSearchActive = searchDistrict.trim() || searchLocality.trim() || \n          (searchHotelType && searchHotelType !== \"all\");\n\n        // Build endpoint based on search/sort criteria\n        if (isSearchActive) {\n          const params = new URLSearchParams({\n            page: page.toString(),\n            size: pagination.size.toString(),\n          });\n\n          if (searchDistrict.trim()) params.append(\"district\", searchDistrict.trim());\n          if (searchLocality.trim()) params.append(\"locality\", searchLocality.trim());\n          if (searchHotelType && searchHotelType !== \"all\") params.append(\"hotelType\", searchHotelType);\n\n          endpoint = `/hotels/search?${params.toString()}`;\n        } else {\n          // Apply sorting only when not searching\n          if (sortByParam === \"price-high\") {\n            endpoint = `/hotels/sortedByHighestPrice?page=${page}&size=${pagination.size}`;\n          } else if (sortByParam === \"price-low\") {\n            endpoint = `/hotels/sortedByLowestPrice?page=${page}&size=${pagination.size}`;\n          }\n        }\n\n        // Store current request reference\n        lastRequestRef.current = { endpoint, fetchKey };\n\n        const response = await api.get(endpoint, { signal });\n\n        // Check if this is still the current request\n        if (lastRequestRef.current?.fetchKey === fetchKey) {\n          // Handle new nested response structure\n          const hotelsData = response.data.content?.[0]?.content || response.data.content || [];\n          const pageData = response.data.page || response.data;\n          \n          setAppState(prev => ({\n            ...prev,\n            hotels: hotelsData,\n            loading: false,\n          }));\n\n          setPagination({\n            page: pageData.pageable?.pageNumber || pageData.number || 0,\n            size: pageData.size || 6,\n            totalPages: pageData.totalPages || 1,\n            totalElements: pageData.totalElements || 0,\n          });\n        }\n        \n        // Clear pending request\n        if (pendingRequestRef.current === fetchKey) {\n          pendingRequestRef.current = null;\n        }\n      } catch (error) {\n        if (error.name === 'AbortError') {\n          // Clear pending request for aborted requests\n          if (pendingRequestRef.current === fetchKey) {\n            pendingRequestRef.current = null;\n          }\n          return;\n        }\n        \n        console.error(\"Error fetching hotels:\", error);\n        if (lastRequestRef.current?.fetchKey === fetchKey) {\n          setAppState(prev => ({\n            ...prev,\n            hotels: [],\n            loading: true, // Keep loading to show YakRoomsLoader\n          }));\n        }\n        \n        // Clear pending request on error\n        if (pendingRequestRef.current === fetchKey) {\n          pendingRequestRef.current = null;\n        }\n      }\n    },\n    [pagination.size, generateFetchKey, appState.lastFetchKey, appState.loading]\n  );\n\n  // Handle initial URL parameters and data loading\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const districtParam = params.get(\"district\") || \"\";\n    const hotelTypeParam = params.get(\"hotelType\") || \"all\";\n    \n    // Set initial search state from URL\n    setSearchState(prev => ({\n      ...prev,\n      district: districtParam,\n      hotelType: hotelTypeParam,\n    }));\n    \n    // Fetch initial data\n    fetchHotels(0, districtParam, \"\", hotelTypeParam, \"default\");\n    \n    // Mark initial load as complete and no longer in initial load phase\n    setAppState(prev => ({ \n      ...prev, \n      initialLoadDone: true,\n      isInitialLoad: false\n    }));\n  }, []); // Only run on mount\n\n  // Optimized search effect with debouncing\n  useEffect(() => {\n    // Don't run during initial load or if initial load not done\n    if (!appState.initialLoadDone || appState.isInitialLoad) return;\n\n    // Clear existing timer\n    if (debounceTimerRef.current) {\n      clearTimeout(debounceTimerRef.current);\n    }\n\n    // Set new debounced timer\n    debounceTimerRef.current = setTimeout(() => {\n      const isSearchActive = searchState.district.trim() || searchState.locality.trim() || \n        (searchState.hotelType && searchState.hotelType !== \"all\");\n      fetchHotels(0, searchState.district, searchState.locality, searchState.hotelType, \n        isSearchActive ? \"default\" : searchState.sortBy);\n    }, 500);\n\n    return () => {\n      if (debounceTimerRef.current) {\n        clearTimeout(debounceTimerRef.current);\n      }\n    };\n  }, [searchState.district, searchState.locality, searchState.hotelType, fetchHotels, appState.initialLoadDone, appState.isInitialLoad]);\n\n  // Separate effect for sort changes (no debounce needed)\n  useEffect(() => {\n    // Don't run during initial load or if initial load not done\n    if (!appState.initialLoadDone || appState.isInitialLoad) return;\n    \n    const isSearchActive = searchState.district.trim() || searchState.locality.trim() || \n      (searchState.hotelType && searchState.hotelType !== \"all\");\n    if (!isSearchActive) {\n      fetchHotels(0, searchState.district, searchState.locality, searchState.hotelType, searchState.sortBy);\n    }\n  }, [searchState.sortBy, fetchHotels, appState.initialLoadDone, appState.isInitialLoad, searchState.district, searchState.locality, searchState.hotelType]);\n\n  // Cleanup effect\n  useEffect(() => {\n    return () => {\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n      if (debounceTimerRef.current) {\n        clearTimeout(debounceTimerRef.current);\n      }\n      // Clear pending request on cleanup\n      pendingRequestRef.current = null;\n    };\n  }, []);\n\n  // Memoized handlers to prevent unnecessary re-renders\n  const handleSearch = useCallback(() => {\n    const isSearchActive = searchState.district.trim() || searchState.locality.trim() || \n      (searchState.hotelType && searchState.hotelType !== \"all\");\n    fetchHotels(0, searchState.district, searchState.locality, searchState.hotelType, \n      isSearchActive ? \"default\" : searchState.sortBy);\n  }, [searchState.district, searchState.locality, searchState.hotelType, searchState.sortBy, fetchHotels]);\n\n  const handleClearSearch = useCallback(() => {\n    setSearchState(prev => ({\n      ...prev,\n      district: \"\",\n      locality: \"\",\n      hotelType: \"all\",\n    }));\n    \n    window.history.replaceState({}, \"\", \"/hotels\");\n    fetchHotels(0, \"\", \"\", \"all\", searchState.sortBy);\n  }, [fetchHotels, searchState.sortBy]);\n\n  const handlePageChange = useCallback((newPage) => {\n    if (newPage >= 0 && newPage < pagination.totalPages) {\n      const isSearchActive = searchState.district.trim() || searchState.locality.trim() || \n        (searchState.hotelType && searchState.hotelType !== \"all\");\n      fetchHotels(newPage, searchState.district, searchState.locality, searchState.hotelType, \n        isSearchActive ? \"default\" : searchState.sortBy);\n    }\n  }, [pagination.totalPages, searchState.district, searchState.locality, searchState.hotelType, searchState.sortBy, fetchHotels]);\n\n  const handleDistrictChange = useCallback((value) => {\n    setSearchState(prev => ({ ...prev, district: value }));\n  }, []);\n\n  const handleLocalityChange = useCallback((value) => {\n    setSearchState(prev => ({ ...prev, locality: value }));\n  }, []);\n\n  const handleHotelTypeChange = useCallback((value) => {\n    setSearchState(prev => ({ ...prev, hotelType: value }));\n  }, []);\n\n  const handleSortChange = useCallback((value) => {\n    setSearchState(prev => ({ ...prev, sortBy: value }));\n  }, []);\n\n  const handleKeyPress = useCallback((e) => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  }, [handleSearch]);\n\n  // Memoized computed values\n  const isSearchActive = useMemo(() => {\n    return searchState.district.trim() || searchState.locality.trim() || \n      (searchState.hotelType && searchState.hotelType !== \"all\");\n  }, [searchState.district, searchState.locality, searchState.hotelType]);\n\n  const pageTitle = useMemo(() => {\n    if (!isSearchActive) return \"All Lodges in Bhutan\";\n    \n    const parts = [];\n    if (searchState.locality) parts.push(`Hotels in ${searchState.locality}`);\n    if (searchState.district) parts.push(`District: ${searchState.district}`);\n    if (searchState.hotelType && searchState.hotelType !== \"all\") {\n      const typeLabel = searchState.hotelType.split('_').map(word => \n        word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\n      ).join(' ');\n      parts.push(typeLabel);\n    }\n    \n    return parts.join(' - ') || \"Search Results\";\n  }, [isSearchActive, searchState.district, searchState.locality, searchState.hotelType]);\n\n  const transformedHotels = useMemo(() => {\n    return appState.hotels.map((hotel) => ({\n      id: hotel.id,\n      name: hotel.name,\n      district: hotel.district,\n      locality: hotel.locality,\n      price: hotel.lowestPrice,\n      lowestPrice: hotel.lowestPrice,\n      image: hotel.photoUrl || hotel.photoUrls?.[0] || \n        `https://images.unsplash.com/photo-1566073771259-6a8506099945?w=600&h=400&fit=crop&auto=format`,\n      type: hotel.hotelType || \"Hotel\",\n      amenities: hotel.amenities || [],\n      address: hotel.address,\n      averageRating: hotel.averageRating || 0,\n      verified: hotel.verified || hotel.isVerified || false,\n    }));\n  }, [appState.hotels]);\n\n  // Memoized pagination component\n  const renderPagination = useMemo(() => {\n    if (pagination.totalPages <= 1) return null;\n\n    return (\n      <div className=\"flex justify-center mt-8\">\n        <Pagination>\n          <PaginationContent>\n            <PaginationItem>\n              <PaginationPrevious\n                href=\"#\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  if (pagination.page > 0) handlePageChange(pagination.page - 1);\n                }}\n                className={pagination.page === 0 ? \"pointer-events-none opacity-50\" : \"\"}\n              />\n            </PaginationItem>\n            {[...Array(pagination.totalPages).keys()].map((pageNumber) => (\n              <PaginationItem key={pageNumber}>\n                <PaginationLink\n                  href=\"#\"\n                  isActive={pageNumber === pagination.page}\n                  onClick={(e) => {\n                    e.preventDefault();\n                    handlePageChange(pageNumber);\n                  }}\n                >\n                  {pageNumber + 1}\n                </PaginationLink>\n              </PaginationItem>\n            ))}\n            <PaginationItem>\n              <PaginationNext\n                href=\"#\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  if (pagination.page < pagination.totalPages - 1) {\n                    handlePageChange(pagination.page + 1);\n                  }\n                }}\n                className={\n                  pagination.page >= pagination.totalPages - 1\n                    ? \"pointer-events-none opacity-50\"\n                    : \"\"\n                }\n              />\n            </PaginationItem>\n          </PaginationContent>\n        </Pagination>\n      </div>\n    );\n  }, [pagination.totalPages, pagination.page, handlePageChange]);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Simplified Header */}\n      <header className=\"border-b sticky top-0 bg-background/95 backdrop-blur z-20 shadow-sm\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex h-16 items-center justify-between\">\n            {/* Left side - Brand and Navigation */}\n            <div className=\"flex items-center gap-4\">\n              <Link to=\"/\" className=\"flex items-center gap-2\">\n                <YakRoomsText size=\"default\" />\n              </Link>\n            </div>\n\n            {/* Center - Tagline (hidden on mobile) */}\n            <div className=\"hidden md:block\">\n              <p className=\"text-muted-foreground text-sm\">\n                Discover authentic Bhutanese stays\n              </p>\n            </div>\n\n            {/* Right side - Results count */}\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm text-muted-foreground hidden lg:block\">\n                {pagination.totalElements} results\n              </span>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Main Content */}\n        <main className=\"w-full\">\n          {/* Simple Search Section */}\n          <div className=\"space-y-4 mb-6\">\n            {/* First row - District, Locality and Hotel Type */}\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              {/* District Search */}\n              <div className=\"flex-1\">\n                <Input\n                  placeholder=\"Search by district...\"\n                  value={searchState.district}\n                  onChange={(e) => handleDistrictChange(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  className=\"w-full text-14\"\n                />\n              </div>\n\n              {/* Locality Search */}\n              <div className=\"flex-1\">\n                <Input\n                  placeholder=\"Search by locality/town...\"\n                  value={searchState.locality}\n                  onChange={(e) => handleLocalityChange(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  className=\"w-full text-14\"\n                />\n              </div>\n\n              {/* Hotel Type Filter */}\n              <div className=\"sm:w-48\">\n                <Select value={searchState.hotelType} onValueChange={handleHotelTypeChange}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Hotel type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    <SelectItem value=\"ONE_STAR\">One Star</SelectItem>\n                    <SelectItem value=\"TWO_STAR\">Two Star</SelectItem>\n                    <SelectItem value=\"THREE_STAR\">Three Star</SelectItem>\n                    <SelectItem value=\"FOUR_STAR\">Four Star</SelectItem>\n                    <SelectItem value=\"FIVE_STAR\">Five Star</SelectItem>\n                    <SelectItem value=\"BUDGET\">Budget</SelectItem>\n                    <SelectItem value=\"BOUTIQUE\">Boutique</SelectItem>\n                    <SelectItem value=\"RESORT\">Resort</SelectItem>\n                    <SelectItem value=\"HOMESTAY\">Homestay</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Second row - Search Actions */}\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              {/* Search Actions */}\n              <div className=\"flex gap-2 sm:flex-shrink-0\">\n                <SearchButton \n                  onClick={handleSearch} \n                  disabled={appState.loading} \n                  className=\"flex-1 sm:flex-initial bg-yellow-500 hover:bg-yellow-600 text-white cursor-pointer\"\n                >\n                  Search\n                </SearchButton>\n                {isSearchActive && (\n                  <Button variant=\"outline\" onClick={handleClearSearch} disabled={appState.loading}>\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Results Header */}\n          <div className=\"mb-6\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n              <div>\n                <h1 className=\"text-2xl md:text-xl font-semibold tracking-tight\">\n                  {pageTitle}\n                </h1>\n              \n\n                {/* Active filters display */}\n                {isSearchActive && !appState.loading && (\n                  <div className=\"flex gap-2 mt-2 flex-wrap\">\n                    {searchState.locality && (\n                      <Badge variant=\"secondary\" className=\"text-xs text-blue-900\">\n                        Locality: {searchState.locality}\n                      </Badge>\n                    )}\n                    {searchState.district && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        District: {searchState.district}\n                      </Badge>\n                    )}\n                    {searchState.hotelType && searchState.hotelType !== \"all\" && (\n                      <Badge variant=\"secondary\" className=\"text-xs text-yellow-900\">\n                        Type: {searchState.hotelType.replace(/_/g, \" \")}\n                      </Badge>\n                    )}\n                  </div>\n                )}\n              </div>\n\n              {/* Sort Controls - only show when not searching */}\n              {!isSearchActive && !appState.loading && (\n                <div className=\"flex items-center gap-3\">\n                  <Label className=\"text-sm font-medium\">Sort by</Label>\n                  <Select value={searchState.sortBy} onValueChange={handleSortChange}>\n                    <SelectTrigger className=\"w-44\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"default\">Default</SelectItem>\n                      <SelectItem value=\"price-low\">Price: Low to High</SelectItem>\n                      <SelectItem value=\"price-high\">Price: High to Low</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Results */}\n          {appState.loading ? (\n            <div className=\"flex flex-col items-center justify-center h-96\">\n              <YakRoomsLoader \n                size={112} \n                showTagline={false} \n                loadingText=\"\"\n                className=\"mb-4\"\n              />\n            </div>\n          ) : (\n            <>\n              {transformedHotels.length > 0 ? (\n                <>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 mb-8\">\n                    {transformedHotels.map((hotel) => (\n                      <HotelCard key={hotel.id} hotel={hotel} />\n                    ))}\n                  </div>\n                  {renderPagination}\n                </>\n              ) : (\n                // Only show no results if we're not loading and have confirmed empty results\n                !appState.loading && appState.initialLoadDone && (\n                  <Card className=\"text-center py-16 px-6 bg-muted/20 border-dashed border-2 rounded-xl\">\n                    <CardContent className=\"space-y-4\">\n                     \n                      <CardTitle className=\"text-2xl\">\n                        {isSearchActive \n                          ? \"No Hotels Found\" \n                          : (\n                            <div className=\"flex flex-col items-center justify-center\">\n                              <YakRoomsLoader \n                                size={40} \n                                showTagline={false} \n                                loadingText=\"\"\n                                className=\"mb-2\"\n                              />\n                              <span>Loading Hotels...</span>\n                            </div>\n                          )\n                        }\n                      </CardTitle>\n                      <CardDescription className=\"max-w-md mx-auto\">\n                        {isSearchActive \n                          ? `We couldn't find any hotels matching your search criteria. Try adjusting your filters or search terms.`\n                          : \"We couldn't find any hotels. Please try again later.\"\n                        }\n                      </CardDescription>\n                      <div className=\"flex justify-center gap-3 mt-6\">\n                        {isSearchActive && (\n                          <Button variant=\"outline\" onClick={handleClearSearch}>\n                            <X className=\"mr-2 h-4 w-4\" />\n                            Clear Search\n                          </Button>\n                        )}\n                        <Button asChild>\n                          <Link to=\"/\">\n                            <Home className=\"mr-2 h-4 w-4\" />\n                            Back to Home\n                          </Link>\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )\n              )}\n            </>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default HotelListingPage;","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/HotelReviewModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/HotelReviewSheet.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/HotelTable.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/MonthlyPerformanceChart.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchPerformanceData'. Either include it or remove the dependency array.","line":173,"column":6,"nodeType":"ArrayExpression","endLine":173,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [selectedDate, hotelId, fetchPerformanceData]","fix":{"range":[5000,5023],"text":"[selectedDate, hotelId, fetchPerformanceData]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":176,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":176,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[5085,5090],"text":""},"desc":"Remove unused variable 'value'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Cell,\n  LabelList,\n} from \"recharts\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/shared/components/card\";\nimport { Calendar, TrendingUp, Download } from \"lucide-react\";\nimport * as XLSX from 'xlsx';\nimport api from \"../../shared/services/Api\";\nimport { useAuth } from \"@/features/authentication\";\n\nconst MonthlyPerformanceChart = () => {\n  const { hotelId } = useAuth();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(\"2025-01-01\");\n\n  // Get hotel name for dynamic title (assuming all data is for same hotel)\n  const hotelName = data.length > 0 ? data[0].hotelName : \"Hotel\";\n\n  // Format month-year for better display\n  const formatMonthYear = (monthYear) => {\n    const date = new Date(monthYear + \"-01\");\n    return date.toLocaleDateString(\"en-US\", {\n      month: \"short\",\n      year: \"numeric\",\n    });\n  };\n\n  // Process data for chart\n  const chartData = data.map((item) => ({\n    ...item,\n    displayMonth: formatMonthYear(item.monthYear),\n  }));\n\n  // Custom label component for top of bars\n  const CustomLabel = (props) => {\n    const { x, y, width, payload } = props;\n    if (!payload) return null;\n\n    return (\n      <g>\n        {/* Booking Count Label */}\n        <text\n          x={x + width / 2}\n          y={y - 35}\n          fill=\"#10b981\"\n          textAnchor=\"middle\"\n          fontSize=\"12\"\n          fontWeight=\"600\"\n        >\n          {payload.bookingCount} bookings\n        </text>\n        {/* Average Booking Value Label */}\n        <text\n          x={x + width / 2}\n          y={y - 20}\n          fill=\"#f59e0b\"\n          textAnchor=\"middle\"\n          fontSize=\"12\"\n          fontWeight=\"600\"\n        >\n          Nu. {payload.averageBookingValue?.toLocaleString()}\n        </text>\n      </g>\n    );\n  };\n  \n  // Custom tooltip component\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload;\n      return (\n        <div className=\"bg-white p-4 border border-gray-200 rounded-lg shadow-lg\">\n          <p className=\"font-semibold text-gray-900 mb-2\">{label}</p>\n          <div className=\"flex items-center gap-2 mb-1\">\n            <div className=\"w-3 h-3 rounded-full bg-blue-500\" />\n            <span className=\"text-sm text-gray-600\">\n              Total Revenue:\n              <span className=\"font-medium text-gray-900 ml-1\">\n                Nu. {data.totalRevenue?.toLocaleString()}\n              </span>\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 mb-1\">\n            <div className=\"w-3 h-3 rounded-full bg-green-500\" />\n            <span className=\"text-sm text-gray-600\">\n              Bookings:\n              <span className=\"font-medium text-gray-900 ml-1\">\n                {data.bookingCount}\n              </span>\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 rounded-full bg-amber-500\" />\n            <span className=\"text-sm text-gray-600\">\n              Avg. Booking Value:\n              <span className=\"font-medium text-gray-900 ml-1\">\n                Nu. {data.averageBookingValue?.toLocaleString()}\n              </span>\n            </span>\n          </div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  // Fetch data from API\n  const fetchPerformanceData = async () => {\n    if (!hotelId) {\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const res = await api.get(\n        `/booking-statistics/revenue/monthly/${hotelId}?startDate=${selectedDate}`\n      );\n\n      console.log(\"Fetching performance data from:\", res.config.url);\n\n      const result = res.data;\n\n      // Validate response structure\n      if (!Array.isArray(result)) {\n        throw new Error(\n          \"Invalid API response: Expected an array of performance data\"\n        );\n      }\n\n      // Process the data to add formatted month labels\n      const processedData = result\n        .map((item) => {\n          if (!item.monthYear || typeof item.totalRevenue !== \"number\") {\n            console.warn(\"Invalid data item:\", item);\n            return null;\n          }\n          return {\n            ...item,\n            displayMonth: formatMonthYear(item.monthYear),\n          };\n        })\n        .filter(Boolean);\n\n      if (processedData.length === 0) {\n        throw new Error(\"No valid performance data received from API\");\n      }\n\n      setData(processedData);\n      setLoading(false);\n    } catch (err) {\n      console.error(\"Error fetching performance data:\", err);\n      setError(err.message);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPerformanceData();\n  }, [selectedDate, hotelId]);\n\n  // Custom legend formatter\n  const formatLegendValue = (value) => {\n    return \"Total Revenue (Nu.)\";\n  };\n\n  // Export data to Excel\n  const exportToExcel = () => {\n    if (!data || data.length === 0) {\n      alert(\"No data available to export\");\n      return;\n    }\n\n    try {\n      // Prepare data for Excel export\n      const exportData = data.map((item, index) => ({\n        'S.No': index + 1,\n        'Month': item.displayMonth || item.monthYear,\n        'Hotel Name': item.hotelName || hotelName || 'Hotel',\n        'Total Revenue (Nu.)': item.totalRevenue || 0,\n        'Booking Count': item.bookingCount || 0,\n        'Average Booking Value (Nu.)': item.averageBookingValue || 0,\n        'Revenue per Booking (Nu.)': item.totalRevenue && item.bookingCount \n          ? Math.round(item.totalRevenue / item.bookingCount) \n          : 0\n      }));\n\n      // Add summary statistics\n      const totalRevenue = data.reduce((sum, item) => sum + (item.totalRevenue || 0), 0);\n      const totalBookings = data.reduce((sum, item) => sum + (item.bookingCount || 0), 0);\n      const avgBookingValue = totalBookings > 0 ? totalRevenue / totalBookings : 0;\n\n      // Add empty row and summary\n      exportData.push({});\n      exportData.push({\n        'S.No': '',\n        'Month': 'SUMMARY STATISTICS',\n        'Hotel Name': '',\n        'Total Revenue (Nu.)': '',\n        'Booking Count': '',\n        'Average Booking Value (Nu.)': '',\n        'Revenue per Booking (Nu.)': ''\n      });\n      exportData.push({\n        'S.No': '',\n        'Month': 'Total Revenue',\n        'Hotel Name': '',\n        'Total Revenue (Nu.)': totalRevenue,\n        'Booking Count': '',\n        'Average Booking Value (Nu.)': '',\n        'Revenue per Booking (Nu.)': ''\n      });\n      exportData.push({\n        'S.No': '',\n        'Month': 'Total Bookings',\n        'Hotel Name': '',\n        'Total Revenue (Nu.)': '',\n        'Booking Count': totalBookings,\n        'Average Booking Value (Nu.)': '',\n        'Revenue per Booking (Nu.)': ''\n      });\n      exportData.push({\n        'S.No': '',\n        'Month': 'Average Booking Value',\n        'Hotel Name': '',\n        'Total Revenue (Nu.)': '',\n        'Booking Count': '',\n        'Average Booking Value (Nu.)': Math.round(avgBookingValue),\n        'Revenue per Booking (Nu.)': ''\n      });\n\n      // Create workbook and worksheet\n      const wb = XLSX.utils.book_new();\n      const ws = XLSX.utils.json_to_sheet(exportData);\n\n      // Set column widths for better formatting\n      const colWidths = [\n        { wch: 8 },   // S.No\n        { wch: 15 },  // Month\n        { wch: 25 },  // Hotel Name\n        { wch: 20 },  // Total Revenue\n        { wch: 15 },  // Booking Count\n        { wch: 25 },  // Average Booking Value\n        { wch: 25 }   // Revenue per Booking\n      ];\n      ws['!cols'] = colWidths;\n\n      // Add worksheet to workbook\n      XLSX.utils.book_append_sheet(wb, ws, \"Monthly Performance\");\n\n      // Generate filename with hotel name and current date\n      const sanitizedHotelName = (hotelName || 'Hotel').replace(/[^a-zA-Z0-9]/g, '_');\n      const currentDate = new Date().toISOString().split('T')[0];\n      const filename = `monthly-performance-report-${sanitizedHotelName}-${currentDate}.xlsx`;\n\n      // Save the file\n      XLSX.writeFile(wb, filename);\n\n      console.log(`Excel file exported successfully: ${filename}`);\n    } catch (error) {\n      console.error(\"Error exporting to Excel:\", error);\n      alert(\"Failed to export data. Please try again.\");\n    }\n  };\n\n  // Loading state\n  if (loading) {\n    return (\n      <Card className=\"w-full\">\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"text-xl font-semibold text-gray-900 flex items-center gap-2\">\n            <TrendingUp className=\"h-5 w-5 text-blue-600\" />\n            Monthly Performance\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"flex items-center justify-center h-96\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n              <p className=\"text-gray-600\">Loading performance data...</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Error state\n  if (error) {\n    return (\n      <Card className=\"w-full\">\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"text-xl font-semibold text-gray-900 flex items-center gap-2\">\n            <TrendingUp className=\"h-5 w-5 text-blue-600\" />\n            Monthly Performance\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-red-600 mb-4\">\n              Error loading performance data: {error}\n            </p>\n            <button\n              onClick={fetchPerformanceData}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n            >\n              Retry\n            </button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"text-xl font-semibold text-gray-900 flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5 text-blue-600\" />\n              Monthly Performance - {hotelName}\n            </CardTitle>\n            <p className=\"text-sm text-gray-500 mt-1\">\n              Revenue, bookings, and average booking value trends\n            </p>\n          </div>\n          \n          {/* Export Excel Button */}\n          <button\n            onClick={exportToExcel}\n            disabled={!data || data.length === 0}\n            className={`flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-md transition-colors ${\n              data && data.length > 0\n                ? \"bg-gray-100 hover:bg-gray-200 text-gray-700 border border-gray-300\"\n                : \"bg-gray-300 text-gray-500 cursor-not-allowed\"\n            }`}\n            title={data && data.length > 0 ? \"Export data to Excel\" : \"No data available to export\"}\n          >\n            <Download className=\"h-4 w-4\" />\n            Export Excel\n          </button>\n        </div>\n\n        {/* Date Picker */}\n        <div className=\"flex items-center gap-2 mt-4\">\n          <Calendar className=\"h-4 w-4 text-gray-500\" />\n          <input\n            type=\"date\"\n            value={selectedDate}\n            onChange={(e) => setSelectedDate(e.target.value)}\n            min=\"2025-01-01\"\n            className=\"px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm\"\n          />\n          <span className=\"text-xs text-gray-500\">\n            Select date to view revenue from that period\n          </span>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-0\">\n        <div className=\"h-96 w-full\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart\n              data={chartData}\n              margin={{\n                top: 60,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid\n                strokeDasharray=\"3 3\"\n                className=\"opacity-30\"\n                stroke=\"#e5e7eb\"\n              />\n              <XAxis\n                dataKey=\"displayMonth\"\n                axisLine={false}\n                tickLine={false}\n                tick={{ fontSize: 12, fill: \"#6b7280\" }}\n                className=\"text-gray-500\"\n              />\n              <YAxis\n                axisLine={false}\n                tickLine={false}\n                tick={{ fontSize: 12, fill: \"#6b7280\" }}\n                tickFormatter={(value) => `Nu. ${value / 1000}k`}\n              />\n              <Tooltip content={<CustomTooltip />} />\n              <Legend\n                formatter={formatLegendValue}\n                wrapperStyle={{ paddingTop: \"20px\" }}\n                iconType=\"rect\"\n              />\n\n              {/* Total Revenue Bar with Labels */}\n              <Bar\n                dataKey=\"totalRevenue\"\n                fill=\"#3b82f6\"\n                radius={[4, 4, 0, 0]}\n                name=\"totalRevenue\"\n              >\n                <LabelList content={<CustomLabel />} />\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Legend for the labels */}\n        <div className=\"mt-4 flex justify-center gap-6 text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 rounded-full bg-blue-500\" />\n            <span className=\"text-gray-600\">Total Revenue</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 rounded-full bg-green-500\" />\n            <span className=\"text-gray-600\">Booking Count</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 rounded-full bg-amber-500\" />\n            <span className=\"text-gray-600\">Avg. Booking Value</span>\n          </div>\n        </div>\n\n        {/* Summary Stats */}\n        <div className=\"mt-6 grid grid-cols-1 md:grid-cols-3 gap-4\">\n          {chartData.length > 0 && (\n            <>\n              <div className=\"text-center p-3 rounded-lg\">\n                <div className=\"text-md font-bold text-blue-600\">\n                  Nu.{\" \"}\n                  {chartData[\n                    chartData.length - 1\n                  ]?.totalRevenue?.toLocaleString()}\n                </div>\n                <div className=\"text-sm text-blue-600/80\">Latest Revenue</div>\n              </div>\n              <div className=\"text-center p-3 rounded-lg\">\n                <div className=\"text-md font-bold text-green-600\">\n                  {chartData[chartData.length - 1]?.bookingCount}\n                </div>\n                <div className=\"text-sm text-green-600/80\">\n                  Latest Bookings\n                </div>\n              </div>\n              <div className=\"text-center p-3 rounded-lg\">\n                <div className=\"text-md font-bold text-amber-600\">\n                  Nu.{\" \"}\n                  {chartData[\n                    chartData.length - 1\n                  ]?.averageBookingValue?.toLocaleString()}\n                </div>\n                <div className=\"text-sm text-amber-600/80\">\n                  Avg. Booking Value\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default MonthlyPerformanceChart;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/PasscodeVerification.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/QRCodeScanner.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/RoomItemForm.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'uploadFile' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"uploadFile"},"fix":{"range":[134,145],"text":""},"desc":"Remove unused variable 'uploadFile'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// RoomItemForm.jsx\nimport React, { useState } from \"react\";\nimport { FiPlus, FiTrash2, FiSave, FiX } from \"react-icons/fi\";\nimport { uploadFile, deleteFileByUrl } from \"../../shared/services/uploadService\";\nimport { toast } from \"sonner\";\nimport {\n  FaBed,\n  FaTv,\n  FaWifi,\n  FaSnowflake,\n  FaSwimmingPool,\n  FaParking,\n  FaCoffee,\n  FaShower,\n  FaUser,\n  FaEye,\n} from \"react-icons/fa\";\nimport { GiDesk } from \"react-icons/gi\";\nimport { MdBalcony, MdElectricalServices } from \"react-icons/md\";\n\nconst RoomItemForm = ({ room = null, onSave, onCancel, isEditing = false }) => {\n  // Initial form state\n  const initialFormState = {\n    type: \"\",\n    price: \"\",\n    maxGuests: 2,\n    isAvailable: true,\n    description: \"\",\n    images: [],\n    amenities: [],\n  };\n\n  // Form state\n  const [formData, setFormData] = useState(room || initialFormState);\n  const [newAmenity, setNewAmenity] = useState({\n    name: \"\",\n    icon: \"custom\",\n  });\n  const [deletingImageIndex, setDeletingImageIndex] = useState(null);\n\n  // Standard amenities with icons\n  const standardAmenities = [\n    { id: \"single-bed\", name: \"Single Bed\", icon: <FaBed /> },\n    { id: \"double-bed\", name: \"Double Bed\", icon: <FaBed /> },\n    { id: \"king-bed\", name: \"King Bed\", icon: <FaBed /> },\n    { id: \"smart-tv\", name: \"Smart TV\", icon: <FaTv /> },\n    { id: \"wifi\", name: \"Wi-Fi\", icon: <FaWifi /> },\n    { id: \"ac\", name: \"Air Conditioning\", icon: <FaSnowflake /> },\n    { id: \"pool\", name: \"Pool Access\", icon: <FaSwimmingPool /> },\n    { id: \"parking\", name: \"Parking\", icon: <FaParking /> },\n    { id: \"kettle\", name: \"Electric Kettle\", icon: <FaCoffee /> },\n    { id: \"shower\", name: \"Hot Shower\", icon: <FaShower /> },\n    { id: \"wardrobe\", name: \"Wardrobe\", icon: <FaUser /> },\n    { id: \"mirror\", name: \"Mirror\", icon: <FaEye /> },\n    { id: \"desk\", name: \"Work Desk\", icon: <GiDesk /> },\n    { id: \"balcony\", name: \"Balcony\", icon: <MdBalcony /> },\n    { id: \"outlets\", name: \"Power Outlets\", icon: <MdElectricalServices /> },\n  ];\n\n  // Handle input changes\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n  };\n\n  // Handle image upload\n  const handleImageUpload = (e) => {\n    const files = Array.from(e.target.files);\n    \n    // Validate file sizes (4MB limit per file)\n    const maxFileSize = 4 * 1024 * 1024; // 4MB in bytes\n    const oversizedFiles = files.filter(file => file.size > maxFileSize);\n    \n    if (oversizedFiles.length > 0) {\n      const fileNames = oversizedFiles.map(file => file.name).join(', ');\n      alert(`File size too large: ${fileNames}\\n\\nEach image must be smaller than 4MB. Please compress your images and try again.`);\n      return;\n    }\n\n    const newImages = files.map((file) => URL.createObjectURL(file));\n    setFormData({\n      ...formData,\n      images: [...formData.images, ...newImages],\n    });\n  };\n\n  // Remove an image\n  const removeImage = async (index) => {\n    const imageUrl = formData.images[index];\n    \n    if (!imageUrl) {\n      toast.error(\"No image URL found to delete\");\n      return;\n    }\n\n    setDeletingImageIndex(index);\n    \n    try {\n      // Delete the file from UploadThing\n      const result = await deleteFileByUrl(imageUrl);\n      \n      if (result.success) {\n        // Remove from local state only after successful deletion\n        const updatedImages = [...formData.images];\n        updatedImages.splice(index, 1);\n        setFormData({\n          ...formData,\n          images: updatedImages,\n        });\n        \n        toast.success(result.message || \"Image deleted successfully\", {\n          duration: 6000\n        });\n      } else {\n        toast.error(result.message || \"Failed to delete image\", {\n          duration: 6000\n        });\n      }\n    } catch (error) {\n      console.error(\"Error deleting image:\", error);\n      toast.error(\"Failed to delete image. Please try again.\", {\n        duration: 6000\n      });\n    } finally {\n      setDeletingImageIndex(null);\n    }\n  };\n\n  // Toggle standard amenity\n  const toggleAmenity = (amenity) => {\n    const isSelected = formData.amenities.some((a) => a.id === amenity.id);\n\n    if (isSelected) {\n      setFormData({\n        ...formData,\n        amenities: formData.amenities.filter((a) => a.id !== amenity.id),\n      });\n    } else {\n      setFormData({\n        ...formData,\n        amenities: [...formData.amenities, amenity],\n      });\n    }\n  };\n\n  // Handle custom amenity input\n  const handleCustomAmenityChange = (e) => {\n    setNewAmenity({\n      ...newAmenity,\n      name: e.target.value,\n    });\n  };\n\n  // Add custom amenity\n  const addCustomAmenity = () => {\n    if (!newAmenity.name.trim()) return;\n\n    const amenityToAdd = {\n      id: `custom-${Date.now()}`,\n      name: newAmenity.name,\n      icon: newAmenity.icon,\n    };\n\n    setFormData({\n      ...formData,\n      amenities: [...formData.amenities, amenityToAdd],\n    });\n\n    setNewAmenity({\n      name: \"\",\n      icon: \"custom\",\n    });\n  };\n\n  // Remove amenity\n  const removeAmenity = (id) => {\n    setFormData({\n      ...formData,\n      amenities: formData.amenities.filter((a) => a.id !== id),\n    });\n  };\n\n  // Handle form submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Basic validation\n    if (!formData.type || !formData.price || !formData.description) {\n      alert(\"Please fill all required fields\");\n      return;\n    }\n\n    // Call the save function with form data\n    onSave(formData);\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-md p-6\">\n      <h2 className=\"text-xl font-semibold mb-4\">\n        {isEditing ? \"Edit Room\" : \"Add New Room\"}\n      </h2>\n\n      <form onSubmit={handleSubmit}>\n        {/* Room Basic Information */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n          {/* Room Type */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Room Type *\n            </label>\n            <select\n              name=\"type\"\n              value={formData.type}\n              onChange={handleInputChange}\n              required\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500\"\n            >\n              <option value=\"\">Select Room Type</option>\n              <option value=\"Single Room\">Single Room</option>\n              <option value=\"Double Room\">Double Room</option>\n              <option value=\"Deluxe Room\">Deluxe Room</option>\n              <option value=\"Suite\">Suite</option>\n              <option value=\"Family Room\">Family Room</option>\n              <option value=\"Executive Room\">Executive Room</option>\n            </select>\n          </div>\n\n          {/* Price */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Price per Night (Nu.) *\n            </label>\n            <input\n              type=\"number\"\n              name=\"price\"\n              value={formData.price}\n              onChange={handleInputChange}\n              required\n              min=\"0\"\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500\"\n            />\n          </div>\n\n          {/* Max Guests */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Maximum Guests *\n            </label>\n            <input\n              type=\"number\"\n              name=\"maxGuests\"\n              value={formData.maxGuests}\n              onChange={handleInputChange}\n              required\n              min=\"1\"\n              max=\"10\"\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500\"\n            />\n          </div>\n\n          {/* Availability */}\n          <div className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              id=\"isAvailable\"\n              name=\"isAvailable\"\n              checked={formData.isAvailable}\n              onChange={handleInputChange}\n              className=\"h-4 w-4 text-amber-600 focus:ring-amber-500 border-gray-300 rounded\"\n            />\n            <label\n              htmlFor=\"isAvailable\"\n              className=\"ml-2 block text-sm text-gray-700\"\n            >\n              Available for Booking\n            </label>\n          </div>\n\n          {/* Description */}\n          <div className=\"md:col-span-2\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Description *\n            </label>\n            <textarea\n              name=\"description\"\n              value={formData.description}\n              onChange={handleInputChange}\n              required\n              rows={3}\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500\"\n              placeholder=\"Describe the room features, size, view, etc.\"\n            ></textarea>\n          </div>\n        </div>\n\n        {/* Room Images */}\n        <div className=\"mb-6\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Room Images\n          </label>\n\n          {/* Image Preview Grid */}\n          <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3 mb-3\">\n            {formData.images.map((image, index) => (\n              <div key={index} className=\"relative group\">\n                <img\n                  src={image}\n                  alt={`Room Preview ${index}`}\n                  className=\"w-full h-32 object-cover rounded-lg\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => removeImage(index)}\n                  className=\"absolute top-2 right-2 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity disabled:opacity-50\"\n                  disabled={deletingImageIndex === index}\n                >\n                  {deletingImageIndex === index ? (\n                    <div className=\"w-3 h-3 border border-white border-t-transparent rounded-full animate-spin\" />\n                  ) : (\n                    <FiTrash2 size={14} />\n                  )}\n                </button>\n              </div>\n            ))}\n          </div>\n\n          {/* Image Upload */}\n          <label className=\"flex flex-col items-center justify-center w-full p-6 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-amber-400 transition\">\n            <FiPlus className=\"text-amber-500 text-2xl mb-2\" />\n            <p className=\"text-sm text-gray-600\">Upload Room Images (Max 5)</p>\n            <input\n              type=\"file\"\n              multiple\n              accept=\"image/*\"\n              onChange={handleImageUpload}\n              className=\"hidden\"\n              disabled={formData.images.length >= 5}\n            />\n          </label>\n          {formData.images.length >= 5 && (\n            <p className=\"text-xs text-gray-500 mt-1\">\n              Maximum 5 images reached\n            </p>\n          )}\n        </div>\n\n        {/* Amenities Section */}\n        <div className=\"mb-6\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n            Room Amenities & Facilities\n          </label>\n\n          {/* Standard Amenities */}\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium text-gray-500 mb-2\">\n              Standard Amenities\n            </h4>\n            <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3\">\n              {standardAmenities.map((amenity) => (\n                <div\n                  key={amenity.id}\n                  onClick={() => toggleAmenity(amenity)}\n                  className={`flex items-center p-2 rounded-lg cursor-pointer border ${\n                    formData.amenities.some((a) => a.id === amenity.id)\n                      ? \"bg-amber-50 border-amber-300\"\n                      : \"bg-gray-50 border-gray-200\"\n                  }`}\n                >\n                  <span className=\"text-amber-500 mr-2\">{amenity.icon}</span>\n                  <span className=\"text-sm\">{amenity.name}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Custom Amenities */}\n          <div>\n            <h4 className=\"text-sm font-medium text-gray-500 mb-2\">\n              Custom Amenities\n            </h4>\n\n            {/* Selected Amenities */}\n            <div className=\"flex flex-wrap gap-2 mb-3\">\n              {formData.amenities.map((amenity) => (\n                <div\n                  key={amenity.id}\n                  className=\"flex items-center bg-amber-50 px-3 py-1 rounded-full text-sm\"\n                >\n                  {amenity.icon === \"custom\" ? (\n                    <FiPlus className=\"text-amber-500 mr-1\" />\n                  ) : (\n                    <span className=\"text-amber-500 mr-1\">\n                      {standardAmenities.find((a) => a.id === amenity.id)?.icon}\n                    </span>\n                  )}\n                  {amenity.name}\n                  <button\n                    type=\"button\"\n                    onClick={() => removeAmenity(amenity.id)}\n                    className=\"ml-1 text-gray-500 hover:text-red-500\"\n                  >\n                    <FiX size={14} />\n                  </button>\n                </div>\n              ))}\n            </div>\n\n            {/* Add Custom Amenity */}\n            <div className=\"flex gap-2\">\n              <input\n                type=\"text\"\n                value={newAmenity.name}\n                onChange={handleCustomAmenityChange}\n                placeholder=\"Add custom amenity...\"\n                className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500 text-sm\"\n              />\n              <button\n                type=\"button\"\n                onClick={addCustomAmenity}\n                className=\"px-3 py-2 bg-amber-500 text-white rounded-lg hover:bg-amber-600 text-sm\"\n              >\n                Add\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Form Actions */}\n        <div className=\"flex justify-end gap-3 pt-4 border-t\">\n          <button\n            type=\"button\"\n            onClick={onCancel}\n            className=\"px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n          <button\n            type=\"submit\"\n            className=\"px-4 py-2 bg-amber-500 text-white rounded-lg hover:bg-amber-600 flex items-center gap-2\"\n          >\n            <FiSave /> {isEditing ? \"Update Room\" : \"Save Room\"}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default RoomItemForm;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/RoomStatusTable.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchRoomStatus'. Either include it or remove the dependency array.","line":31,"column":6,"nodeType":"ArrayExpression","endLine":31,"endColumn":60,"suggestions":[{"desc":"Update the dependencies array to be: [hotelId, currentPage, isTableVisible, isSearchActive, fetchRoomStatus]","fix":{"range":[1123,1177],"text":"[hotelId, currentPage, isTableVisible, isSearchActive, fetchRoomStatus]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'performSearch'. Either include it or remove the dependency array.","line":38,"column":6,"nodeType":"ArrayExpression","endLine":38,"endColumn":57,"suggestions":[{"desc":"Update the dependencies array to be: [currentPage, isSearchActive, searchQuery, hotelId, performSearch]","fix":{"range":[1355,1406],"text":"[currentPage, isSearchActive, searchQuery, hotelId, performSearch]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":377,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":377,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"index"},"fix":{"range":[13134,13141],"text":""},"desc":"Remove unused variable 'index'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from '@/shared/components/card';\nimport { Badge } from '@/shared/components/badge';\nimport { Button } from '@/shared/components/button';\nimport { SearchButton } from '@/shared/components';\nimport { ChevronDown, ChevronUp, Search, X } from 'lucide-react';\nimport api from \"../../shared/services/Api\";\nimport YakRoomsLoader from '@/shared/components/YakRoomsLoader';\n\nconst RoomStatusTable = ({ hotelId }) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [isTableVisible, setIsTableVisible] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchLoading, setSearchLoading] = useState(false);\n  const [isSearchActive, setIsSearchActive] = useState(false);\n  const [searchError, setSearchError] = useState(false);\n  const pageSize = 8;\n\n  useEffect(() => {\n    if (hotelId && !isSearchActive) {\n      fetchRoomStatus();\n    }\n  }, [hotelId, currentPage, isTableVisible, isSearchActive]);\n\n  // Separate effect for search functionality and pagination\n  useEffect(() => {\n    if (hotelId && isSearchActive && searchQuery.trim()) {\n      performSearch();\n    }\n  }, [currentPage, isSearchActive, searchQuery, hotelId]);\n\n  const getStatusBadgeVariant = (status) => {\n    switch (status?.toLowerCase()) {\n      case 'available':\n        return 'default';\n      case 'booked':\n        return 'secondary';\n      case 'confirmed':\n        return 'destructive';\n      default:\n        return 'outline';\n    }\n  };\n\n  const getStatusBadgeStyles = (status) => {\n    switch (status?.toLowerCase()) {\n      case 'available':\n        return 'bg-green-100 text-green-800 hover:bg-green-200 border-green-200';\n      case 'booked':\n        return 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200 border-yellow-200';\n      case 'confirmed':\n        return 'bg-blue-100 text-blue-800 hover:bg-blue-200 border-blue-200';\n      default:\n        return 'bg-gray-100 text-gray-800 hover:bg-gray-200 border-gray-200';\n    }\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return '—';\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    });\n  };\n\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n  };\n\n  const performSearch = async () => {\n    if (!searchQuery.trim()) {\n      return;\n    }\n\n    setSearchLoading(true);\n    setError(null);\n    setSearchError(false);\n    \n    try {\n      console.log('Performing search:', {\n        roomNumber: searchQuery.trim(),\n        page: currentPage,\n        size: pageSize,\n        hotelId\n      });\n      \n      // Use the provided API endpoint for room search with current page\n      const response = await api.get(`/rooms/status/${hotelId}/search`, {\n        params: {\n          roomNumber: searchQuery.trim(),\n          page: currentPage,\n          size: pageSize\n        }\n      });\n      \n      console.log('Search response:', response.data);\n      \n      if (response.status !== 200) {\n        throw new Error('Failed to search rooms');\n      }\n      \n      const searchResult = response.data;\n      \n      // Validate the search result structure\n      if (!searchResult || typeof searchResult !== 'object') {\n        throw new Error('Invalid search response format');\n      }\n      \n      // Ensure content array exists\n      if (!Array.isArray(searchResult.content)) {\n        console.warn('Search result missing content array, creating empty array');\n        searchResult.content = [];\n      }\n      \n      setData(searchResult);\n      setSearchError(false);\n      \n      console.log('Search results processed:', {\n        totalElements: searchResult.totalElements,\n        totalPages: searchResult.totalPages,\n        currentPage,\n        contentLength: searchResult.content.length\n      });\n      \n    } catch (err) {\n      console.error('Search error details:', err);\n      console.error('Error response:', err.response?.data);\n      \n      // Keep search input and show error message\n      setSearchError(true);\n      setData({ content: [], totalElements: 0, totalPages: 0 });\n      setError(null);\n    } finally {\n      setSearchLoading(false);\n    }\n  };\n\n  const handleSearch = async () => {\n    if (!searchQuery.trim()) {\n      // If search is empty, reset to normal view\n      setIsSearchActive(false);\n      setSearchError(false);\n      setCurrentPage(0);\n      return;\n    }\n\n    // Reset to first page for new search\n    setCurrentPage(0);\n    setIsSearchActive(true);\n    \n    // Perform the search (this will trigger the useEffect above)\n    await performSearch();\n  };\n\n  const clearSearch = () => {\n    setSearchQuery('');\n    setIsSearchActive(false);\n    setSearchError(false);\n    setCurrentPage(0);\n  };\n\n  const fetchRoomStatus = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await api.get(`/rooms/status/${hotelId}?page=${currentPage}&size=${pageSize}`);\n      \n      if (response.status !== 200) {\n        throw new Error('Failed to fetch room status data');\n      }\n      \n      const result = await response.data;\n      setData(result);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (error) {\n    return (\n      <Card className=\"w-full\">\n        <CardContent className=\"p-6\">\n          <div className=\"text-center text-red-600\">\n            <p className=\"text-lg font-semibold\">Error loading room status</p>\n            <p className=\"text-sm mt-2\">{error}</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Handle empty data state more professionally\n  const hasNoRooms = !data || !data.content || data.content.length === 0;\n\n  return (\n    <div className=\"w-full\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Room Overview</CardTitle>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setIsTableVisible(!isTableVisible)}\n            className=\"flex items-center gap-2\"\n          >\n            {isTableVisible ? (\n              <>\n                <ChevronUp className=\"h-4 w-4\" />\n                Hide \n              </>\n            ) : (\n              <>\n                <ChevronDown className=\"h-4 w-4\" />\n                Show \n              </>\n            )}\n          </Button>\n        </div>\n      </CardHeader>\n      {isTableVisible && (\n        <CardContent className=\"px-2 sm:px-6\">\n          {/* Search Bar */}\n          <div className=\"mb-4 flex flex-col sm:flex-row gap-2\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search by room number...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n                className=\"w-full pl-10 pr-10 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n              {searchQuery && (\n                <button\n                  onClick={clearSearch}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </button>\n              )}\n            </div>\n            <div className=\"flex justify-end\">\n              <SearchButton\n                onClick={handleSearch}\n                disabled={searchLoading}\n                loading={searchLoading}\n                loadingText=\"Searching...\"\n              >\n                Search\n              </SearchButton>\n            </div>\n          </div>\n\n          {/* Search Error Message */}\n          {searchError && (\n            <div className=\"mb-3 flex items-center justify-between bg-red-50 border border-red-200 rounded-md p-2\">\n              <span className=\"text-sm text-red-700\">\n                No search results found for \"{searchQuery}\"\n              </span>\n              <button\n                onClick={clearSearch}\n                className=\"text-sm text-red-600 hover:text-red-800 underline\"\n              >\n                Clear search\n              </button>\n            </div>\n          )}\n\n          {/* Search Results Indicator */}\n          {isSearchActive && !searchError && (\n            <div className=\"mb-3 flex items-center justify-between bg-blue-50 border border-blue-200 rounded-md p-2\">\n              <span className=\"text-sm text-blue-700\">\n                {data.totalElements === 0 \n                  ? 'No rooms found' \n                  : `Showing search results for \"${searchQuery}\"`}\n              </span>\n              <button\n                onClick={clearSearch}\n                className=\"text-sm text-blue-600 hover:text-blue-800 underline\"\n              >\n                Clear search\n              </button>\n            </div>\n          )}\n\n          {/* Empty State */}\n          {hasNoRooms && !loading && !searchLoading && !searchError && (\n            <div className=\"text-center py-12\">\n              <div className=\"mx-auto w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-4\">\n                <Search className=\"h-8 w-8 text-gray-400\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No rooms available</h3>\n              <p className=\"text-gray-500 mb-4\">\n                {isSearchActive \n                  ? \"No rooms match your search criteria. Try adjusting your search terms.\"\n                  : \"This hotel doesn't have any rooms configured yet.\"\n                }\n              </p>\n              {isSearchActive && (\n                <Button \n                  variant=\"outline\" \n                  onClick={clearSearch}\n                  className=\"mt-2\"\n                >\n                  Clear search\n                </Button>\n              )}\n            </div>\n          )}\n\n          {/* Loading State */}\n          {(loading || searchLoading) && (\n            <div className=\"flex justify-center items-center py-12\">\n              <YakRoomsLoader \n                size={112} \n                showTagline={false} \n                loadingText=\"\"\n                className=\"mb-4\"\n              />\n            </div>\n          )}\n\n          {/* Hide table content when loading, there's a search error or no data */}\n          {!loading && !searchLoading && !searchError && !hasNoRooms && (\n            <>\n              {/* Desktop Table View */}\n              <div className=\"hidden md:block rounded-md border overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"border-b bg-gray-50/50\">\n                    <tr>\n                      <th className=\"h-10 px-3 text-left align-middle font-medium text-sm text-gray-900 w-[120px]\">Room Number</th>\n                      <th className=\"h-10 px-3 text-left align-middle font-medium text-sm text-gray-900\">Room Type</th>\n                      <th className=\"h-10 px-3 text-left align-middle font-medium text-sm text-gray-900\">Room Status</th>\n                      <th className=\"h-10 px-3 text-left align-middle font-medium text-sm text-gray-900\">Guest Name</th>\n                      <th className=\"h-10 px-3 text-left align-middle font-medium text-sm text-gray-900\">Check-Out Date</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {data.content.map((room, index) => (\n                      <tr \n                        key={room.roomNumber} \n                        className={`border-b transition-colors hover:bg-gray-100/50 ${index % 2 === 0 ? 'bg-gray-50/30' : ''}`}\n                      >\n                        <td className=\"p-3 align-middle font-medium text-sm\">{room.roomNumber}</td>\n                        <td className=\"p-3 align-middle text-sm\">{room.roomType}</td>\n                        <td className=\"p-3 align-middle\">\n                          <Badge \n                            variant={getStatusBadgeVariant(room.roomStatus)}\n                            className={`${getStatusBadgeStyles(room.roomStatus)} text-xs`}\n                          >\n                            {room.roomStatus}\n                          </Badge>\n                        </td>\n                        <td className=\"p-3 align-middle text-sm\">{room.guestName || 'No guest'}</td>\n                        <td className=\"p-3 align-middle text-sm\">{formatDate(room.checkOutDate)}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n\n              {/* Mobile Card View */}\n              <div className=\"md:hidden space-y-3\">\n                {data.content.map((room, index) => (\n                  <div \n                    key={room.roomNumber} \n                    className=\"bg-white border rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow\"\n                  >\n                    <div className=\"flex justify-between items-start mb-3\">\n                      <div>\n                        <h3 className=\"font-semibold text-lg\">Room {room.roomNumber}</h3>\n                        <p className=\"text-sm text-gray-600\">{room.roomType}</p>\n                      </div>\n                      <Badge \n                        variant={getStatusBadgeVariant(room.roomStatus)}\n                        className={`${getStatusBadgeStyles(room.roomStatus)} text-xs`}\n                      >\n                        {room.roomStatus}\n                      </Badge>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-gray-500\">Guest:</span>\n                        <span className=\"text-sm font-medium\">{room.guestName || 'No guest'}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-gray-500\">Check-out:</span>\n                        <span className=\"text-sm font-medium\">{formatDate(room.checkOutDate)}</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {data.totalPages > 1 && (\n                <div className=\"mt-4 flex justify-center\">\n                  <nav className=\"flex items-center space-x-1 sm:space-x-2\">\n                    <button\n                      onClick={() => handlePageChange(currentPage - 1)}\n                      disabled={currentPage === 0}\n                      className={`px-2 sm:px-3 py-1.5 sm:py-2 text-xs sm:text-sm font-medium rounded-md ${\n                        currentPage === 0\n                          ? 'bg-gray-100 text-gray-400 cursor-not-allowed'\n                          : 'bg-white border border-gray-300 text-gray-700 hover:bg-gray-50 cursor-pointer'\n                      }`}\n                    >\n                      Previous\n                    </button>\n                    \n                    <div className=\"flex space-x-0.5 sm:space-x-1\">\n                      {/* Show limited page numbers on mobile */}\n                      {[...Array(data.totalPages)].map((_, index) => {\n                        // On mobile, show current page, first, last, and adjacent pages\n                        const showPage = index === 0 || \n                                       index === data.totalPages - 1 || \n                                       index === currentPage || \n                                       index === currentPage - 1 || \n                                       index === currentPage + 1;\n                        \n                        const showEllipsis = (index === currentPage - 2 && currentPage > 2) || \n                                           (index === currentPage + 2 && currentPage < data.totalPages - 3);\n                        \n                        if (!showPage && !showEllipsis) return null;\n                        \n                        if (showEllipsis) {\n                          return <span key={index} className=\"px-1 text-gray-500\">...</span>;\n                        }\n                        \n                        return (\n                          <button\n                            key={index}\n                            onClick={() => handlePageChange(index)}\n                            className={`px-2 sm:px-3 py-1.5 sm:py-2 text-xs sm:text-sm font-medium rounded-md ${\n                              currentPage === index\n                                ? 'bg-blue-600 text-white'\n                                : 'bg-white border border-gray-300 text-gray-700 hover:bg-gray-50'\n                            } cursor-pointer`}\n                          >\n                            {index + 1}\n                          </button>\n                        );\n                      })}\n                    </div>\n                    \n                    <button\n                      onClick={() => handlePageChange(currentPage + 1)}\n                      disabled={currentPage === data.totalPages - 1}\n                      className={`px-2 sm:px-3 py-1.5 sm:py-2 text-xs sm:text-sm font-medium rounded-md ${\n                        currentPage === data.totalPages - 1\n                          ? 'bg-gray-100 text-gray-400 cursor-not-allowed'\n                          : 'bg-white border border-gray-300 text-gray-700 hover:bg-gray-50 cursor-pointer'\n                      }`}\n                    >\n                      Next\n                    </button>\n                  </nav>\n                </div>\n              )}\n            </>\n          )}\n        </CardContent>\n      )}\n    </div>\n  );\n};\n\nexport default RoomStatusTable;","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/ScannedBookingModal.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":32,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"loading"},"fix":{"range":[844,851],"text":""},"desc":"Remove unused variable 'loading'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Icon' is defined but never used.","line":197,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":197,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"Icon"},"fix":{"range":[6151,6162],"text":""},"desc":"Remove unused variable 'Icon'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/shared/components/dialog\";\nimport { Button } from \"@/shared/components/button\";\nimport { Badge } from \"@/shared/components/badge\";\nimport { Separator } from \"@/shared/components/separator\";\nimport { Alert, AlertDescription } from \"@/shared/components/alert\";\nimport { \n  QrCode, \n  Calendar, \n  MapPin, \n  Users, \n  Phone, \n  CreditCard, \n  Clock,\n  CheckCircle,\n  XCircle,\n  AlertTriangle,\n  User,\n  Building,\n  Bed,\n  RefreshCw,\n  ExternalLink,\n  Mail,\n  Key,\n  Loader2\n} from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport api from \"../../shared/services/Api\";\n\nconst ScannedBookingModal = ({ isOpen, onClose, scannedData }) => {\n  const [bookingDetails, setBookingDetails] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [verificationStatus, setVerificationStatus] = useState('pending');\n  const [checkingIn, setCheckingIn] = useState(false);\n  const [checkInMessage, setCheckInMessage] = useState('');\n\n  useEffect(() => {\n    if (isOpen && scannedData) {\n      if (scannedData.error) {\n        setError(scannedData.error);\n        setVerificationStatus('invalid');\n        return;\n      }\n      \n      // If scanned data contains full booking info, use it directly\n      if (scannedData.id || scannedData.bookingId) {\n        setBookingDetails(scannedData);\n        verifyBooking(scannedData);\n      } else {\n        setError('Invalid QR code format');\n        setVerificationStatus('invalid');\n      }\n    }\n  }, [isOpen, scannedData]);\n\n  const verifyBooking = async (data) => {\n    try {\n      setLoading(true);\n      setVerificationStatus('verifying');\n      \n      const bookingId = data.id || data.bookingId;\n      const response = await api.get(`/bookings/${bookingId}`);\n      \n      if (response.status === 200) {\n        // Merge scanned data with verified data from database\n        const verifiedData = {\n          ...data,\n          ...response.data,\n          verified: true,\n          verificationTime: new Date().toISOString()\n        };\n        \n        setBookingDetails(verifiedData);\n        setVerificationStatus('verified');\n        \n        toast.success(\"Booking Verified\", {\n          description: \"This is a valid booking\",\n          duration: 6000\n        });\n      }\n    } catch (err) {\n      console.error('Error verifying booking:', err);\n      setError('Unable to verify booking. Please check manually.');\n      setVerificationStatus('error');\n      \n      toast.error(\"Verification Failed\", {\n        description: \"Could not verify booking with database\",\n        duration: 6000\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return 'N/A';\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const formatTime = (dateString) => {\n    if (!dateString) return 'N/A';\n    const date = new Date(dateString);\n    return date.toLocaleString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const formatCurrency = (amount) => {\n    return `Nu ${parseFloat(amount || 0).toFixed(2)}`;\n  };\n\n  const getStatusBadge = () => {\n    switch (verificationStatus) {\n      case 'verified':\n        return <Badge className=\"bg-green-100 text-green-800 border-green-200\"><CheckCircle className=\"w-3 h-3 mr-1\" />Verified</Badge>;\n      case 'verifying':\n        return <Badge variant=\"secondary\"><RefreshCw className=\"w-3 h-3 mr-1 animate-spin\" />Verifying...</Badge>;\n      case 'error':\n        return <Badge variant=\"destructive\"><AlertTriangle className=\"w-3 h-3 mr-1\" />Verification Failed</Badge>;\n      case 'invalid':\n        return <Badge variant=\"destructive\"><XCircle className=\"w-3 h-3 mr-1\" />Invalid QR Code</Badge>;\n      default:\n        return <Badge variant=\"outline\">Pending</Badge>;\n    }\n  };\n\n  const checkIn = async () => {\n    if (!bookingDetails?.id && !bookingDetails?.bookingId) {\n      setError('No booking data available');\n      return;\n    }\n\n    setCheckingIn(true);\n    setError('');\n    setCheckInMessage('');\n\n    try {\n      const bookingId = bookingDetails.id || bookingDetails.bookingId;\n      const response = await api.put(`/bookings/${bookingId}/status/checked_in`);\n      \n      // Handle the response from ResponseEntity.ok(\"Booking status updated successfully.\")\n      if (response.status === 200) {\n        // Update the local booking data with new status\n        setBookingDetails(prev => ({\n          ...prev,\n          status: 'CHECKED_IN'\n        }));\n        setCheckInMessage('Check-in successful! Guest has been checked in.');\n        \n        toast.success(\"Check-in Successful!\", {\n          description: \"Guest has been checked in successfully\",\n          duration: 6000\n        });\n        \n        // Clear the success message after 5 seconds\n        setTimeout(() => {\n          setCheckInMessage('');\n        }, 5000);\n      } else {\n        setError('Failed to check in');\n      }\n    } catch (err) {\n      console.error('Check-in error:', err);\n      if (err.response?.data?.message) {\n        setError(err.response.data.message);\n      } else if (err.response?.status === 404) {\n        setError('Booking not found');\n      } else if (err.response?.status === 400) {\n        setError('Invalid status value');\n      } else if (err.response?.status === 403) {\n        setError('You are not authorized to perform this action');\n      } else if (err.response?.status === 409) {\n        setError('Cannot check in. The booking may be in an invalid state.');\n      } else {\n        setError('Network error. Please check your connection and try again.');\n      }\n      \n      toast.error(\"Check-in Failed\", {\n        description: \"Unable to check in guest. Please try again.\",\n        duration: 6000\n      });\n    } finally {\n      setCheckingIn(false);\n    }\n  };\n\n  const InfoItem = ({ icon: Icon, label, value, className = \"\" }) => (\n    <div className={`flex items-start gap-3 py-3 ${className}`}>\n      <Icon className=\"h-4 w-4 text-muted-foreground mt-0.5 flex-shrink-0\" />\n      <div className=\"min-w-0 flex-1\">\n        <div className=\"text-sm font-medium text-foreground\">{label}</div>\n        <div className=\"text-sm text-muted-foreground break-words\">{value}</div>\n      </div>\n    </div>\n  );\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2 text-lg\">\n            <QrCode className=\"h-5 w-5\" />\n            Booking Details\n            <div className=\"flex items-center gap-2 ml-auto\">\n              {getStatusBadge()}\n              {checkingIn && (\n                <Loader2 className=\"h-3 w-3 animate-spin text-muted-foreground\" />\n              )}\n            </div>\n          </DialogTitle>\n          <DialogDescription className=\"text-sm\">\n            Booking information from scanned QR code\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {error && (\n            <div className=\"flex items-start gap-3 p-4 border border-destructive/20 rounded-lg\">\n              <AlertTriangle className=\"h-5 w-5 text-destructive mt-0.5 flex-shrink-0\" />\n              <div>\n                <div className=\"font-medium text-destructive\">Error</div>\n                <div className=\"text-sm text-destructive/80\">{error}</div>\n              </div>\n            </div>\n          )}\n\n          {/* Check-in Success Message */}\n          {checkInMessage && (\n            <Alert>\n              <CheckCircle className=\"h-4 w-4\" />\n              <AlertDescription className=\"text-sm font-medium\">\n                {checkInMessage}\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {bookingDetails && (\n            <>\n              {/* Booking Status */}\n              <div className=\"text-center py-4\">\n                <div className=\"text-sm text-muted-foreground mb-2\">Current Status</div>\n                <Badge variant=\"outline\" className=\"text-base px-4 py-2\">\n                  {bookingDetails.status || 'CONFIRMED'}\n                </Badge>\n              </div>\n\n              <Separator />\n\n              {/* Hotel and Room Information */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-base font-semibold text-foreground flex items-center gap-2\">\n                  <Building className=\"h-4 w-4\" />\n                  Accommodation Details\n                </h3>\n                \n                <div className=\"grid gap-0 divide-y\">\n                  <InfoItem\n                    icon={MapPin}\n                    label=\"Hotel\"\n                    value={\n                      <div>\n                        <div>{bookingDetails.hotelName || 'Hotel Name Not Available'}</div>\n                        {bookingDetails.hotelDistrict && (\n                          <div className=\"text-xs text-muted-foreground mt-1\">\n                            📍 {bookingDetails.hotelDistrict}\n                          </div>\n                        )}\n                      </div>\n                    }\n                  />\n                  \n                  <InfoItem\n                    icon={Bed}\n                    label=\"Room\"\n                    value={`Room ${bookingDetails.roomNumber || 'N/A'}`}\n                  />\n                  \n                  <div className=\"grid sm:grid-cols-2 sm:divide-x\">\n                    <InfoItem\n                      icon={Calendar}\n                      label=\"Check-in\"\n                      value={formatDate(bookingDetails.checkInDate)}\n                      className=\"sm:pr-4\"\n                    />\n                    \n                    <InfoItem\n                      icon={Calendar}\n                      label=\"Check-out\"\n                      value={formatDate(bookingDetails.checkOutDate)}\n                      className=\"sm:pl-4\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Guest Information */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-base font-semibold text-foreground flex items-center gap-2\">\n                  <User className=\"h-4 w-4\" />\n                  Guest Information\n                </h3>\n                \n                <div className=\"grid gap-0 divide-y\">\n                  {bookingDetails.name && (\n                    <InfoItem\n                      icon={User}\n                      label=\"Guest Name\"\n                      value={bookingDetails.name}\n                    />\n                  )}\n                  \n                  <div className=\"grid sm:grid-cols-2 sm:divide-x\">\n                    {bookingDetails.phone && (\n                      <InfoItem\n                        icon={Phone}\n                        label=\"Phone\"\n                        value={`+975 ${bookingDetails.phone}`}\n                        className=\"sm:pr-4\"\n                      />\n                    )}\n                    \n                    {bookingDetails.email && (\n                      <InfoItem\n                        icon={Mail}\n                        label=\"Email\"\n                        value={bookingDetails.email}\n                        className=\"sm:pl-4\"\n                      />\n                    )}\n                  </div>\n                  \n                  <InfoItem\n                    icon={Users}\n                    label=\"Number of Guests\"\n                    value={`${bookingDetails.guests || 1} ${(bookingDetails.guests || 1) === 1 ? 'Guest' : 'Guests'}`}\n                  />\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Payment and Booking Information */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-base font-semibold text-foreground flex items-center gap-2\">\n                  <CreditCard className=\"h-4 w-4\" />\n                  Payment & Booking Details\n                </h3>\n                \n                <div className=\"grid gap-0 divide-y\">\n                  <div className=\"flex items-start gap-3 py-3\">\n                    <CreditCard className=\"h-4 w-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                    <div className=\"min-w-0 flex-1\">\n                      <div className=\"text-sm font-medium text-foreground\">Total Amount</div>\n                      <div className=\"text-lg font-bold text-green-600\">\n                        {formatCurrency(bookingDetails.totalPrice)}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <InfoItem\n                    icon={Clock}\n                    label=\"Booked On\"\n                    value={formatTime(bookingDetails.createdAt || bookingDetails.bookingTime)}\n                  />\n                </div>\n              </div>\n\n              {/* Check-in Action */}\n              {verificationStatus === 'verified' && (\n                <>\n                  <Separator />\n                  <div className=\"space-y-3\">\n                    <h3 className=\"text-base font-semibold text-foreground\">Guest Check-in</h3>\n                    <Button \n                      className=\"w-full\"\n                      onClick={checkIn}\n                      disabled={checkingIn || bookingDetails?.status === 'CHECKED_IN'}\n                    >\n                      {checkingIn ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Checking In...\n                        </>\n                      ) : bookingDetails?.status === 'CHECKED_IN' ? (\n                        <>\n                          <CheckCircle className=\"mr-2 h-4 w-4\" />\n                          Already Checked In\n                        </>\n                      ) : (\n                        <>\n                          <CheckCircle className=\"mr-2 h-4 w-4\" />\n                          Check In Guest\n                        </>\n                      )}\n                    </Button>\n                    {bookingDetails?.status === 'CHECKED_IN' && (\n                      <p className=\"text-sm text-muted-foreground text-center\">\n                        Guest has already been checked in\n                      </p>\n                    )}\n                  </div>\n                </>\n              )}\n            </>\n          )}\n\n          {/* Close Button */}\n          <div className=\"flex justify-end pt-4 border-t\">\n            <Button onClick={onClose} variant=\"outline\">\n              Close\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default ScannedBookingModal;","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/StaffManager.jsx","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\+.","line":63,"column":15,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":63,"endColumn":16,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1455,1456],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1455,1455],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\(.","line":158,"column":59,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":158,"endColumn":60,"suggestions":[{"messageId":"removeEscape","fix":{"range":[4378,4379],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[4378,4378],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\).","line":158,"column":61,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":158,"endColumn":62,"suggestions":[{"messageId":"removeEscape","fix":{"range":[4380,4381],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[4380,4380],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from \"react\";\nimport { Input } from \"@/shared/components/input\";\nimport { Label } from \"@/shared/components/label\";\nimport { Button } from \"@/shared/components/button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/shared/components/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/shared/components/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/shared/components/alert-dialog\";\n\nimport { Separator } from \"@/shared/components/separator\";\nimport { Skeleton } from \"@/shared/components/skeleton\";\nimport { Badge } from \"@/shared/components/badge\";\nimport { toast } from \"sonner\";\nimport {\n  Trash2,\n  Plus,\n  User,\n  Phone,\n  Mail,\n  Users,\n  AlertCircle,\n  RefreshCw,\n  MoreVertical,\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/shared/components/dropdown-menu\";\nimport api from \"../../shared/services/Api\";\nimport { useAuth } from \"@/features/authentication\";\n\n// Validation utilities\nconst validators = {\n  email: {\n    regex: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n    message: \"Please enter a valid email address\",\n  },\n  phone: {\n    regex: /^[\\+]?[1-9][\\d]{7,15}$/,\n    message: \"Please enter a valid phone number\",\n  },\n};\n\nconst StaffManager = () => {\n  const { hotelId } = useAuth();\n\n  // State management\n  const [staff, setStaff] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [submitting, setSubmitting] = useState(false);\n  const [deletingId, setDeletingId] = useState(null);\n\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [formData, setFormData] = useState({\n    email: \"\",\n    phoneNumber: \"\",\n    position: \"Front Desk\",\n    dateJoined: new Date().toISOString().split('T')[0], // Default to today's date\n  });\n  const [formErrors, setFormErrors] = useState({});\n\n  const staffPositions = [\n    \"Front Desk\",\n    \"Housekeeping\",\n    \"Manager\",\n    \"Concierge\",\n    \"Security\",\n    \"Maintenance\",\n    \"Chef\",\n    \"Porter\",\n    \"Waiter\",\n    \"Bellhop\",\n    \"Other\",\n  ];\n\n  // Fetch staff data\n  const fetchStaff = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const { data } = await api.get(`/staff/hotel/${hotelId}`);\n\n      console.log(\"Staff data fetched:\", data);\n      setStaff(Array.isArray(data) ? data : []);\n    } catch (error) {\n      console.error(\"Error fetching staff:\", error);\n      console.error(\"Error response data:\", error.response?.data);\n      \n      let errorMessage = \"Failed to load staff members\";\n      \n      // Handle different error response formats\n      if (error.response?.data?.message) {\n        errorMessage = error.response.data.message;\n      } else if (error.response?.data?.error) {\n        const responseData = error.response.data;\n        if (responseData.error === \"Internal Server Error\" && responseData.status === 500) {\n          errorMessage = \"The server encountered an unexpected error while loading staff members. Please try again in a few moments.\";\n          console.error(\"Server error details:\", responseData);\n        } else {\n          errorMessage = `Server error: ${responseData.error}`;\n        }\n      } else if (error.response?.status === 500) {\n        errorMessage = \"The server encountered an unexpected error. Please try again in a few moments.\";\n      }\n      \n      setError(errorMessage);\n      toast.error(\"Failed to load staff members. Please try again.\", { duration: 6000 });\n    } finally {\n      setLoading(false);\n    }\n  }, [hotelId]);\n\n  // Initial data fetch\n  useEffect(() => {\n    if (hotelId) {\n    fetchStaff();\n    }\n  }, [fetchStaff, hotelId]);\n\n  // Form validation\n  const validateForm = useCallback(() => {\n    const errors = {};\n\n    // Email validation\n    if (!formData.email.trim()) {\n      errors.email = \"Email is required\";\n    } else if (!validators.email.regex.test(formData.email.trim())) {\n      errors.email = validators.email.message;\n    }\n\n    // Phone validation\n    const cleanPhone = formData.phoneNumber.replace(/[\\s\\-\\(\\)]/g, \"\");\n    if (!formData.phoneNumber.trim()) {\n      errors.phoneNumber = \"Phone number is required\";\n    } else if (!validators.phone.regex.test(cleanPhone)) {\n      errors.phoneNumber = validators.phone.message;\n    }\n\n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  }, [formData]);\n\n  // Add new staff member\n  const handleAddStaff = async (e) => {\n    e?.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      setSubmitting(true);\n\n      const payload = {\n          email: formData.email.trim(),\n          phoneNumber: formData.phoneNumber.trim(),\n        hotelId,\n        position: formData.position,\n        dateJoined: formData.dateJoined,\n        roles: [\"STAFF\"]\n      };\n\n      const { data: newStaff } = await api.post(\"/staff\", payload);\n\n      setStaff((prev) => [...prev, newStaff]);\n      handleCloseDialog();\n      toast.success(\"Staff member added successfully!\", { duration: 6000 });\n    } catch (error) {\n      console.error(\"Error adding staff:\", error);\n      console.error(\"Error response data:\", error.response?.data);\n      let errorMessage = \"Failed to add staff member\";\n      \n      // Handle specific backend exceptions\n      if (error.response?.data?.message) {\n        const backendMessage = error.response.data.message;\n        \n        // Handle ResourceConflictException for email conflicts\n        if (backendMessage.includes(\"Staff\") && backendMessage.includes(\"email\")) {\n          errorMessage = \"A staff member with this email address already exists. Please use a different email.\";\n        } \n        // Handle other conflict exceptions\n        else if (backendMessage.includes(\"already exists\") || backendMessage.includes(\"conflict\")) {\n          errorMessage = \"This staff member information conflicts with existing data. Please check the details and try again.\";\n        }\n        // Handle validation errors\n        else if (backendMessage.includes(\"Invalid\") || backendMessage.includes(\"validation\")) {\n          errorMessage = \"Invalid data provided. Please check the email and phone number format.\";\n        }\n        // Use the backend message directly for other cases\n        else {\n          errorMessage = backendMessage;\n        }\n      }\n      // Handle response body with error field (500 Internal Server Error format)\n      else if (error.response?.data?.error) {\n        const responseData = error.response.data;\n        \n        if (responseData.error === \"Internal Server Error\" && responseData.status === 500) {\n          errorMessage = \"The server encountered an unexpected error while adding the staff member. Please try again in a few moments.\";\n          \n          // Log detailed error for debugging\n          console.error(\"Server error details:\", {\n            timestamp: responseData.timestamp,\n            status: responseData.status,\n            error: responseData.error,\n            path: responseData.path\n          });\n        } else {\n          errorMessage = `Server error: ${responseData.error}`;\n        }\n      }\n      // Handle HTTP status codes\n      else if (error.response?.status === 500) {\n        errorMessage = \"The server encountered an unexpected error. Please try again in a few moments.\";\n      } else if (error.response?.status === 409) {\n        errorMessage = \"A staff member with this email address already exists. Please use a different email.\";\n      } else if (error.response?.status === 400) {\n        errorMessage = \"Invalid data provided. Please check the email and phone number format.\";\n      } else if (error.response?.status === 422) {\n        errorMessage = \"The provided data is invalid or incomplete. Please verify all fields.\";\n      } else if (error.response?.status === 503) {\n        errorMessage = \"The service is temporarily unavailable. Please try again later.\";\n      } else if (error.response?.status >= 500) {\n        errorMessage = \"A server error occurred. Please try again later.\";\n      }\n      \n      toast.error(errorMessage, { duration: 6000 });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  // Delete staff member\n  const handleDeleteStaff = async (staffMember) => {\n    try {\n      setDeletingId(staffMember.id);\n\n      await api.delete(`/staff/${staffMember.staffId}`);\n\n      setStaff((prev) => prev.filter((member) => member.id !== staffMember.id));\n      toast.success(\"Staff member removed successfully!\", { duration: 6000 });\n    } catch (error) {\n      console.error(\"Error deleting staff:\", error);\n      console.error(\"Error response data:\", error.response?.data);\n      \n      let errorMessage = \"Failed to delete staff member\";\n      \n      // Handle different error response formats\n      if (error.response?.data?.message) {\n        errorMessage = error.response.data.message;\n      } else if (error.response?.data?.error) {\n        const responseData = error.response.data;\n        if (responseData.error === \"Internal Server Error\" && responseData.status === 500) {\n          errorMessage = \"The server encountered an unexpected error while deleting the staff member. Please try again in a few moments.\";\n          console.error(\"Server error details:\", responseData);\n        } else {\n          errorMessage = `Server error: ${responseData.error}`;\n        }\n      } else if (error.response?.status === 500) {\n        errorMessage = \"The server encountered an unexpected error. Please try again in a few moments.\";\n      }\n      \n      toast.error(errorMessage, { duration: 6000 });\n    } finally {\n      setDeletingId(null);\n    }\n  };\n\n  // Handle input changes\n  const handleInputChange = useCallback(\n    (field, value) => {\n      setFormData((prev) => ({ ...prev, [field]: value }));\n    // Clear error when user starts typing\n    if (formErrors[field]) {\n        setFormErrors((prev) => ({ ...prev, [field]: undefined }));\n    }\n    },\n    [formErrors]\n  );\n\n  // Reset form and close dialog\n  const handleCloseDialog = useCallback(() => {\n    setFormData({ email: \"\", phoneNumber: \"\", position: \"Front Desk\", dateJoined: new Date().toISOString().split('T')[0] });\n    setFormErrors({});\n    setShowAddDialog(false);\n  }, []);\n\n  // Render loading state\n  if (loading) {\n  return (\n      <div className=\"p-4 max-w-7xl mx-auto space-y-4\">\n        <div className=\"flex flex-col gap-4\">\n          <Skeleton className=\"h-8 w-48\" />\n          <Skeleton className=\"h-10 w-full max-w-40\" />\n        </div>\n        <Card>\n          <CardHeader>\n            <Skeleton className=\"h-6 w-32\" />\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {[...Array(3)].map((_, i) => (\n              <div\n                key={i}\n                className=\"flex items-center justify-between p-3 border rounded-lg\"\n              >\n        <div className=\"flex items-center gap-3\">\n                  <Skeleton className=\"h-10 w-10 rounded-full\" />\n                  <div className=\"space-y-2\">\n                    <Skeleton className=\"h-4 w-32\" />\n                    <Skeleton className=\"h-3 w-24\" />\n                    <Skeleton className=\"h-3 w-28\" />\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Skeleton className=\"h-6 w-12 rounded-full\" />\n                  <Skeleton className=\"h-8 w-8\" />\n          </div>\n        </div>\n            ))}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Render error state\n  if (error && !staff.length) {\n    return (\n      <div className=\"p-4 max-w-7xl mx-auto\">\n        <Card className=\"border-destructive/50 bg-destructive/5\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex flex-col items-center text-center space-y-4\">\n              <div className=\"p-3 bg-destructive/10 rounded-full\">\n                <AlertCircle className=\"h-8 w-8 text-destructive\" />\n              </div>\n              <div className=\"space-y-2\">\n                <h3 className=\"font-semibold text-lg\">Failed to Load Staff</h3>\n                <p className=\"text-muted-foreground text-sm\">{error}</p>\n              </div>\n              <Button\n                variant=\"outline\"\n                onClick={fetchStaff}\n                className=\"flex items-center gap-2\"\n                size=\"sm\"\n              >\n                <RefreshCw className=\"h-4 w-4\" />\n                Try Again\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50/50\">\n      <div className=\"max-w-7xl mx-auto space-y-4\">\n        {/* Mobile-optimized Header */}\n        <div className=\"space-y-3\">\n          \n        <Button \n          onClick={() => setShowAddDialog(true)}\n            className=\"w-full sm:w-auto flex items-center justify-center gap-2\"\n            size=\"default\"\n        >\n          <Plus className=\"h-4 w-4\" />\n          Add Staff Member\n        </Button>\n      </div>\n\n        {/* <Separator /> */}\n\n      {/* Staff List */}\n        <Card className=\"border-0 sm:border shadow-sm\">\n          <CardHeader className=\"\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-16 p-0\">Staff Members</CardTitle>\n                <CardDescription className=\"text-sm\">\n                  {staff.length} {staff.length === 1 ? \"member\" : \"members\"}\n                </CardDescription>\n                    </div>\n              {staff.length > 0 && (\n                <Badge variant=\"secondary\" className=\"text-xs px-2 py-1\">\n                  {staff.length}\n                </Badge>\n              )}\n                  </div>\n          </CardHeader>\n          <CardContent className=\"px-4\">\n            {staff.length === 0 ? (\n              <div className=\"text-center py-12 px-4\">\n                <div className=\"mx-auto w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4\">\n                  <Users className=\"h-8 w-8 text-gray-400\" />\n                </div>\n                <h3 className=\"text-base font-semibold text-gray-900 mb-2\">\n                  No staff members yet\n                </h3>\n                <p className=\"text-gray-600 mb-6 text-sm max-w-xs mx-auto\">\n                  Add your first team member to get started\n                </p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {staff.map((member) => (\n                  <div\n                    key={member.id}\n                    className=\"group relative flex items-center justify-between p-4 border rounded-xl hover:shadow-md transition-all duration-200 bg-white\"\n                  >\n                    <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                      {/* Avatar */}\n                      <div className=\"h-10 w-10 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center flex-shrink-0\">\n                        {member.profilePictureUrl && member.profilePictureUrl !== null ? (\n                          <img \n                            src={member.profilePictureUrl} \n                            alt={member.fullName || 'Staff Member'}\n                            className=\"h-10 w-10 rounded-full object-cover\"\n                          />\n                        ) : (\n                          <User className=\"h-5 w-5 text-white\" />\n                        )}\n                      </div>\n                      \n                      {/* Content */}\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <h4 className=\"font-medium text-gray-900 truncate text-sm\">\n                            {member.fullName || member.staffEmail || \"Staff Member\"}\n                          </h4>\n                          <Badge\n                            variant=\"secondary\"\n                            className=\"bg-green-100 text-green-800 border-green-200 text-xs px-2 py-0.5\"\n                          >\n                            {member.role || \"STAFF\"}\n                          </Badge>\n                    </div>\n                        \n                        {/* Contact Info - Stack on mobile */}\n                    <div className=\"space-y-1\">\n                      <div className=\"flex items-center gap-2\">\n                            <Mail className=\"h-3.5 w-3.5 text-gray-400 flex-shrink-0\" />\n                            <span className=\"text-xs text-gray-600 truncate\">\n                              {member.staffEmail || \"No email\"}\n                            </span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                            <Phone className=\"h-3.5 w-3.5 text-gray-400 flex-shrink-0\" />\n                            <span className=\"text-xs text-gray-600\">\n                              {member.number || \"No phone\"}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Actions - Mobile-friendly dropdown */}\n                  <div className=\"flex items-center gap-2\">\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                        <Button \n                          variant=\"ghost\" \n                            size=\"icon\"\n                            className=\"h-8 w-8\"\n                            disabled={deletingId === member.id}\n                        >\n                            <MoreVertical className=\"h-4 w-4\" />\n                        </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\" className=\"w-40\">\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <DropdownMenuItem\n                                className=\"text-red-600 focus:text-red-600\"\n                                onSelect={(e) => e.preventDefault()}\n                              >\n                                <Trash2 className=\"h-4 w-4 mr-2\" />\n                                Remove\n                              </DropdownMenuItem>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent className=\"mx-4 max-w-md\">\n                              <AlertDialogHeader>\n                                <AlertDialogTitle className=\"text-base\">\n                                  Remove Staff Member\n                                </AlertDialogTitle>\n                                <AlertDialogDescription className=\"text-sm\">\n                                  Are you sure you want to remove{\" \"}\n                                  <span className=\"font-semibold text-gray-900\">\n                                    {member.fullName ||\n                                      member.staffEmail ||\n                                      member.email}\n                                  </span>\n                                  ? This action cannot be undone.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                <AlertDialogAction\n                                  onClick={() => handleDeleteStaff(member)}\n                                  className=\"bg-red-600 hover:bg-red-700\"\n                                >\n                                  Remove\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n        {/* Add Staff Dialog - Mobile optimized */}\n        <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>\n          <DialogContent className=\" max-w-md w-[calc(100vw-2rem)] sm:mx-auto\">\n          <DialogHeader>\n              <DialogTitle className=\"text-lg\">Add New Staff Member</DialogTitle>\n              <DialogDescription className=\"text-sm\">\n                Add a new member to your hotel team. They will receive an\n                invitation to join.\n            </DialogDescription>\n          </DialogHeader>\n            <div className=\"space-y-4 py-2\">\n            <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-sm font-medium\">\n                  Email Address\n                </Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                  placeholder=\"staff@hotel.com\"\n                value={formData.email}\n                  onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                  className={`h-11 ${\n                    formErrors.email ? \"border-red-500 focus:ring-red-500\" : \"\"\n                  }`}\n                disabled={submitting}\n                  autoComplete=\"email\"\n              />\n              {formErrors.email && (\n                  <p className=\"text-xs text-red-600 flex items-center gap-1\">\n                    <AlertCircle className=\"h-3 w-3\" />\n                    {formErrors.email}\n                  </p>\n              )}\n            </div>\n            <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\" className=\"text-sm font-medium\">\n                  Phone Number\n                </Label>\n              <Input\n                id=\"phone\"\n                type=\"tel\"\n                  placeholder=\"+975 17 123 456\"\n                value={formData.phoneNumber}\n                  onChange={(e) =>\n                    handleInputChange(\"phoneNumber\", e.target.value)\n                  }\n                  className={`h-11 ${\n                    formErrors.phoneNumber\n                      ? \"border-red-500 focus:ring-red-500\"\n                      : \"\"\n                  }`}\n                disabled={submitting}\n                  autoComplete=\"tel\"\n              />\n              {formErrors.phoneNumber && (\n                  <p className=\"text-xs text-red-600 flex items-center gap-1\">\n                    <AlertCircle className=\"h-3 w-3\" />\n                    {formErrors.phoneNumber}\n                  </p>\n                )}\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"position\" className=\"text-sm font-medium\">\n                  Position\n                </Label>\n                <select\n                  id=\"position\"\n                  value={formData.position}\n                  onChange={(e) => handleInputChange(\"position\", e.target.value)}\n                  className=\"h-11 w-full rounded-md border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary text-sm px-3 disabled:bg-gray-100\"\n                  disabled={submitting}\n                >\n                  {staffPositions.map((pos) => (\n                    <option key={pos} value={pos}>\n                      {pos}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"dateJoined\" className=\"text-sm font-medium\">\n                  Date Joined\n                </Label>\n                <Input\n                  id=\"dateJoined\"\n                  type=\"date\"\n                  value={formData.dateJoined}\n                  onChange={(e) => handleInputChange(\"dateJoined\", e.target.value)}\n                  className=\"h-11\"\n                  disabled={submitting}\n                />\n              </div>\n            </div>\n            <DialogFooter className=\"flex-col sm:flex-row gap-2 sm:gap-0 pt-2\">\n              <Button \n                type=\"button\"\n                variant=\"outline\" \n                onClick={handleCloseDialog}\n                className=\"w-full sm:w-auto\"\n                disabled={submitting}\n              >\n                Cancel\n              </Button>\n              <Button \n                onClick={handleAddStaff}\n                disabled={submitting}\n                className=\"w-full sm:w-auto\"\n              >\n                {submitting ? (\n                  <span className=\"flex items-center gap-2\">\n                    <div className=\"h-4 w-4 animate-spin rounded-full border-2 border-white border-t-transparent\" />\n                    Adding...\n                  </span>\n                ) : (\n                  <span className=\"flex items-center gap-2\">\n                    <Plus className=\"h-4 w-4\" />\n                    Add Staff\n                  </span>\n                )}\n              </Button>\n            </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      </div>\n    </div>\n  );\n};\n\nexport default StaffManager;","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/hotel/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/landing/About.jsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh can't handle anonymous components. Add a name to your export.","line":5,"column":16,"nodeType":"FunctionDeclaration","messageId":"anonymousExport","endLine":89,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport chogyal from \"../../assets/images/chogyal.jpg\";\nimport { Link } from \"react-router-dom\";\n\nexport default function () {\n  return (\n    // Main container with responsive padding and background\n    <div className=\"min-h-screen bg-gray-50 font-sans text-gray-800 flex items-center justify-center p-4 sm:p-6 lg:p-8\">\n      {/* Central content card */}\n      <div className=\"bg-white rounded-xl shadow-lg p-6 sm:p-8 lg:p-10 max-w-4xl w-full\">\n        {/* Header Section: Introduction and Profile Image */}\n        <header className=\"flex flex-col items-center text-center mb-10\">\n          {/* Profile Image Placeholder */}\n          <div\n            className=\"w-32 h-32 sm:w-40 sm:h-40 rounded-full bg-gradient-to-br from-blue-400 to-purple-500 \n          flex items-center justify-center text-white text-5xl font-bold mb-4 shadow-md overflow-hidden hover:scale-110 transition duration-300 \n          hover:rounded-0\"\n          >\n            <img\n              src={chogyal}\n              alt=\"Profile\"\n              className=\"w-full h-full object-cover rounded-full\"\n            />\n          </div>\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-3\">\n            Hello, I'm Chogyal.\n          </h1>\n          <p className=\"text-base text-gray-600 max-w-2xl\">\n            - A passionate self-taught developer transforming ideas into\n            impactful digital experiences.\n          </p>\n        </header>\n\n        {/* About Me Section */}\n        <section className=\"mb-10\">\n          <h2 className=\"text-xl font-semibold text-gray-800 mb-5 text-center\">\n            My Journey in Code\n          </h2>\n          <p className=\"text-base text-gray-700 leading-relaxed mb-4\">\n            My path into the world of development is fueled by an insatiable\n            curiosity and a drive to create. Without a traditional degree, I've\n            embraced a self-paced learning model, diving deep into technologies\n            and building projects that solve real-world problems. This hands-on\n            approach has equipped me with practical knowledge and a robust\n            problem-solving mindset, allowing me to adapt quickly to new\n            challenges.\n          </p>\n          <p className=\"text-base text-gray-700 leading-relaxed\">\n            I believe in the power of continuous learning and the endless\n            possibilities that technology offers. Every line of code is an\n            opportunity to learn, innovate, and contribute to something\n            meaningful.\n          </p>\n        </section>\n\n        {/* Continuous Learning Mindset Section */}\n        <section className=\"mb-10 text-center\">\n          <h2 className=\"text-xl font-semibold text-gray-800 mb-5\">\n            A Commitment to Growth\n          </h2>\n          <p className=\"text-base text-gray-700 leading-relaxed\">\n            The tech landscape is ever-evolving, and so am I. My approach to\n            development is rooted in a continuous learning mindset, always\n            seeking out new technologies, best practices, and innovative\n            solutions. This adaptability ensures I can tackle diverse challenges\n            and contribute effectively to dynamic environments.\n          </p>\n        </section>\n\n        {/* Philosophy Quote */}\n        <section className=\"mb-10 text-center\">\n          <blockquote className=\"italic text-xl sm:text-2xl text-gray-600 border-l-4 border-blue-400 pl-4 py-2 mx-auto max-w-prose\">\n            “I rise.”\n          </blockquote>\n        </section>\n\n        {/* Call to Action */}\n        <section className=\"text-center\">\n          <Link\n            to=\"/\"\n            className=\"inline-block bg-[#1a1a1a] text-white font-bold py-3 px-8 rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 ease-in-out cursor-pointer\"\n          >\n            Let’s build something meaningful.\n          </Link>\n        </section>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/landing/AboutUs.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/landing/CTASection.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'motion' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"motion"},"fix":{"range":[27,66],"text":""},"desc":"Remove unused variable 'motion'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/shared/components/button\"; // Shadcn Button\nimport { Gem } from \"lucide-react\"; // Using Lucide icon for the decorative element\n\nconst CTASection = () => {\n  return (\n    <motion.section\n      initial={{ opacity: 0, y: 20 }}\n      whileInView={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.6 }}\n      viewport={{ once: true }}\n      className=\"py-16 px-4 lg:px-8 \"\n    >\n      <div className=\"container mx-auto text-center\">\n        {/* Bhutan-inspired decorative element */}\n        <div className=\"flex justify-center mb-6\">\n          <Gem className=\"w-12 h-12 text-amber-500\" />{\" \"}\n          {/* Replaced SVG with Lucide Icon */}\n        </div>\n\n        {/* Headline */}\n        <h2 className=\"text-3xl md:text-4xl lg:text-5xl font-bold text-gray-900 mb-4\">\n          Ready to explore Bhutan?\n        </h2>\n        <p className=\"text-xl md:text-2xl text-gray-700 mb-2\">\n          Start your journey now.\n        </p>\n\n        {/* Subtext */}\n        <p className=\"text-gray-600 max-w-2xl mx-auto mb-8\">\n          Discover hidden gems, local cuisines, and cozy stays with just a\n          click.\n        </p>\n\n        {/* Buttons */}\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n          <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n            <Button\n              size=\"lg\"\n              className=\"rounded-full px-8 py-6 shadow-md hover:shadow-lg bg-black text-white hover:bg-gray-800\" // Changed to black background, white text\n            >\n              Explore Hotels\n            </Button>\n          </motion.div>\n\n          <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n            <Button\n              size=\"lg\"\n              variant=\"outline\" // Shadcn outlined variant\n              className=\"rounded-full px-8 py-6 border-2 border-black text-black hover:bg-gray-100\" // Changed to black border, black text, white hover\n            >\n              View Restaurants\n            </Button>\n          </motion.div>\n        </div>\n      </div>\n    </motion.section>\n  );\n};\n\nexport default CTASection;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/landing/ContactUs.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/landing/FeatureSection.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'cn' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":16,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"cn"},"fix":{"range":[501,537],"text":""},"desc":"Remove unused variable 'cn'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'features' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":19,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"features"},"fix":{"range":[572,592],"text":""},"desc":"Remove unused variable 'features'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Hotel, ArrowRight, CheckCircle, Sparkles, MapPin, Star, Users, Shield, UserPlus, Search, CreditCard } from \"lucide-react\";\nimport { Link } from \"react-router-dom\";\n\n// ShadCN UI Components\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n} from \"@/shared/components/card\";\nimport { Button } from \"@/shared/components/button\";\nimport { Badge } from \"@/shared/components/badge\";\nimport { Separator } from \"@/shared/components/separator\";\nimport { cn } from \"@/shared/utils\";\n\nconst FeatureSection = () => {\n  const features = [];\n\n  return (\n    <section className=\"py-20 px-4\">\n      <div className=\"max-w-6xl mx-auto\">\n\n        {/* Unified Hotel Booking Adventure Section */}\n        <div className=\"text-center pt-12\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"bg-gradient-to-br from-primary/10 via-yellow-500/5 to-primary/10 p-8 md:p-12 border border-border/50 rounded-2xl relative overflow-hidden\">\n              {/* Background Decorative Elements */}\n              <div className=\"absolute top-4 left-4 w-20 h-20 bg-primary/1 rounded-full blur-xl\"></div>\n              <div className=\"absolute bottom-4 right-4 w-32 h-32 bg-yellow-500/5 rounded-full blur-xl\"></div>\n              <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-40 h-40 bg-primary/3 rounded-full blur-2xl\"></div>\n              \n              <div className=\"relative z-10 space-y-8\">\n                {/* Adventure Header */}\n                <div className=\"space-y-4\">\n                  {/* <div className=\"flex items-center justify-center space-x-2\">\n                    <MapPin className=\"w-6 h-6 text-primary animate-bounce\" />\n                    <Badge variant=\"outline\" className=\"px-4 py-2 text-sm font-medium\">\n                      🏔️ Ready for Your Bhutanese Adventure?\n                    </Badge>\n                  </div> */}\n                  \n                  <h2 className=\"text-3xl md:text-4xl lg:text-4xl font-bold text-foreground leading-tight\">\n                    Start Your Journey with\n                    <span className=\"block text-primary\">Real-time Hotel Booking</span>\n                  </h2>\n                  \n                  <p className=\"text-sm text-muted-foreground max-w-3xl mx-auto leading-relaxed\">\n                    Join thousands of travelers who trust YakRooms for authentic Bhutanese experiences. \n                    From the majestic Himalayas to vibrant local culture, your perfect stay awaits!\n                  </p>\n                </div>\n\n                {/* Interactive Booking Preview */}\n                <div className=\"bg-white/50 backdrop-blur-sm rounded-xl p-4 border border-border/30 max-w-6xl mx-auto\">\n                  <div className=\"flex flex-col md:flex-row items-center justify-center gap-4 md:gap-6\">\n                    {/* Step 1 */}\n                    <div className=\"text-center space-y-2 group\">\n                      <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center mx-auto group-hover:scale-110 transition-transform duration-300\">\n                        <Search className=\"w-6 h-6 text-white\" />\n                      </div>\n                      <h3 className=\"text-sm font-semibold text-foreground\">Browse Hotels</h3>\n                      <p className=\"text-xs text-muted-foreground max-w-24\">Discover verified accommodations</p>\n                    </div>\n                    \n                    {/* Arrow 1 */}\n                    <div className=\"hidden md:flex\">\n                      <ArrowRight className=\"w-6 h-6 text-primary animate-pulse\" />\n                    </div>\n                    \n                    {/* Step 2 */}\n                    <div className=\"text-center space-y-2 group\">\n                      <div className=\"w-12 h-12 bg-gradient-to-br from-green-500 to-green-600 rounded-full flex items-center justify-center mx-auto group-hover:scale-110 transition-transform duration-300\">\n                        <CreditCard className=\"w-6 h-6 text-white\" />\n                      </div>\n                      <h3 className=\"text-sm font-semibold text-foreground\">Book Instantly</h3>\n                      <p className=\"text-xs text-muted-foreground max-w-24\">Real-time availability</p>\n                    </div>\n                    \n                    {/* Arrow 2 */}\n                    {/* <div className=\"hidden md:flex\">\n                      <ArrowRight className=\"w-6 h-6 text-primary animate-pulse\" />\n                    </div> */}\n                    \n                    {/* Step 3 - Explore Hotels Now */}\n                    {/* <div className=\"text-center space-y-2 group\">\n                      <Link to=\"/hotels\">\n                        <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-blue-600 rounded-full flex items-center justify-center mx-auto group-hover:scale-110 transition-transform duration-300 shadow-lg hover:shadow-xl\">\n                          <Hotel className=\"w-6 h-6 text-white group-hover:animate-bounce\" />\n                        </div>\n                        <h3 className=\"text-sm font-semibold text-foreground group-hover:text-primary transition-colors\">Explore Hotels</h3>\n                        <p className=\"text-xs text-muted-foreground max-w-24\">Start your adventure</p>\n                      </Link>\n                    </div> */}\n                  </div>\n                </div>\n\n                {/* Become a Host Button */}\n                {/* <div className=\"flex justify-center\">\n                  <Link to=\"/addListing\">\n                    <Button size=\"lg\" variant=\"outline\" className=\"px-8 py-4 text-lg font-semibold group border-2 hover:border-primary hover:bg-primary/5 transition-all duration-300\">\n                      <UserPlus className=\"mr-3 h-5 w-5 group-hover:scale-110 transition-transform\" />\n                      <span>Become a Host</span>\n                    </Button>\n                  </Link>\n                </div> */}\n\n                {/* Trust Indicators with Animation */}\n                <div className=\"flex flex-wrap items-center justify-center gap-6 pt-6 border-t border-border/50\">\n                  <div className=\"flex items-center space-x-2 group\">\n                    <Shield className=\"w-5 h-5 text-green-500 group-hover:animate-pulse\" />\n                    <span className=\"text-sm font-medium text-muted-foreground\">Secure Booking</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 group\">\n                    <Star className=\"w-5 h-5 text-yellow-500 group-hover:animate-spin\" />\n                    <span className=\"text-sm font-medium text-muted-foreground\">Verified Properties</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 group\">\n                    <Users className=\"w-5 h-5 text-blue-500 group-hover:scale-110 transition-transform\" />\n                    <span className=\"text-sm font-medium text-muted-foreground\">24/7 Support</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 group\">\n                    <CheckCircle className=\"w-5 h-5 text-emerald-500 group-hover:animate-bounce\" />\n                    <span className=\"text-sm font-medium text-muted-foreground\">Instant Confirmation</span>\n                  </div>\n                </div>\n\n                {/* Fun Stats */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 pt-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-primary\">10K+</div>\n                    <div className=\"text-sm text-muted-foreground\">Happy Travelers</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-primary\">98%</div>\n                    <div className=\"text-sm text-muted-foreground\">Satisfaction Rate</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-primary\">24/7</div>\n                    <div className=\"text-sm text-muted-foreground\">Support Available</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-primary\">20</div>\n                    <div className=\"text-sm text-muted-foreground\">Dzongkhags Covered</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default FeatureSection;","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/landing/GetInTouch.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'errors' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"errors"},"fix":{"range":[316,322],"text":""},"desc":"Remove unused variable 'errors'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setErrors' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":13,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"setErrors"},"fix":{"range":[322,333],"text":""},"desc":"Remove unused variable 'setErrors'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isSubmitting' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"isSubmitting"},"fix":{"range":[360,372],"text":""},"desc":"Remove unused variable 'isSubmitting'."}]},{"ruleId":"no-undef","severity":2,"message":"'setSubmitStatus' is not defined.","line":28,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":20}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport api from \"../../shared/services/Api\";\nimport { toast } from \"sonner\";\n\nconst GetInTouch = React.forwardRef((props, ref) => {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    subject: \"\",\n    message: \"\",\n    consent: false,\n  });\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData((prev) => ({\n      ...prev,\n      [name]: type === \"checkbox\" ? checked : value,\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    setIsSubmitting(true);\n    setSubmitStatus(null);\n\n    console.log(\"Form data \" + formData.consent);\n\n    try {\n      const response = await api.post(\"/getIntouch\", formData);\n\n      if (response.status === 200) {\n        setFormData({\n          name: \"\",\n          email: \"\",\n          subject: \"\",\n          message: \"\",\n          consent: false,\n        });\n        toast.success(\"SUCCESS! Your information was submitted successfully.\");\n      } else {\n        throw new Error(\"Submission failed\");\n      }\n    } catch (error) {\n      console.error(\"Error submitting form:\", error);\n      toast.error(\"ERROR! There was a problem submitting your information.\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  return (\n    <section ref={ref} class=\"py-16 sm:px-6 lg:px-8 \">\n      <div class=\"max-w-4xl mx-auto\">\n        <div class=\"text-center mb-4\">\n          <h2 class=\"text-3xl font-extrabold text-gray-900 sm:text-4xl\">\n            Get in Touch\n          </h2>\n          <p class=\" px-4 text-14 text-gray-700\">\n            Have a project in mind or want to collaborate? Drop me a message\n            below.\n          </p>\n        </div>\n\n        <div class=\"bg-white shadow-xl overflow-hidden\">\n          <div class=\"p-8 sm:p-10\">\n            <form class=\"space-y-6\">\n              <div class=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n                <div>\n                  <label\n                    for=\"name\"\n                    class=\"block text-sm font-medium text-gray-700\"\n                  >\n                    Full Name\n                  </label>\n                  <div class=\"mt-1\">\n                    <input\n                      type=\"text\"\n                      id=\"name\"\n                      name=\"name\"\n                      value={formData.name}\n                      onChange={handleChange}\n                      class=\"block w-full px-4 py-1 md:py-2  border border-gray-300 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200\"\n                      placeholder=\"John Doe\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label\n                    for=\"email\"\n                    class=\"block text-sm font-medium text-gray-700\"\n                  >\n                    Email Address\n                  </label>\n                  <div class=\"mt-1\">\n                    <input\n                      type=\"email\"\n                      id=\"email\"\n                      name=\"email\"\n                      value={formData.email}\n                      onChange={handleChange}\n                      class=\"block w-full px-4 py-1 md:py-2  border border-gray-300 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200\"\n                      placeholder=\"your@email.com\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <label\n                  for=\"subject\"\n                  class=\"block text-sm font-medium text-gray-700\"\n                >\n                  Subject\n                </label>\n                <div class=\"mt-1\">\n                  <input\n                    type=\"text\"\n                    id=\"subject\"\n                    name=\"subject\"\n                    value={formData.subject}\n                    onChange={handleChange}\n                    class=\"block w-full px-4 py-1 md:py-2  border border-gray-300 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200\"\n                    placeholder=\"What's this about?\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label\n                  for=\"message\"\n                  class=\"block text-sm font-medium text-gray-700\"\n                >\n                  Your Message\n                </label>\n                <div class=\"mt-1\">\n                  <textarea\n                    id=\"message\"\n                    name=\"message\"\n                    value={formData.message}\n                    onChange={handleChange}\n                    rows=\"5\"\n                    class=\"block w-full px-4 py-1 md:py-2  border border-gray-300 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200\"\n                    placeholder=\"Tell me about your project...\"\n                  ></textarea>\n                </div>\n              </div>\n\n              <div class=\"flex items-center\">\n                <input\n                  id=\"consent\"\n                  name=\"consent\"\n                  type=\"checkbox\"\n                  checked={formData.consent}\n                  onChange={handleChange}\n                  class=\"h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                />\n                <label for=\"consent\" class=\"ml-2 block text-sm text-gray-700\">\n                  I consent to having this website store my submitted\n                  information so I can receive a response.\n                </label>\n              </div>\n\n              <div>\n                <button\n                  type=\"submit\"\n                  onClick={handleSubmit}\n                  disabled={!formData.consent}\n                  className={`${\n                    formData.consent\n                      ? \"bg-blue-400 hover:bg-blue-500 cursor-pointer\"\n                      : \"bg-blue-300 cursor-not-allowed opacity-70\"\n                  } w-full text-white py-2 rounded-md transition duration-200 flex items-center justify-center gap-2`}\n                >\n                  Send Message\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    class=\"ml-2 h-5 w-5\"\n                    viewBox=\"0 0 20 20\"\n                    fill=\"currentColor\"\n                  >\n                    <path\n                      fill-rule=\"evenodd\"\n                      d=\"M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z\"\n                      clip-rule=\"evenodd\"\n                    />\n                  </svg>\n                </button>\n              </div>\n            </form>\n          </div>\n\n          <div class=\"bg-gray-50 px-8 py-6 sm:flex sm:items-center sm:justify-between\">\n            <div class=\"text-center sm:text-left\">\n              <h3 class=\"text-lg font-medium text-gray-900\">Prefer email?</h3>\n              <p class=\"mt-1 text-sm text-gray-600\">\n                You can also reach me directly at{\" \"}\n                <span class=\"font-medium text-primary\">\n                  choegyell@gmail.com\n                </span>\n              </p>\n            </div>\n            <div class=\"mt-4 sm:mt-0\">\n              <a\n                href=\"mailto:choegyell@gmail.com\"\n                class=\"inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-200\"\n              >\n                Open Email\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  class=\"ml-2 -mr-1 h-5 w-5 text-gray-500\"\n                  viewBox=\"0 0 20 20\"\n                  fill=\"currentColor\"\n                >\n                  <path d=\"M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z\" />\n                  <path d=\"M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z\" />\n                </svg>\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n});\n\nexport default GetInTouch;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/landing/HeroLG.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'format' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"format"},"fix":{"range":[41,75],"text":""},"desc":"Remove unused variable 'format'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'date' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":28,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"date"},"fix":{"range":[772,776],"text":""},"desc":"Remove unused variable 'date'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setDate' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":28,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"setDate"},"fix":{"range":[776,785],"text":""},"desc":"Remove unused variable 'setDate'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { format } from \"date-fns\";\nimport { useNavigate } from \"react-router-dom\";\nimport { cn } from \"@/shared/utils\";\nimport YakRoomHero from \"@/assets/images/YakRoomHero.png\";\n\nimport { Button } from \"@/shared/components/button\";\nimport { Input } from \"@/shared/components/input\";\nimport { Calendar } from \"@/shared/components/calendar\";\nimport { Separator } from \"@/shared/components/separator\";\nimport { Badge } from \"@/shared/components/badge\";\nimport { SearchButton } from \"@/shared/components\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/shared/components/popover\";\nimport {\n  CalendarIcon,\n  Search,\n  MapPin,\n  Clock,\n  Shield,\n  ArrowRight,\n} from \"lucide-react\";\n\nconst HeroLG = () => {\n  const [date, setDate] = useState(new Date());\n  const [searchDistrict, setSearchDistrict] = useState(\"\");\n  const [searchError, setSearchError] = useState(\"\");\n  const navigate = useNavigate();\n\n  const validateAndSearch = () => {\n    setSearchError(\"\");\n\n    if (!searchDistrict || searchDistrict.trim() === \"\") {\n      setSearchError(\"Please enter a district to search\");\n      return;\n    }\n\n    if (!/^[a-zA-Z\\s]+$/.test(searchDistrict.trim())) {\n      setSearchError(\"District must contain only letters\");\n      return;\n    }\n\n    const searchParams = new URLSearchParams({\n      district: searchDistrict.trim(),\n    });\n\n    navigate(`/hotels?${searchParams.toString()}`);\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\") {\n      validateAndSearch();\n    }\n  };\n\n  const handleStartExploring = () => {\n    // Navigate to hotel listing page without filters\n    navigate(\"/hotels\");\n  };\n\n      return (\n      <section \n        className=\"relative flex min-h-screen w-full items-center justify-center px-4 bg-cover bg-center bg-no-repeat\"\n        style={{\n          backgroundImage: `url(${YakRoomHero})`,\n        }}\n      >\n      {/* Dark overlay for better text readability */}\n      <div className=\"absolute inset-0 bg-black/40\"></div>\n      \n      <div className=\"relative z-10 flex w-full max-w-4xl flex-col items-center justify-center space-y-8 text-center\">\n        {/* Header Section */}\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-center space-x-2\">\n            <Badge variant=\"secondary\" className=\"px-3 py-1 bg-white/90 text-slate-900 border-white/20\">\n              <MapPin className=\"mr-1 h-3 w-3\" />\n              Gateway to Bhutan\n            </Badge>\n          </div>\n\n          <h1 className=\"text-3xl font-semibold tracking-tight sm:text-4xl text-white\">\n            Discover Authentic Stays in\n            <span className=\"block text-yellow-400\">Bhutan with YakRooms</span>\n          </h1>\n\n          <p className=\"mx-auto max-w-2xl text-14 text-white/90 sm:text-xl\">\n            Your convenient way to book locally. Discover hotels\n            in Bhutan with just a few taps.\n          </p>\n        </div>\n\n        <Separator className=\"w-24 bg-white/30\" />\n\n        {/* Features Section */}\n        <div className=\"grid w-full max-w-3xl grid-cols-1 gap-4 sm:grid-cols-3 hidden sm:grid\">\n          <div className=\"flex items-center justify-center space-x-2 text-sm text-white/80\">\n            <Clock className=\"h-4 w-4\" />\n            <span>Real-time availability</span>\n          </div>\n          <div className=\"flex items-center justify-center space-x-2 text-sm text-white/80\">\n            <Shield className=\"h-4 w-4\" />\n            <span>Verified accommodations</span>\n          </div>\n          <div className=\"flex items-center justify-center space-x-2 text-sm text-white/80\">\n            <MapPin className=\"h-4 w-4\" />\n            <span>Local recommendations</span>\n          </div>\n        </div>\n\n        {/* Search Form */}\n        <div className=\"w-full max-w-4xl space-y-4\">\n          <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n            <div className=\"relative md:col-span-2\">\n              <MapPin className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search district (e.g., Mongar, Samdrup Jongkhar, Trashigang)\"\n                className={cn(\n                  \"h-10 sm:h-12 pl-10 text-sm sm:text-base text-white\",\n                  searchError && \"border-red-500 focus:border-red-500\"\n                )}\n                value={searchDistrict}\n                onChange={(e) => {\n                  setSearchDistrict(e.target.value);\n                  if (searchError) setSearchError(\"\"); // Clear error when user starts typing\n                }}\n                onKeyPress={handleKeyPress}\n              />\n              {searchError && (\n                <p className=\"mt-2 text-sm text-red-500 text-left\">{searchError}</p>\n              )}\n            </div>\n\n            <SearchButton\n              size=\"lg\"\n              className=\"h-10 sm:h-12 text-sm sm:text-base bg-yellow-500 hover:bg-yellow-600 text-black cursor-pointer\"\n              onClick={validateAndSearch}\n            >\n              Search Hotels\n            </SearchButton>\n          </div>\n        </div>\n\n        <Separator className=\"w-full max-w-2xl bg-white/30\" />\n\n        {/* Call to Action */}\n        <div className=\"space-y-4\">\n          <p className=\"text-sm text-white/90\">\n            Need a comfortable stay anywhere in Bhutan?\n          </p>\n          <Button \n            variant=\"outline\" \n            size=\"lg\" \n            className=\"group border-white/30 text-black hover:bg-white/10 hover:text-white hover:border-white/50 cursor-pointer\"\n            onClick={handleStartExploring}\n          >\n            Start Exploring\n            <ArrowRight className=\"ml-2 h-4 w-4 transition-transform group-hover:translate-x-1\" />\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default HeroLG;","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/landing/HowItWorksSection.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'motion' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"motion"},"fix":{"range":[27,66],"text":""},"desc":"Remove unused variable 'motion'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card } from \"@/shared/components/card\";\n\nconst HowItWorksSection = () => {\n  const steps = [\n    {\n      icon: \"🔍\",\n      title: \"Search\",\n      description:\n        \"Quickly search verified hotels and restaurants by location or name.\",\n      color: \"bg-amber-50\",\n      iconColor: \"text-amber-500\",\n    },\n    {\n      icon: \"📊\",\n      title: \"Compare\",\n      description:\n        \"Browse listings, check reviews, prices, and availability in real-time.\",\n      color: \"bg-green-50\",\n      iconColor: \"text-green-500\",\n    },\n    {\n      icon: \"✅\",\n      title: \"Book\",\n      description: \"Confirm your stay or meal booking with just a few clicks.\",\n      color: \"bg-blue-50\",\n      iconColor: \"text-blue-500\",\n    },\n  ];\n\n  const container = {\n    hidden: { opacity: 0 },\n    show: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.2,\n      },\n    },\n  };\n\n  const item = {\n    hidden: { opacity: 0, y: 20 },\n    show: { opacity: 1, y: 0 },\n  };\n\n  return (\n    <section className=\"py-12 px-4 lg:px-8 bg-gradient-to-b from-gray-50 to-white\">\n      <div className=\"container mx-auto\">\n        <h3 className=\"text-center text-3xl font-bold mb-12 text-gray-900\">\n          How YakRooms Works\n        </h3>\n\n        <motion.div\n          variants={container}\n          initial=\"hidden\"\n          whileInView=\"show\"\n          viewport={{ once: true }}\n          className=\"flex flex-col md:flex-row gap-6 md:gap-8\"\n        >\n          {steps.map((step, index) => (\n            <motion.div\n              key={index}\n              variants={item}\n              className=\"flex-1\"\n              whileHover={{ scale: 1.03 }}\n              transition={{ type: \"spring\", stiffness: 300 }}\n            >\n              <Card className=\"h-full p-6 shadow-md rounded-2xl border border-gray-100 overflow-hidden\">\n                <div className=\"flex flex-col items-center text-center\">\n                  {/* Step number */}\n                  <div\n                    className={`w-12 h-12 flex items-center justify-center rounded-full ${step.color} mb-4`}\n                  >\n                    <span className={`text-2xl font-bold ${step.iconColor}`}>\n                      {step.icon}\n                    </span>\n                  </div>\n\n                  {/* Step title */}\n                  <h5 className=\"text-xl font-semibold mb-3 text-gray-900\">\n                    {step.title}\n                  </h5>\n\n                  {/* Step description */}\n                  <p className=\"text-sm text-gray-600\">{step.description}</p>\n\n                  {/* Connector (mobile) */}\n                  {index < steps.length - 1 && (\n                    <div className=\"md:hidden mt-6 w-1 h-8 bg-gray-200 rounded-full\"></div>\n                  )}\n                </div>\n              </Card>\n            </motion.div>\n          ))}\n        </motion.div>\n\n        {/* Horizontal connector (desktop) */}\n        <div className=\"hidden md:flex justify-center -mt-8 px-12\">\n          <div className=\"flex items-center w-full max-w-2xl\">\n            {steps.map((_, index) => (\n              <React.Fragment key={index}>\n                <div className=\"flex-1 h-1 bg-gray-200 rounded-full\"></div>\n                {index < steps.length - 1 && (\n                  <div className=\"w-8 h-8 rounded-full bg-white border-4 border-gray-200 flex items-center justify-center mx-2\">\n                    <span className=\"text-sm text-gray-500\">{index + 1}</span>\n                  </div>\n                )}\n              </React.Fragment>\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default HowItWorksSection;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/landing/Landing.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useAuth' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":16,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"useAuth"},"fix":{"range":[671,715],"text":""},"desc":"Remove unused variable 'useAuth'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'menuOpen' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":20,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"menuOpen"},"fix":{"range":[803,811],"text":""},"desc":"Remove unused variable 'menuOpen'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'certModalOpen' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":21,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"certModalOpen"},"fix":{"range":[854,867],"text":""},"desc":"Remove unused variable 'certModalOpen'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'rating' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":23,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"rating"},"fix":{"range":[948,954],"text":""},"desc":"Remove unused variable 'rating'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'hasRated' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":28,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"hasRated"},"fix":{"range":[1151,1159],"text":""},"desc":"Remove unused variable 'hasRated'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setHasRated' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":28,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"setHasRated"},"fix":{"range":[1159,1172],"text":""},"desc":"Remove unused variable 'setHasRated'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isMobile' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":38,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"isMobile"},"fix":{"range":[1348,1356],"text":""},"desc":"Remove unused variable 'isMobile'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ref' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":48,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"ref"},"fix":{"range":[1655,1658],"text":""},"desc":"Remove unused variable 'ref'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'inView' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":48,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"inView"},"fix":{"range":[1658,1666],"text":""},"desc":"Remove unused variable 'inView'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleDismiss' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":83,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleDismiss"},"fix":{"range":[2333,2413],"text":""},"desc":"Remove unused variable 'handleDismiss'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSubmit' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":88,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":88,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleSubmit"},"fix":{"range":[2417,2556],"text":""},"desc":"Remove unused variable 'handleSubmit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'cardVariants' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":94,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":94,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"cardVariants"},"fix":{"range":[2560,2693],"text":""},"desc":"Remove unused variable 'cardVariants'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'heroVariants' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":99,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":99,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"heroVariants"},"fix":{"range":[2697,2808],"text":""},"desc":"Remove unused variable 'heroVariants'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fadeInUp' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":104,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":104,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"fadeInUp"},"fix":{"range":[2812,3020],"text":""},"desc":"Remove unused variable 'fadeInUp'."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from \"react\";\n\nimport LoginModal from \"../authentication/LoginModal\";\nimport \"../../assets/css/custom.css\";\nimport AOS from \"aos\";\nimport \"aos/dist/aos.css\";\nimport Footer from \"../../layouts/Footer\";\nimport { useInView } from \"react-intersection-observer\";\nimport HeroLG from \"./HeroLG\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport Navbar from \"../../layouts/Navbar\";\nimport FeatureSection from \"./FeatureSection\";\nimport TopHighlightsSection from \"./TopHighlightsSection\";\nimport ListYourPropertySection from \"./ListYourPropertySection\";\nimport { getStorageItem } from \"@/shared/utils/safariLocalStorage\";\nimport { useAuth } from \"../authentication\";\n\nconst Landing = () => {\n  const [loginShow, setLoginShow] = useState(false);\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [certModalOpen, setCertModalOpen] = useState(false);\n  const certiRef = useRef(null);\n  const [rating, setRating] = useState(false);\n  const [dismissed, setDismissed] = useState(false);\n  const contactMeRef = useRef(null);\n  const homeRef = useRef(null);\n  const footerRef = useRef(null);\n  const [hasRated, setHasRated] = useState(\n    getStorageItem(\"hasRated\") === \"true\"\n  );\n\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobile(window.innerWidth < 768);\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  const [ref, inView] = useInView({\n    triggerOnce: false, // Set true if you want it only once\n    threshold: 0.1,\n  });\n\n  const toggleLogin = () => {\n    setLoginShow(!loginShow);\n    \n  };\n\n  useEffect(() => {\n    AOS.init({\n      duration: 1000, // animation duration\n      once: true, // only animate once\n    });\n  }, []);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setRating(true);\n    }, 3 * 60 * 1000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  useEffect(() => {\n    if (!dismissed) return;\n\n    const interval = setInterval(() => {\n      setRating(true);\n    }, 10 * 60 * 1000);\n\n    return () => clearInterval(interval);\n  }, [dismissed]);\n\n  const handleDismiss = () => {\n    setRating(false);\n    setDismissed(true);\n  };\n\n  const handleSubmit = () => {\n    // Your submit logic here\n    setRating(false);\n    setDismissed(false); // Stop showing if submitted\n  };\n\n  const cardVariants = {\n    offscreen: { opacity: 0, x: 100 },\n    onscreen: { opacity: 1, x: 0, transition: { duration: 0.8 } },\n  };\n\n  const heroVariants = {\n    offscreen: { y: 100 },\n    onscreen: { y: -30, transition: { duration: 0.8 } },\n  };\n\n  const fadeInUp = {\n    offscreen: {\n      opacity: 0,\n      y: 40,\n    },\n    onscreen: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.8,\n        ease: \"easeOut\",\n      },\n    },\n  };\n\n  const MenuSlideIn = {\n    offscreen: {\n      opacity: 0,\n      x: -300, // Start off-screen to the left\n    },\n    onscreen: {\n      opacity: 1,\n      x: 0, // Slide in to normal position\n      transition: {\n        type: \"spring\",\n        stiffness: 100,\n        damping: 20,\n        duration: 0.5,\n      },\n    },\n    exit: {\n      opacity: 0,\n      x: -300, // Slide back out to the left\n      transition: {\n        ease: \"easeIn\",\n        duration: 0.3,\n      },\n    },\n  };\n\n  const closeLogin = () => {\n    setLoginShow(false);\n  };\n  const menuButtonRef = useRef(null);\n  const sideBarRef = useRef(null);\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (certiRef.current && !certiRef.current.contains(event.target)) {\n        setCertModalOpen(false);\n      }\n      if (\n        sideBarRef.current &&\n        !sideBarRef.current.contains(event.target) &&\n        menuButtonRef.current &&\n        !menuButtonRef.current.contains(event.target)\n      ) {\n        setMenuOpen(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [certiRef]);\n\n\n\n  return (\n    <>\n      <div className=\" relative bg-white text-black dark:text-white\">\n        {/* Navigation */}\n        <div className=\"pr-0 sm:pr-0\">\n          <Navbar onLoginClick={toggleLogin} onContactClick={() => footerRef.current?.scrollIntoView({ behavior: 'smooth' })} />\n        </div>\n\n        {/* LoginModal */}\n        {loginShow && <LoginModal onClose={closeLogin} />}\n\n        <HeroLG\n          ref={homeRef}\n          onScroll={() =>\n            contactMeRef.current?.scrollIntoView({ behavior: \"smooth\" })\n          }\n        />\n\n        <TopHighlightsSection />\n        <FeatureSection />\n        <ListYourPropertySection onLoginClick={toggleLogin} />\n        \n        <Footer ref={footerRef} />\n      </div>\n    </>\n  );\n};\n\nexport default Landing;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/landing/ListYourPropertySection.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'cn' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":19,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"cn"},"fix":{"range":[488,524],"text":""},"desc":"Remove unused variable 'cn'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { \n  Home, \n  ChevronRight, \n  TrendingUp, \n  Users, \n  Shield, \n  Star,\n  ArrowUpRight,\n  Sparkles\n} from \"lucide-react\";\n\n// ShadCN UI Components\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/shared/components/card\";\nimport { Button } from \"@/shared/components/button\";\nimport { Badge } from \"@/shared/components/badge\";\nimport { Separator } from \"@/shared/components/separator\";\nimport { cn } from \"@/shared/utils\";\nimport { useAuth } from \"@/features/authentication\";\n\nconst ListYourPropertySection = ({ onLoginClick }) => {\n  const { isAuthenticated, hotelId, getCurrentActiveRole } = useAuth();\n\n  const handleListPropertyClick = (e) => {\n    if (!isAuthenticated) {\n      e.preventDefault();\n      onLoginClick();\n    }\n  };\n\n  // Check if user already has a hotel registered\n  const hasHotelRegistered = isAuthenticated && hotelId;\n  \n  // Get current active role\n  const activeRole = getCurrentActiveRole();\n  \n  // Check if user is a Guest\n  const isGuest = activeRole === \"GUEST\";\n\n  const benefits = [\n    {\n      icon: TrendingUp,\n      title: \"Increase Revenue\",\n      description: \"Boost your bookings by 40% on average\",\n    },\n    {\n      icon: Users,\n      title: \"Reach More Travelers\",\n      description: \"Access thousands of potential guests\",\n    },\n    // {\n    //   icon: Shield,\n    //   title: \"Secure Payments\",\n    //   description: \"Guaranteed payments with fraud protection\",\n    // },\n  ];\n\n  const stats = [\n    { number: \"30+\", label: \"Partner Properties\" },\n    { number: \"95%\", label: \"Customer Satisfaction\" },\n    { number: \"24/7\", label: \"Support Available\" },\n  ];\n\n  return (\n    <section className=\"lg:py-20 px-4 bg-muted/20\">\n      <div className=\"container mx-auto\">\n        <div className=\"max-w-6xl mx-auto\">\n          {/* Header Section */}\n          <div className=\"text-center mb-12 space-y-4\">\n            <Badge variant=\"secondary\" className=\"px-4 py-2\">\n              <Sparkles className=\"w-4 h-4 mr-2\" />\n              Partner Program\n            </Badge>\n            <h2 className=\"text-3xl md:text-3xl font-bold tracking-tight\">\n              Partner with{\" \"}\n              <span className=\"text-primary\">\n                YakRooms{\" \"}\n              </span>\n              & Grow Your Business\n            </h2>\n            <p className=\"text-md text-muted-foreground max-w-3xl mx-auto\">\n              Join our network of hotels, homestays, and restaurants. Reach more\n              travelers, manage your bookings with ease, and become part of\n              Bhutan's leading hospitality platform.\n            </p>\n          </div>\n\n          <Separator className=\"mb-12\" />\n\n          {/* Main Content Grid */}\n          <div className=\"grid lg:grid-cols-2 gap-12 items-start\">\n            {/* Left Side - Benefits */}\n            <div className=\"space-y-8\">\n              {/* Stats */}\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                {stats.map((stat, index) => (\n                  <Card key={index} className=\"text-center hover:shadow-md transition-shadow\">\n                    <CardContent className=\"sm:p-6\">\n                      <div className=\"text-2xl md:text-3xl font-bold text-yellow-500 mb-1\">\n                        {stat.number}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">{stat.label}</div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n\n              {/* Benefits List */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-xl font-semibold mb-4\">Why Partner with Us?</h3>\n                {benefits.map((benefit, index) => (\n                  <Card key={index} className=\"hover:shadow-md transition-all duration-200 group\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start space-x-4\">\n                        <div className=\"p-3 rounded-lg bg-primary/10 text-primary group-hover:bg-primary group-hover:text-primary-foreground transition-colors\">\n                          <benefit.icon className=\"w-6 h-6\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-semibold mb-1 group-hover:text-primary transition-colors\">\n                            {benefit.title}\n                          </h4>\n                          <p className=\"text-muted-foreground text-sm\">\n                            {benefit.description}\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n\n            {/* Right Side - CTA Card */}\n            <div>\n              <Card className=\"hover:shadow-lg transition-shadow duration-300 group\">\n                <CardHeader className=\"text-center space-y-4\">\n                  {/* <div className=\"mx-auto w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center group-hover:bg-primary group-hover:text-primary-foreground transition-colors\">\n                    <Home className=\"h-8 w-8\" />\n                  </div> */}\n                  <div className=\"space-y-2 mt-4\">\n                    <CardTitle className=\"text-2xl md:text-3xl\">\n                      Ready to Get Started?\n                    </CardTitle>\n                    <CardDescription className=\"text-sm\">\n                      List your property in minutes and start receiving bookings today. \n                      Our team will guide you through the entire process.\n                    </CardDescription>\n                  </div>\n                </CardHeader>\n\n                <CardContent className=\"space-y-6\">\n                  {/* CTA Buttons */}\n                  <div className=\"space-y-3\">\n                    {!isAuthenticated ? (\n                      // User is not authenticated\n                      <Button \n                        size=\"lg\" \n                        className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-primary cursor-pointer\"\n                        onClick={handleListPropertyClick}\n                      >\n                        <span>List Your Property Today</span>\n                        <ArrowUpRight className=\"ml-2 h-5 w-5 transition-transform group-hover/btn:translate-x-1 group-hover/btn:-translate-y-1\" />\n                      </Button>\n                    ) : isGuest ? (\n                      // User is authenticated as Guest\n                      hasHotelRegistered ? (\n                        // Guest has hotel registered - show guest dashboard option\n                        <div className=\"text-center space-y-3\">\n                          <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n                            <div className=\"flex items-center justify-center space-x-2 text-green-700\">\n                              <Shield className=\"h-5 w-5\" />\n                              <span className=\"font-medium\">Property Already Listed</span>\n                            </div>\n                            <p className=\"text-sm text-green-600 mt-1\">\n                              You already have a property listed with YakRooms. \n                              Access your guest dashboard to manage your bookings.\n                            </p>\n                          </div>\n                          <Link to=\"/guestDashboard\" className=\"block\">\n                            <Button size=\"lg\" className=\"w-full bg-white hover:bg-white cursor-pointer text-yellow-500\">\n                              <span>Go to Guest Dashboard</span>\n                              <ChevronRight className=\"ml-2 h-5 w-5\" />\n                            </Button>\n                          </Link>\n                        </div>\n                      ) : (\n                        // Guest without hotel - show add property option\n                        <Link to=\"/addListing\" className=\"block\">\n                          <Button size=\"lg\" className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-primary cursor-pointer\">\n                            <span>Add Your Property</span>\n                            <ArrowUpRight className=\"ml-2 h-5 w-5 transition-transform group-hover/btn:translate-x-1 group-hover/btn:-translate-y-1\" />\n                          </Button>\n                        </Link>\n                      )\n                    ) : hasHotelRegistered ? (\n                      // User already has a hotel registered\n                      <div className=\"text-center space-y-3\">\n                        <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n                          <div className=\"flex items-center justify-center space-x-2 text-green-700\">\n                            <Shield className=\"h-5 w-5\" />\n                            <span className=\"font-medium\">Property Already Listed</span>\n                          </div>\n                          <p className=\"text-sm text-green-600 mt-1\">\n                            You already have a property listed with YakRooms. \n                            Manage your property from your dashboard.\n                          </p>\n                        </div>\n                        <Link to=\"/hotelAdmin\" className=\"block\">\n                          <Button size=\"lg\" className=\"w-full bg-white hover:bg-white cursor-pointer text-yellow-500\">\n                            <span>Go to Dashboard</span>\n                            <ChevronRight className=\"ml-2 h-5 w-5\" />\n                          </Button>\n                        </Link>\n                      </div>\n                    ) : (\n                      // User is authenticated (Hotel Admin/Staff) but doesn't have a hotel\n                      <Link to=\"/addListing\" className=\"block\">\n                        <Button size=\"lg\" className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-primary cursor-pointer\">\n                          <span>List Your Property Today</span>\n                          <ArrowUpRight className=\"ml-2 h-5 w-5 transition-transform group-hover/btn:translate-x-1 group-hover/btn:-translate-y-1\" />\n                        </Button>\n                      </Link>\n                    )}\n                    \n                    {/* <Button variant=\"outline\" size=\"lg\" className=\"w-full\">\n                      Learn More About Partnership\n                    </Button> */}\n                  </div>\n\n                  <Separator />\n\n                  {/* Trust indicators */}\n                  <div className=\"text-center\">\n                    <div className=\"flex items-center justify-center space-x-1 text-yellow-500 mb-2\">\n                      {[...Array(5)].map((_, i) => (\n                        <Star key={i} className=\"w-4 h-4 fill-current\" />\n                      ))}\n                    </div>\n                    <p className=\"text-sm  text-yelllow-500\">\n                      Listed 10+ partners\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Bottom Features */}\n          <div className=\"mt-16 text-center space-y-6\">\n            <Separator />\n            <div className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                Why property owners choose YakRooms\n              </p>\n              <div className=\"flex flex-wrap justify-center gap-2\">\n                {[\n                  \"No commission fees for first month\",\n                  \"Easy property management\",\n                  \"Marketing support included\",\n                  \"Real-time analytics dashboard\"\n                ].map((feature, index) => (\n                  <Badge key={index} variant=\"outline\">\n                    {feature}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default ListYourPropertySection;","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/landing/PartnerWithUsSection.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'motion' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"motion"},"fix":{"range":[27,66],"text":""},"desc":"Remove unused variable 'motion'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Typography, Button, Card } from \"@material-tailwind/react\";\n\nconst PartnerWithUsSection = () => {\n  return (\n    <section className=\"py-16 px-4 lg:px-8 bg-blue-50\">\n      <div className=\"container mx-auto\">\n        <Card className=\"rounded-2xl shadow-md overflow-hidden\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-0\">\n            {/* Text Content */}\n            <div className=\"p-8 lg:p-12 flex flex-col justify-center bg-white\">\n              <Typography\n                variant=\"h2\"\n                className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\"\n              >\n                YakRooms for Hosts & Local Businesses\n              </Typography>\n\n              <Typography variant=\"lead\" className=\"text-lg text-gray-700 mb-6\">\n                List your hotel, homestay, or restaurant on YakRooms and reach\n                travelers across Bhutan. We empower small businesses to thrive\n                in the digital age.\n              </Typography>\n\n              {/* Benefits Grid */}\n              <div className=\"grid grid-cols-2 gap-4 mb-8\">\n                <div className=\"flex items-start\">\n                  <span className=\"text-2xl mr-3\">🏨</span>\n                  <Typography variant=\"small\" className=\"text-gray-700\">\n                    No upfront cost\n                  </Typography>\n                </div>\n                <div className=\"flex items-start\">\n                  <span className=\"text-2xl mr-3\">🍽️</span>\n                  <Typography variant=\"small\" className=\"text-gray-700\">\n                    Easy onboarding\n                  </Typography>\n                </div>\n                <div className=\"flex items-start\">\n                  <span className=\"text-2xl mr-3\">📈</span>\n                  <Typography variant=\"small\" className=\"text-gray-700\">\n                    Performance analytics\n                  </Typography>\n                </div>\n                <div className=\"flex items-start\">\n                  <span className=\"text-2xl mr-3\">✅</span>\n                  <Typography variant=\"small\" className=\"text-gray-700\">\n                    Verified listings\n                  </Typography>\n                </div>\n              </div>\n\n              {/* Trust Signal */}\n              <Typography\n                variant=\"small\"\n                className=\"text-blue-600 font-medium mb-6\"\n              >\n                Trusted by 100+ local businesses across Bhutan\n              </Typography>\n\n              {/* Buttons */}\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <motion.div\n                  whileHover={{ scale: 1.03 }}\n                  whileTap={{ scale: 0.98 }}\n                >\n                  <Button\n                    size=\"lg\"\n                    color=\"blue\"\n                    className=\"rounded-full px-8 py-3 shadow-md hover:shadow-lg\"\n                  >\n                    Join as a Partner\n                  </Button>\n                </motion.div>\n                <motion.div\n                  whileHover={{ scale: 1.03 }}\n                  whileTap={{ scale: 0.98 }}\n                >\n                  <Button\n                    size=\"lg\"\n                    variant=\"outlined\"\n                    color=\"blue\"\n                    className=\"rounded-full px-8 py-3 border-2 hover:bg-blue-50/50\"\n                  >\n                    List Your Business\n                  </Button>\n                </motion.div>\n              </div>\n            </div>\n\n            {/* Image/Illustration Side */}\n            <div className=\"hidden lg:flex bg-gradient-to-br from-blue-100 to-blue-200 relative overflow-hidden\">\n              <div className=\"absolute inset-0 flex items-center justify-center p-12\">\n                {/* Vector-style illustration */}\n                <svg\n                  width=\"100%\"\n                  height=\"100%\"\n                  viewBox=\"0 0 500 400\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className=\"text-blue-500\"\n                >\n                  {/* Building */}\n                  <rect\n                    x=\"100\"\n                    y=\"150\"\n                    width=\"300\"\n                    height=\"200\"\n                    rx=\"10\"\n                    fill=\"white\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                  />\n                  <rect\n                    x=\"120\"\n                    y=\"170\"\n                    width=\"80\"\n                    height=\"80\"\n                    rx=\"5\"\n                    fill=\"#93C5FD\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"1.5\"\n                  />\n                  <rect\n                    x=\"220\"\n                    y=\"170\"\n                    width=\"80\"\n                    height=\"80\"\n                    rx=\"5\"\n                    fill=\"#93C5FD\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"1.5\"\n                  />\n                  <rect\n                    x=\"320\"\n                    y=\"170\"\n                    width=\"60\"\n                    height=\"80\"\n                    rx=\"5\"\n                    fill=\"#93C5FD\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"1.5\"\n                  />\n\n                  {/* People */}\n                  <circle cx=\"150\" cy=\"300\" r=\"15\" fill=\"#3B82F6\" />\n                  <circle cx=\"200\" cy=\"300\" r=\"15\" fill=\"#3B82F6\" />\n                  <path\n                    d=\"M150 315V340H200V315\"\n                    stroke=\"#3B82F6\"\n                    strokeWidth=\"2\"\n                    fill=\"white\"\n                  />\n\n                  {/* Handshake */}\n                  <path\n                    d=\"M250 250L270 230\"\n                    stroke=\"#3B82F6\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                  />\n                  <path\n                    d=\"M270 230L300 250\"\n                    stroke=\"#3B82F6\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                  />\n                  <circle\n                    cx=\"250\"\n                    cy=\"250\"\n                    r=\"20\"\n                    fill=\"white\"\n                    stroke=\"#3B82F6\"\n                    strokeWidth=\"2\"\n                  />\n                  <circle\n                    cx=\"300\"\n                    cy=\"250\"\n                    r=\"20\"\n                    fill=\"white\"\n                    stroke=\"#3B82F6\"\n                    strokeWidth=\"2\"\n                  />\n\n                  {/* Food icon */}\n                  <circle\n                    cx=\"400\"\n                    cy=\"300\"\n                    r=\"25\"\n                    fill=\"#F59E0B\"\n                    opacity=\"0.2\"\n                    stroke=\"#F59E0B\"\n                    strokeWidth=\"2\"\n                  />\n                  <path d=\"M400 280L395 290H405L400 280Z\" fill=\"#F59E0B\" />\n                  <path d=\"M390 300L385 310H395L390 300Z\" fill=\"#F59E0B\" />\n                  <path d=\"M410 300L405 310H415L410 300Z\" fill=\"#F59E0B\" />\n                </svg>\n              </div>\n\n              {/* Floating badges */}\n              <div className=\"absolute top-8 right-8 bg-white/90 rounded-full px-4 py-2 shadow-sm\">\n                <Typography variant=\"small\" className=\"font-bold text-blue-600\">\n                  🚀 30% more bookings\n                </Typography>\n              </div>\n              <div className=\"absolute bottom-8 left-8 bg-white/90 rounded-full px-4 py-2 shadow-sm\">\n                <Typography variant=\"small\" className=\"font-bold text-blue-600\">\n                  ⏱️ 5-min signup\n                </Typography>\n              </div>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </section>\n  );\n};\n\nexport default PartnerWithUsSection;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/landing/PortfolioPage.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/landing/PrivacyPolicy.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/landing/TestimonialsSection.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'motion' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"motion"},"fix":{"range":[27,66],"text":""},"desc":"Remove unused variable 'motion'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardBody, Typography } from \"@material-tailwind/react\";\nimport { StarIcon } from \"@heroicons/react/24/solid\";\n\nconst TestimonialsSection = () => {\n  const testimonials = [\n    {\n      id: 1,\n      quote:\n        \"YakRooms made booking in Paro effortless! Found the perfect homestay with mountain views.\",\n      name: \"Sonam D.\",\n      rating: 5,\n      avatar: \"https://randomuser.me/api/portraits/women/44.jpg\",\n    },\n    {\n      id: 2,\n      quote:\n        \"The real-time availability feature saved me hours of research. Booked my Thimphu hotel in minutes!\",\n      name: \"Karma L.\",\n      rating: 4,\n      avatar: \"https://randomuser.me/api/portraits/men/32.jpg\",\n    },\n    {\n      id: 3,\n      quote:\n        \"As a solo traveler, I appreciated the verified reviews. My Punakha stay was exactly as described.\",\n      name: \"Dechen W.\",\n      rating: 5,\n      avatar: \"https://randomuser.me/api/portraits/women/68.jpg\",\n    },\n    {\n      id: 4,\n      quote:\n        \"The restaurant recommendations were spot on. Best momos I've ever had in Bhutan!\",\n      name: \"Tashi N.\",\n      rating: 5,\n      avatar: \"https://randomuser.me/api/portraits/men/75.jpg\",\n    },\n  ];\n\n  return (\n    <section className=\"py-12 px-4 lg:px-8 bg-gray-50\">\n      <div className=\"container mx-auto\">\n        <Typography variant=\"h3\" className=\"text-center mb-12 text-gray-900\">\n          Loved by Travelers Across Bhutan\n        </Typography>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {testimonials.map((testimonial) => (\n            <motion.div\n              key={testimonial.id}\n              whileHover={{ y: -5 }}\n              transition={{ type: \"spring\", stiffness: 300 }}\n            >\n              <Card className=\"h-full p-6 shadow-md hover:shadow-lg rounded-xl bg-white transition-shadow\">\n                <CardBody className=\"flex flex-col h-full p-0\">\n                  {/* Rating */}\n                  <div className=\"flex mb-4\">\n                    {[...Array(5)].map((_, i) => (\n                      <StarIcon\n                        key={i}\n                        className={`h-5 w-5 ${\n                          i < testimonial.rating\n                            ? \"text-amber-400\"\n                            : \"text-gray-300\"\n                        }`}\n                      />\n                    ))}\n                  </div>\n\n                  {/* Testimonial */}\n                  <Typography\n                    variant=\"lead\"\n                    className=\"mb-6 italic text-gray-700\"\n                  >\n                    \"{testimonial.quote}\"\n                  </Typography>\n\n                  {/* User */}\n                  <div className=\"flex items-center mt-auto\">\n                    {testimonial.avatar ? (\n                      <img\n                        src={testimonial.avatar}\n                        alt={testimonial.name}\n                        className=\"w-10 h-10 rounded-full object-cover mr-3\"\n                      />\n                    ) : (\n                      <div className=\"w-10 h-10 rounded-full bg-amber-100 flex items-center justify-center mr-3\">\n                        <span className=\"text-amber-600 font-medium\">\n                          {testimonial.name.charAt(0)}\n                        </span>\n                      </div>\n                    )}\n                    <Typography variant=\"h6\" className=\"text-gray-900\">\n                      {testimonial.name}\n                    </Typography>\n                  </div>\n                </CardBody>\n              </Card>\n            </motion.div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default TestimonialsSection;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/landing/TopHighlightsSection.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'motion' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"motion"},"fix":{"range":[52,91],"text":""},"desc":"Remove unused variable 'motion'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'setTopHotelIds'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [setTopHotelIds]","fix":{"range":[1928,1930],"text":"[setTopHotelIds]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { MapPinIcon } from \"lucide-react\"; // Using lucide-react for icons\nimport { Link } from \"react-router-dom\";\n// ShadCN UI Components\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n  CardFooter,\n} from \"@/shared/components/card\";\nimport { Button } from \"@/shared/components/button\";\nimport StarRating from \"@/shared/components/star-rating\";\nimport api from \"../../shared/services/Api\";\nimport YakRoomsLoader from \"@/shared/components/YakRoomsLoader\";\nimport { useAuth } from \"../authentication\";\n\nconst TopHighlightsSection = () => {\n  const [hotelsData, setHotelsData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const { setTopHotelIds } = useAuth();\n\n  useEffect(() => {\n    const fetchHotels = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const response = await api.get(\"/hotels/topThree\");\n        if (!response.status === 200) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        setHotelsData(response.data);\n        \n        // Store hotel IDs in context\n        const hotelIds = response.data.map(hotel => hotel.id);\n        console.log(\"🏆 [TOP HIGHLIGHTS] Storing top hotel IDs:\");\n        console.log(\"  - Raw response.data:\", response.data);\n        console.log(\"  - Extracted hotel IDs:\", hotelIds);\n        console.log(\"  - Hotel IDs types:\", hotelIds.map(id => typeof id));\n        setTopHotelIds(hotelIds);\n        console.log(\"  - Successfully called setTopHotelIds\");\n      } catch (e) {\n        console.error(\"Failed to fetch hotels:\", e);\n        setError(\"Failed to load hotels. Please try again later.\");\n        setHotelsData([]); // Clear data on error\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchHotels();\n  }, []);\n\n  return (\n    <>\n      <style>\n        {`\n          /* Hide scrollbar for Chrome, Safari and Opera */\n          .overflow-x-auto::-webkit-scrollbar {\n            display: none;\n          }\n          \n          /* Hide scrollbar for IE, Edge and Firefox */\n          .overflow-x-auto {\n            -ms-overflow-style: none;  /* IE and Edge */\n            scrollbar-width: none;  /* Firefox */\n          }\n        `}\n      </style>\n      {/* Adjusted for consistent section padding and width across sizes */}\n      <section className=\"py-5 lg:py-12 mt-10 px-6 sm:px-4 lg:px-8 lg:w-[70%] m-auto\">\n        <div className=\"container mx-auto\">\n          {/* Adjusted heading size for better hierarchy */}\n          <h3 className=\"text-center text-2xl font-bold mb-8 text-gray-900\">\n            Top Listed Lodges\n          </h3>\n\n          {loading && (\n            <div className=\"flex justify-center items-center py-8\">\n              <YakRoomsLoader \n                size={112} \n                showTagline={false} \n                loadingText=\"\"\n                className=\"mb-4\"\n              />\n            </div>\n          )}\n          {error && <p className=\"text-center text-red-500\">{error}</p>}\n          {!loading && !error && hotelsData.length === 0 && (\n            <p className=\"text-center text-gray-600\">\n              No hotels found.\n            </p>\n          )}\n\n          {/* Mobile Carousel - Now with fixed card width for consistency */}\n          <div className=\"md:hidden overflow-x-auto pb-4\">\n            {/* Added horizontal padding for consistent breathing room on mobile */}\n            <div className=\"flex space-x-4 w-max px-4\">\n              {hotelsData.map((item) => (\n                <motion.div\n                  key={item.id}\n                  // Ensured consistent card width across all screen sizes\n                  className=\"w-72 flex-shrink-0\" // Keeping consistent with the desired large card size\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <ListingCard item={item} />\n                </motion.div>\n              ))}\n            </div>\n          </div>\n\n          {/* Desktop Grid - Now with fixed card width for consistency and horizontal scroll on overflow */}\n          {/* Added overflow-x-auto for md and lg screens to enable horizontal scrolling if content exceeds layout */}\n          <div className=\"hidden md:block overflow-x-auto\">\n            {/* Adjusted grid for responsiveness, gap, and centering */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 lg:gap-8 max-w-none justify-items-center md:w-max md:mx-auto\"> {/* Added md:w-max and md:mx-auto to allow content to dictate width and center if wider than viewport */}\n              {hotelsData.map((item) => (\n                <motion.div\n                  key={item.id}\n                  // Ensured consistent card width across all screen sizes\n                  className=\"w-72\" // Keeping consistent with the desired large card size\n                  whileHover={{ y: -5 }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <ListingCard item={item} />\n                </motion.div>\n              ))}\n            </div>\n          </div>\n\n          {/* View All Hotels Button - Responsive */}\n          <div className=\"flex justify-center mt-6 md:mt-8\">\n            <Link \n              to=\"/hotels\"\n              className=\"text-blue-600 hover:text-blue-800 text-sm font-small transition-colors duration-200 hover:underline\"\n            >\n              View more hotels →\n            </Link>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n};\n\nconst ListingCard = ({ item }) => {\n  // Determine image URL based on the item structure\n  const imageUrl =\n    item.photoUrls && item.photoUrls.length > 0\n      ? item.photoUrl\n      : \"https://images.unsplash.com/photo-1566073771259-6a8506099945?w=600&h=400&fit=crop&auto=format&q=80\";\n\n  // Hotel-specific data\n  const id = item.id;\n  const title = item.name;\n  const typeOrDescription = item.hotelType ? item.hotelType.replace(/_/g, \" \") : item.description;\n  const location = item.district || item.address;\n  const priceDisplay = item.lowestPrice || item.price || null;\n\n  // Determine price display message\n  const getPriceDisplay = () => {\n    if (priceDisplay && priceDisplay !== \"-\" && priceDisplay !== \"null\") {\n      // Format price with comma separators\n      const formattedPrice = Number(priceDisplay).toLocaleString();\n      return (\n        <>\n          <span className=\"text-yellow-600\">From - </span>\n          <span className=\"font-bold\">Nu. {formattedPrice}</span> /night\n        </>\n      );\n    } else {\n      return (\n        <span className=\"text-gray-500 italic\">Contact for pricing</span>\n      );\n    }\n  };\n\n  return (\n    // Ensured consistent card height and shadow for visual appeal\n    <Card className=\"h-full flex flex-col overflow-hidden shadow-md hover:shadow-lg transition-shadow rounded-xl border border-gray-100\">\n      <CardHeader className=\"p-0 flex-grow-0\">\n        {/* Adjusted image height to be consistent with larger card size */}\n        <div className=\"relative h-44 w-full\"> {/* Increased height from h-32 to h-44 for consistency */}\n          <img\n            src={imageUrl}\n            alt={title}\n            className=\"h-full w-full object-cover rounded-t-xl\"\n          />\n          {item.tag && (\n            // Adjusted positioning and padding of tag for consistency\n            <div className=\"absolute bottom-3 left-3 px-2.5 py-1 rounded-md bg-yellow-500 text-slate-900 text-xs font-bold\">\n              {item.tag}\n            </div>\n          )}\n        </div>\n      </CardHeader>\n      {/* Adjusted content padding for better visual spacing */}\n      <CardContent className=\"p-3 flex-grow\">\n        {/* Adjusted title font size for consistency */}\n        <CardTitle className=\"mb-0.5 text-base font-semibold text-gray-900 line-clamp-1\">\n          {title}\n        </CardTitle>\n        {/* Adjusted description font size for consistency */}\n        <CardDescription className=\"text-sm text-gray-600 mb-1 line-clamp-1\">\n          {typeOrDescription}\n        </CardDescription>\n        {/* Adjusted map icon and location text sizes for consistency */}\n        <div className=\"flex items-center text-gray-600 mb-1\">\n          <MapPinIcon className=\"h-3.5 w-3.5 mr-1\" /> {/* Increased icon size */}\n          <p className=\"text-sm line-clamp-1\">{location}</p> {/* Increased text size */}\n        </div>\n\n        {/* Rating Section */}\n        {item.avgRating > 0 && (\n          <div className=\"flex items-center gap-2 mb-1\">\n            <StarRating \n              rating={item.avgRating} \n              size={12} \n              showRating={true}\n              className=\"flex-shrink-0\"\n            />\n            <span className=\"text-xs text-gray-500\">\n              ({item.avgRating.toFixed(1)} Avg. Rating)\n            </span>\n          </div>\n        )}\n      </CardContent>\n      {/* Adjusted footer padding for consistent spacing */}\n      <CardFooter className=\"p-3 border-t bg-gray-50\">\n        <div className=\"w-full flex justify-between items-center\">\n          {/* Adjusted price display font size for consistency */}\n          <p className=\"text-sm text-gray-900\"> {/* Changed from text-14 to text-sm */}\n            {getPriceDisplay()}\n          </p>\n          {/* Adjusted button padding and text size for consistency */}\n          <Button\n            size=\"sm\"\n            className=\"bg-yellow-500 hover:bg-yellow-600 text-white rounded-full px-4 py-2 text-sm cursor-pointer\" // Increased px and py for larger button\n          >\n            <Link to={`/hotel/${id}`}>View Details</Link>\n          </Button>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n};\n\nexport default TopHighlightsSection;","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/landing/TrustIndicatorsSection.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'motion' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"motion"},"fix":{"range":[27,66],"text":""},"desc":"Remove unused variable 'motion'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { motion } from \"framer-motion\";\nimport CountUp from \"react-countup\";\n\n// ShadCN UI Components\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/shared/components/card\";\nimport { Badge } from \"@/shared/components/badge\";\nimport { Separator } from \"@/shared/components/separator\";\n\n// Using Heroicons as an alternative to lucide-react\nimport {\n  BuildingStorefrontIcon,\n  CakeIcon,\n  ChatBubbleLeftRightIcon,\n} from \"@heroicons/react/24/outline\"; // Outline icons for stats\nimport {\n  LockClosedIcon,\n  Cog6ToothIcon, // Adjusted to Cog6ToothIcon as CogIcon is usually in outline\n  CloudIcon,\n  HandRaisedIcon, // Using HandRaisedIcon as a general handshake alternative from heroicons\n} from \"@heroicons/react/24/solid\"; // Solid icons for trust badges and handshake\n\nconst TrustIndicatorsSection = () => {\n  const stats = [\n    {\n      id: 1,\n      icon: <BuildingStorefrontIcon className=\"h-8 w-8 text-blue-500\" />,\n      value: 500,\n      suffix: \"+\",\n      label: \"Hotels & Homestays Listed\",\n      emoji: \"🏨\",\n    },\n    {\n      id: 2,\n      icon: <CakeIcon className=\"h-8 w-8 text-amber-500\" />, // Keeping CakeIcon as per original and adapting to 'meals discovered'\n      value: 10000,\n      suffix: \"+\",\n      label: \"Meals Discovered\",\n      emoji: \"🍲\",\n    },\n    {\n      id: 3,\n      icon: <ChatBubbleLeftRightIcon className=\"h-8 w-8 text-green-500\" />,\n      value: 2500,\n      suffix: \"+\",\n      label: \"Verified Reviews\",\n      emoji: \"💬\",\n    },\n    {\n      id: 4,\n      icon: <HandRaisedIcon className=\"h-8 w-8 text-indigo-500\" />, // Using HandRaisedIcon as a suitable alternative for handshake\n      value: 150,\n      suffix: \"+\",\n      label: \"Local Partners Empowered\",\n      emoji: \"🤝\",\n    },\n  ];\n\n  const trustBadges = [\n    {\n      icon: <LockClosedIcon className=\"h-4 w-4\" />,\n      label: \"Secure with Firebase Auth\",\n      variant: \"outline\",\n      className: \"border-blue-400 text-blue-600\",\n    },\n    {\n      icon: <Cog6ToothIcon className=\"h-4 w-4\" />, // Using Cog6ToothIcon (solid)\n      label: \"Built on Spring Boot\",\n      variant: \"outline\",\n      className: \"border-purple-400 text-purple-600\",\n    },\n    {\n      icon: <CloudIcon className=\"h-4 w-4\" />,\n      label: \"Powered by PostgreSQL & Firebase\",\n      variant: \"outline\",\n      className: \"border-teal-400 text-teal-600\",\n    },\n  ];\n\n  return (\n    <section className=\"py-16 px-4 lg:px-8 bg-background\">\n      <div className=\"container mx-auto max-w-7xl\">\n        <motion.div\n          initial={{ opacity: 0 }}\n          whileInView={{ opacity: 1 }}\n          transition={{ duration: 0.6 }}\n          viewport={{ once: true }}\n          className=\"space-y-12\"\n        >\n          {/* Header Section */}\n          <div className=\"text-center space-y-4\">\n            <h2 className=\"text-3xl font-bold tracking-tight text-foreground md:text-4xl\">\n              Trusted by Thousands\n            </h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Built for Bhutan, Backed by Technology\n            </p>\n          </div>\n\n          {/* Main Content Card */}\n          <Card className=\"border-0 shadow-lg bg-card\">\n            <CardHeader className=\"pb-8\">\n              <CardTitle className=\"text-2xl font-semibold text-center text-card-foreground\">\n                Platform Statistics\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-8\">\n              {/* Stats Grid */}\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n                {stats.map((stat) => (\n                  <motion.div\n                    key={stat.id}\n                    whileHover={{ y: -5 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                    className=\"group\"\n                  >\n                    <Card className=\"border bg-background hover:bg-accent/50 transition-colors duration-200 h-full\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex flex-col items-center text-center space-y-4\">\n                          {/* Icon Container */}\n                          <div className=\"flex items-center justify-center w-16 h-16 rounded-full bg-muted group-hover:bg-primary/10 transition-colors duration-200\">\n                            {stat.icon}\n                          </div>\n\n                          {/* Counter */}\n                          <div className=\"space-y-2\">\n                            <div className=\"text-3xl font-bold text-foreground md:text-4xl\">\n                              <CountUp\n                                end={stat.value}\n                                duration={2}\n                                separator=\",\"\n                                suffix={stat.suffix}\n                              />\n                            </div>\n                            <p className=\"text-sm text-muted-foreground font-medium\">\n                              {stat.label} {stat.emoji}\n                            </p>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n                ))}\n              </div>\n\n              <Separator className=\"my-8\" />\n\n              {/* Trust Badges Section */}\n              <div className=\"space-y-6\">\n                <h3 className=\"text-xl font-semibold text-center text-card-foreground\">\n                  Built with Modern Technology\n                </h3>\n                <div className=\"flex flex-wrap justify-center gap-4\">\n                  {trustBadges.map((badge, index) => (\n                    <Badge\n                      key={index}\n                      variant={badge.variant}\n                      className={`${badge.className} px-4 py-2 text-sm font-medium flex items-center gap-2 hover:opacity-80 transition-opacity`}\n                    >\n                      {badge.icon}\n                      <span>{badge.label}</span>\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Bottom Section */}\n          <div className=\"text-center\">\n            <p className=\"text-sm text-muted-foreground max-w-xl mx-auto\">\n              Join thousands of travelers who trust YakRooms for their authentic\n              Bhutanese experience\n            </p>\n          </div>\n        </motion.div>\n      </div>\n    </section>\n  );\n};\n\nexport default TrustIndicatorsSection;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/landing/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/subscription/SubscriptionPage.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/features/subscription/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/layouts/Footer.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/layouts/Navbar.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'getPrimaryRole' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":55,"column":81,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":95,"suggestions":[{"messageId":"removeVar","data":{"varName":"getPrimaryRole"},"fix":{"range":[1315,1331],"text":""},"desc":"Remove unused variable 'getPrimaryRole'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { toast } from \"sonner\";\nimport {\n  Menu,\n  X,\n  Sun,\n  Moon,\n  LogOut,\n  LayoutDashboard,\n  User,\n  Home,\n  Hotel,\n  UserPlus,\n  Mail,\n  ChevronRight,\n  MessageCircle,\n  AlertTriangle,\n  Info,\n} from \"lucide-react\";\nimport { cn } from \"@/shared/utils\";\nimport { Button } from \"@/shared/components/button\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n  SheetClose,\n} from \"@/shared/components/sheet\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/shared/components/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/shared/components/avatar\";\nimport { useAuth } from \"@/features/authentication\";\nimport { Badge } from \"@/shared/components/badge\";\nimport { Separator } from \"@/shared/components/separator\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/shared/components/dialog\";\nimport { YakRoomsText } from \"@/shared/components\";\n\nconst Navbar = ({ onLoginClick, onContactClick }) => {\n  const { isAuthenticated, logout, userName, email, roles, pictureURL, hasRole, getPrimaryRole, getCurrentActiveRole, switchToRole } = useAuth();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [theme, setTheme] = useState(\"light\");\n  const [scrollbarWidth, setScrollbarWidth] = useState(0);\n  const [isLogoutConfirmationOpen, setIsLogoutConfirmationOpen] = useState(false);\n\n  // Add CSS for hiding scrollbar\n  useEffect(() => {\n    const style = document.createElement('style');\n    style.textContent = `\n      .scrollbar-hide {\n        -ms-overflow-style: none;  /* Internet Explorer 10+ */\n        scrollbar-width: none;  /* Firefox */\n      }\n      .scrollbar-hide::-webkit-scrollbar {\n        display: none;  /* Safari and Chrome */\n      }\n    `;\n    document.head.appendChild(style);\n    \n    return () => {\n      document.head.removeChild(style);\n    };\n  }, []);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 10);\n    };\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n  }, [theme]);\n\n  useEffect(() => {\n    const calculateScrollbarWidth = () => {\n      const scrollbarWidth =\n        window.innerWidth - document.documentElement.clientWidth;\n      setScrollbarWidth(scrollbarWidth);\n    };\n\n    calculateScrollbarWidth();\n    window.addEventListener(\"resize\", calculateScrollbarWidth);\n    return () => window.removeEventListener(\"resize\", calculateScrollbarWidth);\n  }, []);\n\n  const navLinks = [\n    { name: \"Home\", path: \"/\", icon: Home, description: \"Back to homepage\" },\n    { name: \"Hotels\", path: \"/hotels\", icon: Hotel, description: \"Find accommodations\" },\n    { name: \"About\", path: \"/aboutus\", icon: Info, description: \"Learn about us\" },\n    { name: \"Contact\", path: \"/contact\", icon: Mail, description: \"Get in touch\" },\n  ];\n\n  // Helper function to get role display info\n  const getRoleDisplayInfo = (role, isActive = false) => {\n    const roleInfo = {\n      'SUPER_ADMIN': { \n        label: 'Admin', \n        color: isActive \n          ? 'bg-gradient-to-r from-red-500 to-red-600 text-white border-red-500 shadow-lg shadow-red-500/25' \n          : 'bg-red-100 text-red-800 border-red-200',\n        ringColor: 'rgb(239 68 68 / 0.4)'\n      },\n      'HOTEL_ADMIN': { \n        label: 'Hotel Admin', \n        color: isActive \n          ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white border-blue-500 shadow-lg shadow-blue-500/25' \n          : 'bg-blue-100 text-blue-800 border-blue-200',\n        ringColor: 'rgb(59 130 246 / 0.4)'\n      },\n      'STAFF': { \n        label: 'Staff', \n        color: isActive \n          ? 'bg-gradient-to-r from-emerald-500 to-emerald-600 text-white border-emerald-500 shadow-lg shadow-emerald-500/25' \n          : 'bg-green-100 text-green-800 border-green-200',\n        ringColor: 'rgb(34 197 94 / 0.4)'\n      },\n      'GUEST': { \n        label: 'Guest', \n        color: isActive \n          ? 'bg-gradient-to-r from-purple-500 to-purple-600 text-white border-purple-500 shadow-lg shadow-purple-500/25' \n          : 'bg-purple-100 text-purple-800 border-purple-200',\n        ringColor: 'rgb(168 85 247 / 0.4)'\n      },\n    };\n    return roleInfo[role] || { \n      label: role, \n      color: isActive \n        ? 'bg-gradient-to-r from-gray-500 to-gray-600 text-white border-gray-500 shadow-lg shadow-gray-500/25' \n        : 'bg-gray-100 text-gray-800 border-gray-200',\n      ringColor: 'rgb(107 114 128 / 0.4)'\n    };\n  };\n\n  const UserNav = () => {\n    if (!isAuthenticated) {\n      return (\n        <div className=\"hidden md:flex items-center gap-2\">\n          <Button variant=\"ghost\" onClick={onLoginClick}>\n            Login\n          </Button>\n          <Button\n            className=\"bg-yellow-500 hover:bg-yellow-600 text-slate-900\"\n            onClick={onLoginClick}\n          >\n            Register\n          </Button>\n        </div>\n      );\n    }\n\n    const currentActiveRole = getCurrentActiveRole();\n    const roleDisplayInfo = getRoleDisplayInfo(currentActiveRole, true); // Mark as active for bright colors\n    const availableRoles = roles.filter(role => role !== currentActiveRole);\n\n    return (\n      <DropdownMenu modal={false}>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" className=\"relative h-10 w-10 rounded-full\">\n            <Avatar className=\"h-10 w-10 border-2 border-yellow-500\">\n              <AvatarImage src={pictureURL} alt={userName} />\n              <AvatarFallback className=\"bg-slate-700 text-yellow-500\">\n                {userName?.charAt(0).toUpperCase()}\n              </AvatarFallback>\n            </Avatar>\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent\n          className=\"w-64\"\n          align=\"end\"\n          forceMount\n          side=\"bottom\"\n          sideOffset={5}\n          avoidCollisions={true}\n          collisionPadding={10}\n        >\n          <DropdownMenuLabel className=\"font-normal\">\n            <div className=\"flex flex-col space-y-1\">\n              <p className=\"text-sm font-medium leading-none\">{userName}</p>\n              <p className=\"text-xs leading-none text-muted-foreground\">\n                {email}\n              </p>\n              {/* Enhanced Current Role Badge with bright colors */}\n              <div className=\"mt-2 flex items-center gap-2\">\n                <span className={`inline-flex items-center px-2.5 py-1.5 rounded-full text-xs font-bold border-2 ${roleDisplayInfo.color} ring-2 ring-offset-1 ring-offset-background animate-pulse`} \n                      style={{ ringColor: roleDisplayInfo.ringColor }}>\n                  <div className=\"w-1.5 h-1.5 rounded-full bg-white/90 mr-1.5 animate-pulse\"></div>\n                  {roleDisplayInfo.label}\n                </span>\n                <span className=\"text-xs text-emerald-600 font-bold dark:text-emerald-400\">● ACTIVE</span>\n              </div>\n            </div>\n          </DropdownMenuLabel>\n          <DropdownMenuSeparator />\n          \n          {/* Dashboard Navigation */}\n          {(hasRole(\"HOTEL_ADMIN\") || hasRole(\"SUPER_ADMIN\") || hasRole(\"GUEST\") || hasRole(\"STAFF\")) && (\n            <DropdownMenuItem asChild>\n              <Link to=\"/dashboard\">\n                <LayoutDashboard className=\"mr-2 h-4 w-4\" />\n                <span>Dashboard</span>\n              </Link>\n            </DropdownMenuItem>\n          )}\n\n          {/* Role Switching Section */}\n          {availableRoles.length > 0 && (\n            <>\n              <DropdownMenuSeparator />\n              <DropdownMenuLabel className=\"text-xs font-medium text-muted-foreground flex items-center gap-2\">\n                <div className=\"w-2 h-2 rounded-full bg-muted-foreground/40\"></div>\n                Switch User Role\n              </DropdownMenuLabel>\n              {availableRoles.map((role) => {\n                const roleInfo = getRoleDisplayInfo(role, false); // Non-active styling\n                return (\n                  <DropdownMenuItem\n                    key={role}\n                    onClick={() => {\n                      switchToRole(role);\n                      const roleInfo = getRoleDisplayInfo(role);\n                      toast(`Switched to ${roleInfo.label} user`, {\n                        description: `You are now viewing the application as ${roleInfo.label}`,\n                        duration: 3000,\n                      });\n                    }}\n                    className=\"cursor-pointer hover:bg-accent/50 transition-colors\"\n                  >\n                    <div className=\"flex items-center justify-between w-full\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-2 h-2 rounded-full bg-muted-foreground/30\"></div>\n                        <span className=\"text-sm font-medium\">{roleInfo.label}</span>\n                      </div>\n                      <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium border ${roleInfo.color} opacity-75`}>\n                        {roleInfo.label}\n                      </span>\n                    </div>\n                  </DropdownMenuItem>\n                );\n              })}\n            </>\n          )}\n\n          <DropdownMenuSeparator />\n          <DropdownMenuItem \n            onClick={() => setIsLogoutConfirmationOpen(true)}\n            className=\"text-destructive focus:text-destructive\"\n          >\n            <LogOut className=\"mr-2 h-4 w-4\" />\n            <span>Log out</span>\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    );\n  };\n\n  const ThemeToggle = () => (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"dark\" ? \"light\" : \"dark\")}\n    >\n      <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n\n  const ContactSection = () => (\n    // Reduced top padding for mobile spacing\n    <div className=\"space-y-3 pt-3 border-t\">\n      {/* Fixed uniform left padding */}\n      <div className=\"px-6 pb-1\">\n        <h3 className=\"text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n          Contact & Support\n        </h3>\n      </div>\n      \n      {/* Contact Card */}\n      {/* Fixed uniform horizontal margin for mobile edge breathing room */}\n      <div className=\"mx-6 p-3 mb-0 rounded-lg\">\n        {/* Reduced gap and margin for mobile */}\n        <div className=\"flex items-center gap-1.5\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            // Smaller button height for mobile\n            className=\"h-6 px-2 text-xs border-blue-200 text-blue-600 hover:bg-blue-50 dark:border-blue-800 dark:text-blue-400 dark:hover:bg-blue-950/30\"\n            onClick={() => {\n              window.location.href = 'mailto:chogyalnorbu973@gmail.com';\n              setIsMobileMenuOpen(false);\n            }}\n          >\n            <Mail className=\"h-3 w-3 mr-1\" />\n            Email\n          </Button>\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            className=\"h-6 px-2 text-xs border-yellow-200 text-yellow-600 hover:bg-yellow-50 dark:border-yellow-800 dark:text-yellow-400 dark:hover:bg-yellow-950/30\"\n            onClick={() => {\n              onContactClick && onContactClick();\n              setIsMobileMenuOpen(false);\n            }}\n          >\n            <Info className=\"h-3 w-3 mr-1\" />\n            Info\n          </Button>\n        </div>\n      </div>\n\n\n\n      {/* Logout Button */}\n      {isAuthenticated && (\n        <>\n          {/* Fixed uniform horizontal margin */}\n          <Separator className=\"mx-6\" />\n          {/* Fixed uniform left padding */}\n          <div className=\"px-6\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-destructive hover:text-destructive hover:bg-destructive/10\"\n              onClick={() => setIsLogoutConfirmationOpen(true)}\n            >\n              <LogOut className=\"h-4 w-4\" />\n              Log Out\n            </Button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  const MobileUserSection = () => {\n    if (!isAuthenticated) {\n      return (\n        <div className=\"space-y-3\">\n          {/* Fixed uniform left padding */}\n          <div className=\"px-6 pb-1\">\n            <h3 className=\"text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n              Account\n            </h3>\n          </div>\n          {/* Fixed uniform left padding */}\n          <div className=\"space-y-1.5 px-6\">\n            <Button \n              variant=\"ghost\" \n              className=\"w-full justify-start\" \n              onClick={() => {\n                onLoginClick();\n                setIsMobileMenuOpen(false);\n              }}\n            >\n              <User className=\"mr-3 h-4 w-4\" />\n              Login\n            </Button>\n            <Button \n              className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-slate-900\" \n              onClick={() => {\n                onLoginClick();\n                setIsMobileMenuOpen(false);\n              }}\n            >\n              Register\n            </Button>\n          </div>\n        </div>\n      );\n    }\n\n    const currentActiveRole = getCurrentActiveRole();\n    const roleDisplayInfo = getRoleDisplayInfo(currentActiveRole, true); // Mark as active for bright colors\n    const availableRoles = roles.filter(role => role !== currentActiveRole);\n\n    return (\n      // Reduced vertical spacing\n      <div className=\"space-y-3\">\n        {/* Fixed uniform left padding */}\n        <div className=\"px-6 pb-1\">\n          <h3 className=\"text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n            Account\n          </h3>\n        </div>\n        \n        {/* Updated layout: Avatar on extreme right, user info on left */}\n        <div className=\"flex items-center justify-between px-6 py-3\">\n          {/* User info on the left */}\n          <div className=\"flex-1 min-w-0 pr-4\">\n            <p className=\"text-sm font-medium truncate\">{userName}</p>\n            <p className=\"text-xs text-muted-foreground truncate\">{email}</p>\n            {/* Enhanced Current Role Badge for mobile with bright colors */}\n            <div className=\"mt-1.5 flex items-center gap-2\">\n              <span className={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-bold border-2 ${roleDisplayInfo.color} ring-2 ring-offset-1 ring-offset-background animate-pulse`} \n                    style={{ ringColor: roleDisplayInfo.ringColor }}>\n                <div className=\"w-1 h-1 rounded-full bg-white/90 mr-1 animate-pulse\"></div>\n                {roleDisplayInfo.label}\n              </span>\n              <span className=\"text-xs text-emerald-600 font-bold dark:text-emerald-400\">● ACTIVE</span>\n            </div>\n          </div>\n          \n          {/* Bigger avatar on the extreme right */}\n          <Avatar className=\"h-14 w-14 border-2 border-primary flex-shrink-0\">\n            <AvatarImage src={pictureURL} alt={userName} />\n            <AvatarFallback className=\"bg-primary text-primary-foreground text-lg font-semibold\">\n              {userName?.charAt(0).toUpperCase()}\n            </AvatarFallback>\n          </Avatar>\n        </div>\n\n        {/* Fixed uniform left padding */}\n        <div className=\"space-y-0.5 px-6\">\n          {/* Dashboard Navigation */}\n          {(hasRole(\"HOTEL_ADMIN\") || hasRole(\"SUPER_ADMIN\") || hasRole(\"GUEST\") || hasRole(\"STAFF\")) && (\n            <>\n              <SheetClose asChild>\n                <Link\n                  to=\"/dashboard\"\n                  // Reduced vertical padding for mobile\n                  className=\"flex items-center justify-between px-3 py-1.5 rounded-md text-sm font-medium text-muted-foreground hover:text-primary hover:bg-accent transition-colors group\"\n                >\n                  <div className=\"flex items-center\">\n                    <LayoutDashboard className=\"mr-3 h-4 w-4\" />\n                    Dashboard\n                  </div>\n                  <ChevronRight className=\"h-4 w-4 group-hover:translate-x-1 transition-transform\" />\n                </Link>\n              </SheetClose>\n              {/* Reduced margin */}\n              <Separator className=\"my-1.5\" />\n            </>\n          )}\n\n          {/* Role Switching Section */}\n          {availableRoles.length > 0 && (\n            <>\n              <div className=\"px-3 py-1.5 flex items-center gap-2\">\n                <div className=\"w-2 h-2 rounded-full bg-muted-foreground/40\"></div>\n                <p className=\"text-xs font-medium text-muted-foreground\">\n                  Switch User Role\n                </p>\n              </div>\n              {availableRoles.map((role) => {\n                const roleInfo = getRoleDisplayInfo(role, false); // Non-active styling\n                return (\n                  <SheetClose asChild key={role}>\n                    <Button\n                      variant=\"ghost\"\n                      className=\"w-full justify-between px-3 py-2 text-sm font-medium text-muted-foreground hover:text-primary hover:bg-accent/50 transition-colors\"\n                      onClick={() => {\n                        switchToRole(role);\n                        setIsMobileMenuOpen(false);\n                        const roleInfo = getRoleDisplayInfo(role, true); // Will be active after switch\n                        toast(`Switched to ${roleInfo.label} user`, {\n                          description: `You are now viewing the application as ${roleInfo.label}`,\n                          duration: 3000,\n                        });\n                      }}\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-2 h-2 rounded-full bg-muted-foreground/30\"></div>\n                        <span>{roleInfo.label}</span>\n                      </div>\n                      <span className={`inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium border ${roleInfo.color} opacity-75`}>\n                        {roleInfo.label}\n                      </span>\n                    </Button>\n                  </SheetClose>\n                );\n              })}\n              <Separator className=\"my-1.5\" />\n            </>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <header\n      className={cn(\n        \"fixed w-full z-50 transition-all duration-300\",\n        isScrolled\n          ? \"bg-background/80 shadow-md backdrop-blur-sm\"\n          : \"bg-background/95\"\n      )}\n      style={{\n        transform: \"translateZ(0)\",\n        willChange: \"transform\",\n        paddingRight: scrollbarWidth,\n      }}\n    >\n      {/* Mobile-optimized container padding */}\n      <div className=\"w-full px-3 lg:px-8\">\n        {/* Slightly reduced navbar height for mobile */}\n        <div className=\"flex h-14 sm:h-16 items-center justify-between\">\n          <Link to=\"/\" className=\"flex items-center text-primary\">\n            <YakRoomsText size=\"default\" />\n          </Link>\n\n          <nav className=\"hidden md:flex items-center gap-2\">\n            {navLinks.map((link) => (\n              <Button key={link.name} variant=\"ghost\" asChild>\n                <NavLink\n                  to={link.path}\n                  className={({ isActive }) =>\n                    cn(\n                      \"text-sm font-medium transition-colors\",\n                      isActive ? \"text-primary\" : \"text-muted-foreground\"\n                    )\n                  }\n                >\n                  {link.name}\n                </NavLink>\n              </Button>\n            ))}\n          </nav>\n\n          <div className=\"flex items-center gap-2\">\n            <div className=\"hidden md:block\">{/* <ThemeToggle /> */}</div>\n\n            {/* Become a Host Button */}\n            {/* <div className=\"hidden md:block\">\n              <Button variant=\"outline\" size=\"sm\" asChild>\n                <Link to=\"/add-listing\" className=\"flex items-center gap-2\">\n                  <UserPlus className=\"h-4 w-4\" />\n                  Become a Host\n                </Link>\n              </Button>\n            </div> */}\n\n            <div className=\"hidden md:block\">\n              <UserNav />\n            </div>\n            <div className=\"md:hidden\">\n              <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n                <SheetTrigger asChild>\n                  {/* Optimized mobile menu button size */}\n                  <Button variant=\"ghost\" size=\"icon\" className=\"h-10 w-10\">\n                    <Menu className=\"h-6 w-6\" />\n                    <span className=\"sr-only\">Toggle menu</span>\n                  </Button>\n                </SheetTrigger>\n                {/* Reduced mobile sheet width for better mobile experience */}\n                <SheetContent side=\"right\" className=\"w-[300px] sm:w-[320px] flex flex-col\">\n                  {/* Reduced header padding */}\n                  <SheetHeader className=\"border-b pb-3 flex-shrink-0\">\n                    <SheetTitle>\n                      <Link\n                        to=\"/\"\n                        className=\"flex items-center gap-3\"\n                        onClick={() => setIsMobileMenuOpen(false)}\n                      >\n                        <YakRoomsText size=\"small\" />\n                      </Link>\n                    </SheetTitle>\n                  </SheetHeader>\n\n                  {/* Scrollable main content area */}\n                  <div className=\"flex-1 overflow-y-auto overflow-x-hidden scrollbar-hide\">\n                    <div className=\"py-4\">\n                      <MobileUserSection />\n                      \n                      {/* Become a Host Button for Mobile */}\n                      <div className=\"px-6 py-3\">\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full\" asChild>\n                          <Link to=\"/add-listing\" onClick={() => setIsMobileMenuOpen(false)}>\n                            <UserPlus className=\"h-4 w-4 mr-2\" />\n                            Become a Host\n                          </Link>\n                        </Button>\n                      </div>\n                      \n                      {/* Reduced navigation spacing */}\n                      <nav className=\"space-y-1.5 pt-4\">\n                        {/* Fixed uniform left padding */}\n                        <div className=\"px-6 pb-1\">\n                          <h3 className=\"text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                            Navigation\n                          </h3>\n                        </div>\n                        {navLinks.filter(link => !link.isContact).map((link) => (\n                          <SheetClose key={link.name} asChild>\n                            <Link\n                              to={link.path}\n                              // Fixed uniform horizontal margin for mobile\n                              className=\"flex items-center justify-between px-3 py-2 rounded-lg text-sm font-medium text-muted-foreground hover:text-primary hover:bg-accent transition-colors group mx-6\"\n                            >\n                              <div className=\"flex items-center\">\n                                {/* Reduced icon container padding */}\n                                <div className=\"p-1.5 mr-3 rounded-md bg-muted group-hover:bg-primary/10 transition-colors\">\n                                  <link.icon className=\"h-4 w-4 group-hover:text-primary transition-colors\" />\n                                </div>\n                                <div>\n                                  <div className=\"font-medium\">{link.name}</div>\n                                  <div className=\"text-xs text-muted-foreground\">{link.description}</div>\n                                </div>\n                              </div>\n                              <ChevronRight className=\"h-4 w-4 group-hover:translate-x-1 transition-transform\" />\n                            </Link>\n                          </SheetClose>\n                        ))}\n                      </nav>\n\n                      <ContactSection />\n                    </div>\n                  </div>\n\n                  {/* Reduced footer padding */}\n                  <div className=\"border-t pt-3 flex-shrink-0\">\n                    {/* Reduced padding and margin for mobile */}\n                    <div className=\"px-3 py-2 bg-muted/30 rounded-lg mx-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-xs font-medium\">YakRooms v1.0 🇧🇹</p>\n                        </div>\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          Beta\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                </SheetContent>\n              </Sheet>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Logout Confirmation Dialog */}\n      <Dialog open={isLogoutConfirmationOpen} onOpenChange={setIsLogoutConfirmationOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-5 w-5 text-destructive\" />\n              Confirm Logout\n            </DialogTitle>\n            <DialogDescription>\n              Are you sure you want to log out? You will need to sign in again to access your account.\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button \n              variant=\"outline\" \n              onClick={() => setIsLogoutConfirmationOpen(false)}\n            >\n              Cancel\n            </Button>\n            <Button \n              variant=\"destructive\" \n              onClick={() => {\n                logout();\n                setIsLogoutConfirmationOpen(false);\n                setIsMobileMenuOpen(false);\n              }}\n            >\n              Log Out\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </header>\n  );\n};\n\nexport default Navbar;","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/layouts/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/layouts/mode-toggle.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/main.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/modules/pwa/PWARegistration.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'updateSW' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":19,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"updateSW"},"fix":{"range":[693,1287],"text":""},"desc":"Remove unused variable 'updateSW'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'handleInstall' and 'isMobile'. Either include them or remove the dependency array.","line":129,"column":6,"nodeType":"ArrayExpression","endLine":129,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [handleInstall, isMobile]","fix":{"range":[4414,4416],"text":"[handleInstall, isMobile]"}}]},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":175,"column":31,"nodeType":"Identifier","messageId":"undef","endLine":175,"endColumn":38}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { registerSW } from 'virtual:pwa-register';\nimport { toast } from 'sonner';\nimport useMediaQuery from '@/shared/hooks/useMediaQuery';\n\n// Helper function to detect iOS\nconst isIOS = () => {\n  return /iPad|iPhone|iPod/.test(navigator.userAgent) || \n         (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);\n};\n\nconst PWARegistration = () => {\n  const [deferredPrompt, setDeferredPrompt] = useState(null);\n  const [isInstallable, setIsInstallable] = useState(false);\n  const isMobile = useMediaQuery('(max-width: 768px)');\n\n  useEffect(() => {\n    // Register service worker for PWA features (no offline functionality)\n    const updateSW = registerSW({\n      onNeedRefresh() {\n        if (isMobile) {\n          toast.info(\"New version available! Click to update.\", {\n            duration: 6000,\n            action: {\n              label: \"Update\",\n              onClick: () => window.location.reload()\n            },\n            cancel: {\n              label: \"Later\"\n            }\n          });\n        }\n      },\n      onRegistered(swRegistration) {\n        console.log('SW registered: ', swRegistration);\n      },\n      onRegisterError(error) {\n        console.log('SW registration error', error);\n      },\n    });\n\n    // Handle install prompt for Android\n    const handleBeforeInstallPrompt = (e) => {\n      console.log('beforeinstallprompt event fired');\n      e.preventDefault();\n      setDeferredPrompt(e);\n      setIsInstallable(true);\n      \n      if (isMobile && !isIOS()) {\n        toast.info(\"Install YakRooms for a better experience!\", {\n          action: {\n            label: \"Install\",\n            onClick: handleInstall\n          },\n          cancel: {\n            label: \"Later\"\n          }\n        });\n      }\n    };\n\n    // Handle iOS install prompt (manual instructions)\n    const showIOSInstallInstructions = () => {\n      if (isMobile && isIOS()) {\n        toast.info(\"To install YakRooms on your iPhone/iPad:\", {\n          description: \"1. Tap the Share button (📤) in Safari\\n2. Scroll down and tap 'Add to Home Screen'\\n3. Tap 'Add' to install\",\n          action: {\n            label: \"Got it\",\n            onClick: () => {}\n          },\n          cancel: {\n            label: \"Later\"\n          }\n        });\n      }\n    };\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n\n    // Check if app is already installed\n    if (window.matchMedia('(display-mode: standalone)').matches) {\n      console.log('App is running in standalone mode');\n    }\n\n    // Debug: Check PWA criteria and mobile authentication compatibility\n    console.log('PWA Debug Info:');\n    console.log('- User Agent:', navigator.userAgent);\n    console.log('- Is Mobile:', isMobile);\n    console.log('- Is iOS:', isIOS());\n    console.log('- Display Mode:', window.matchMedia('(display-mode: standalone)').matches);\n    console.log('- HTTPS:', window.location.protocol === 'https:');\n    console.log('- API Base URL:', window.API_DEBUG_URL || 'Not set');\n    \n    // Mobile authentication compatibility check\n    const authCompatibility = {\n      cookiesEnabled: navigator.cookieEnabled,\n      localStorageAvailable: typeof(Storage) !== \"undefined\",\n      serviceWorkerSupported: 'serviceWorker' in navigator,\n      notificationsSupported: 'Notification' in window,\n      orientationSupported: 'orientation' in window || 'onorientationchange' in window\n    };\n    console.log('Mobile Auth Compatibility:', authCompatibility);\n    \n    // Check if the app meets installability criteria\n    const checkInstallability = () => {\n      const criteria = {\n        hasManifest: !!document.querySelector('link[rel=\"manifest\"]'),\n        hasServiceWorker: 'serviceWorker' in navigator,\n        isHTTPS: window.location.protocol === 'https:' || window.location.hostname === 'localhost',\n        isNotStandalone: !window.matchMedia('(display-mode: standalone)').matches\n      };\n      \n      console.log('Installability Criteria:', criteria);\n      return criteria;\n    };\n    \n    checkInstallability();\n\n    // Show iOS install instructions after a delay if on iOS mobile\n    if (isMobile && isIOS()) {\n      setTimeout(() => {\n        showIOSInstallInstructions();\n      }, 3000); // Show after 3 seconds\n    }\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    };\n  }, []);\n\n  const handleInstall = async () => {\n    console.log('handleInstall called, deferredPrompt:', !!deferredPrompt);\n    \n    if (deferredPrompt) {\n      try {\n        console.log('Calling deferredPrompt.prompt()');\n        \n        // Check if the prompt is still valid\n        if (typeof deferredPrompt.prompt !== 'function') {\n          throw new Error('Install prompt is no longer valid');\n        }\n        \n        deferredPrompt.prompt();\n        \n        console.log('Waiting for user choice...');\n        const { outcome } = await deferredPrompt.userChoice;\n        \n        console.log('User choice outcome:', outcome);\n        if (outcome === 'accepted') {\n          console.log('User accepted the install prompt');\n          toast.success(\"YakRooms is being installed!\");\n        } else {\n          console.log('User dismissed the install prompt');\n          toast.info(\"Installation cancelled. You can install later from your browser menu.\");\n        }\n      } catch (error) {\n        console.error('Install prompt error:', error);\n        toast.error(\"Installation failed. Please try again or install manually from your browser menu.\");\n      }\n      setDeferredPrompt(null);\n      setIsInstallable(false);\n    } else {\n      console.log('No deferredPrompt available');\n      \n      // Provide alternative installation instructions\n      const alternativeMessage = isIOS() \n        ? \"To install on iOS: Tap Share → Add to Home Screen\"\n        : \"To install: Open browser menu → Add to Home Screen\";\n      \n      toast.error(`Install prompt not available. ${alternativeMessage}`);\n    }\n  };\n\n  // For debugging: Show install button if on mobile and not iOS\n  if (isMobile && !isIOS() && process.env.NODE_ENV === 'development') {\n    return (\n      <div style={{ position: 'fixed', bottom: '20px', right: '20px', zIndex: 1000 }}>\n        <button\n          onClick={handleInstall}\n          disabled={!isInstallable}\n          style={{\n            padding: '10px 20px',\n            backgroundColor: isInstallable ? '#4CAF50' : '#ccc',\n            color: 'white',\n            border: 'none',\n            borderRadius: '5px',\n            fontSize: '12px',\n            cursor: isInstallable ? 'pointer' : 'not-allowed'\n          }}\n        >\n          {isInstallable ? 'Install App' : 'Not Installable'}\n        </button>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default PWARegistration;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/modules/pwa/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/modules/websocket/WebSocketStatus.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/modules/websocket/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/modules/websocket/websocketService.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'Stomp' is not defined.","line":21,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.isConnected = false;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 5000;\n    this.subscriptions = new Map();\n  }\n\n  // Initialize STOMP connection\n  async connect(url = 'ws://localhost:8080/ws', options = {}) {\n    try {\n      // Create SockJS connection\n      const socket = new SockJS(url);\n      \n      // Create STOMP client\n      this.stompClient = Stomp.over(socket);\n      \n      // Configure STOMP client\n      this.stompClient.reconnect_delay = this.reconnectDelay;\n      this.stompClient.debug = options.debug || null; // Disable debug logs in production\n\n      return new Promise((resolve, reject) => {\n        this.stompClient.connect(\n          options.headers || {},\n          () => {\n            console.log('STOMP WebSocket connected successfully');\n            this.isConnected = true;\n            this.reconnectAttempts = 0;\n            resolve(this.stompClient);\n          },\n          (error) => {\n            console.error('STOMP connection error:', error);\n            this.isConnected = false;\n            this.handleReconnect();\n            reject(error);\n          }\n        );\n      });\n    } catch (error) {\n      console.error('Error initializing STOMP connection:', error);\n      throw error;\n    }\n  }\n\n  // Subscribe to a topic\n  subscribe(topic, callback, options = {}) {\n    if (!this.stompClient || !this.isConnected) {\n      console.error('WebSocket not connected');\n      return null;\n    }\n\n    try {\n      const subscription = this.stompClient.subscribe(topic, (message) => {\n        try {\n          const data = JSON.parse(message.body);\n          callback(data);\n        } catch (error) {\n          console.error('Error parsing message:', error);\n          callback(message.body);\n        }\n      }, options);\n\n      this.subscriptions.set(topic, subscription);\n      return subscription;\n    } catch (error) {\n      console.error('Error subscribing to topic:', error);\n      return null;\n    }\n  }\n\n  // Unsubscribe from a topic\n  unsubscribe(topic) {\n    const subscription = this.subscriptions.get(topic);\n    if (subscription) {\n      subscription.unsubscribe();\n      this.subscriptions.delete(topic);\n    }\n  }\n\n  // Send message to a destination\n  send(destination, message) {\n    if (!this.stompClient || !this.isConnected) {\n      console.error('WebSocket not connected');\n      return false;\n    }\n\n    try {\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n      return true;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      return false;\n    }\n  }\n\n  // Disconnect\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect();\n      this.isConnected = false;\n      this.subscriptions.clear();\n    }\n  }\n\n  // Handle reconnection\n  handleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n      \n      setTimeout(() => {\n        this.connect();\n      }, this.reconnectDelay * this.reconnectAttempts);\n    } else {\n      console.error('Max reconnection attempts reached');\n    }\n  }\n\n  // Get connection status\n  getConnectionStatus() {\n    return {\n      isConnected: this.isConnected,\n      reconnectAttempts: this.reconnectAttempts,\n      subscriptions: Array.from(this.subscriptions.keys())\n    };\n  }\n\n  // Subscribe to booking topics\n  subscribeToBookingTopics(userId, callbacks = {}) {\n    const subscriptions = {};\n\n    // Subscribe to all booking events\n    if (callbacks.allBookings) {\n      subscriptions.allBookings = this.subscribe('/topic/bookings', callbacks.allBookings);\n    }\n\n    // Subscribe to user-specific booking events\n    if (callbacks.userBookings && userId) {\n      subscriptions.userBookings = this.subscribe(`/queue/users/${userId}/bookings`, callbacks.userBookings);\n    }\n\n    return subscriptions;\n  }\n\n  // Send booking-related messages\n  sendBookingMessage(destination, messageType, payload) {\n    const message = {\n      type: messageType,\n      payload,\n      timestamp: new Date().toISOString()\n    };\n\n    return this.send(destination, message);\n  }\n}\n\n// Create singleton instance\nconst webSocketService = new WebSocketService();\n\n// Export utility functions\nexport const createBookingSubscription = (userId, callbacks) => {\n  return webSocketService.subscribeToBookingTopics(userId, callbacks);\n};\n\nexport const sendBookingUpdate = (destination, payload) => {\n  return webSocketService.sendBookingMessage(destination, 'BOOKING_UPDATE', payload);\n};\n\nexport const sendBookingStatusChange = (destination, bookingId, newStatus, previousStatus) => {\n  return webSocketService.sendBookingMessage(destination, 'BOOKING_STATUS_UPDATE', {\n    bookingId,\n    newStatus,\n    previousStatus,\n    timestamp: new Date().toISOString()\n  });\n};\n\nexport default webSocketService;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/routes/AppRouting.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/AvailabilityDatePicker.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[24,35],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":84,"column":31,"nodeType":"Identifier","endLine":84,"endColumn":39},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":85,"column":51,"nodeType":"Identifier","endLine":85,"endColumn":59},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":86,"column":33,"nodeType":"Identifier","endLine":86,"endColumn":41},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":87,"column":29,"nodeType":"Identifier","endLine":87,"endColumn":37},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":90,"column":33,"nodeType":"Identifier","endLine":90,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'fallbackError' is defined but never used.","line":122,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":122,"endColumn":33},{"ruleId":"no-unused-vars","severity":2,"message":"'currentMonth' is defined but never used.","line":141,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":141,"endColumn":66,"suggestions":[{"messageId":"removeVar","data":{"varName":"currentMonth"},"fix":{"range":[5333,5347],"text":""},"desc":"Remove unused variable 'currentMonth'."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from \"react\";\nimport { Calendar, RefreshCw } from \"lucide-react\";\nimport { Button } from \"@/shared/components/button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/shared/components/popover\";\nimport { Calendar as CalendarComponent } from \"@/shared/components/calendar\";\nimport { cn } from \"@/shared/utils\";\nimport { format } from \"date-fns\";\nimport api from \"../../shared/services/Api\";\n\n/**\n * AvailabilityDatePicker - A custom date picker that fetches room availability\n * and blocks unavailable dates from being selected.\n * \n * This component calls the API endpoint `/rooms/{roomId}/availability/month/{yearMonth}`\n * to get room availability data and visually blocks unavailable dates in the calendar.\n * \n * Features:\n * - Fetches availability data when calendar opens\n * - Blocks unavailable dates from selection\n * - Shows loading states and error handling\n * - Provides refresh functionality\n * - Supports different variants (default/immediate)\n * - Handles API fallbacks gracefully\n * \n * @param {Object} props - Component props\n * @param {string|number} props.roomId - The ID of the room to check availability for\n * @param {string|number} props.hotelId - The ID of the hotel\n * @param {Date|null} props.selectedDate - Currently selected date\n * @param {Function} props.onDateSelect - Callback when a date is selected\n * @param {string} [props.placeholder=\"Pick a date\"] - Placeholder text\n * @param {boolean} [props.disabled=false] - Whether the picker is disabled\n * @param {Date} [props.minDate=new Date()] - Minimum selectable date\n * @param {string} [props.className] - Additional CSS classes\n * @param {string} [props.variant=\"default\"] - Variant type: \"default\" or \"immediate\"\n * \n * @example\n * // Basic usage\n * <AvailabilityDatePicker\n *   roomId=\"123\"\n *   hotelId=\"456\"\n *   selectedDate={selectedDate}\n *   onDateSelect={setSelectedDate}\n * />\n * \n * // Immediate booking variant\n * <AvailabilityDatePicker\n *   roomId=\"123\"\n *   hotelId=\"456\"\n *   selectedDate={selectedDate}\n *   onDateSelect={setSelectedDate}\n *   variant=\"immediate\"\n *   minDate={new Date(Date.now() + 24 * 60 * 60 * 1000)}\n * />\n */\nexport default function AvailabilityDatePicker({\n  roomId,\n  hotelId,\n  selectedDate,\n  onDateSelect,\n  placeholder = \"Pick a date\",\n  disabled = false,\n  minDate = new Date(),\n  className,\n  variant = \"default\", // \"default\" or \"immediate\"\n}) {\n  // Validate required props\n  if (!roomId || !hotelId) {\n    console.warn(\"AvailabilityDatePicker: roomId and hotelId are required\");\n    return (\n      <Button\n        variant=\"outline\"\n        className={cn(\"w-full justify-start text-left font-normal\", className)}\n        disabled={true}\n      >\n        <Calendar className=\"mr-2 h-4 w-4\" />\n        Invalid configuration\n      </Button>\n    );\n  }\n  const [isOpen, setIsOpen] = useState(false);\n  const [unavailableDates, setUnavailableDates] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch room availability for the current month\n  const fetchRoomAvailability = useCallback(async (date) => {\n    if (!roomId || !hotelId) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Format date as YYYY-MM for the API\n      const yearMonth = format(date, \"yyyy-MM\");\n      \n      // Call the availability API endpoint\n      try {\n        const response = await api.get(`/rooms/${roomId}/availability/month/${yearMonth}`);\n        \n        if (response.status === 200 && response.data) {\n          // Process the availability data to get unavailable dates\n          const unavailable = processAvailabilityData(response.data, date);\n          setUnavailableDates(unavailable);\n          console.log(`Loaded availability for ${yearMonth}:`, unavailable.length, \"unavailable dates\");\n        }\n      } catch (apiError) {\n        // If the specific endpoint doesn't exist, try to get bookings data as fallback\n        if (apiError.response?.status === 404) {\n          console.log(\"Availability endpoint not found, trying fallback...\");\n          try {\n            // Fallback: try to get room bookings for the month\n            const fallbackResponse = await api.get(`/rooms/${roomId}/bookings/month/${yearMonth}`);\n            if (fallbackResponse.status === 200 && fallbackResponse.data) {\n              const unavailable = processAvailabilityData(fallbackResponse.data, date);\n              setUnavailableDates(unavailable);\n              console.log(`Loaded fallback data for ${yearMonth}:`, unavailable.length, \"unavailable dates\");\n            }\n          } catch (fallbackError) {\n            console.log(\"Fallback endpoint also not available, proceeding without availability data\");\n            setUnavailableDates([]);\n          }\n        } else {\n          throw apiError; // Re-throw if it's not a 404 error\n        }\n      }\n    } catch (err) {\n      console.error(\"Error fetching room availability:\", err);\n      setError(\"Failed to load availability data\");\n      // Don't block the user if availability check fails\n      setUnavailableDates([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [roomId, hotelId]);\n\n  // Process availability data to get unavailable date ranges\n  const processAvailabilityData = (availabilityData, currentMonth) => {\n    const unavailable = [];\n    \n    try {\n      // Handle different response formats\n      if (Array.isArray(availabilityData)) {\n        // If it's an array of bookings\n        availabilityData.forEach(booking => {\n          if (booking.checkInDate && booking.checkOutDate) {\n            const start = new Date(booking.checkInDate);\n            const end = new Date(booking.checkOutDate);\n            \n            // Add all dates in the range to unavailable dates\n            const current = new Date(start);\n            while (current < end) {\n              unavailable.push(new Date(current));\n              current.setDate(current.getDate() + 1);\n            }\n          }\n        });\n      } else if (availabilityData.bookings && Array.isArray(availabilityData.bookings)) {\n        // If it's an object with bookings array\n        availabilityData.bookings.forEach(booking => {\n          if (booking.checkInDate && booking.checkOutDate) {\n            const start = new Date(booking.checkInDate);\n            const end = new Date(booking.checkOutDate);\n            \n            const current = new Date(start);\n            while (current < end) {\n              unavailable.push(new Date(current));\n              current.setDate(current.getDate() + 1);\n            }\n          }\n        });\n      } else if (availabilityData.unavailableDates && Array.isArray(availabilityData.unavailableDates)) {\n        // If it's already in the correct format\n        availabilityData.unavailableDates.forEach(dateStr => {\n          unavailable.push(new Date(dateStr));\n        });\n      }\n    } catch (err) {\n      console.error(\"Error processing availability data:\", err);\n    }\n    \n    return unavailable;\n  };\n\n  // Check if a date is unavailable\n  const isDateUnavailable = (date) => {\n    if (!date || unavailableDates.length === 0) return false;\n    \n    // For immediate booking, block today and past dates\n    if (variant === \"immediate\") {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      if (date < today) return true;\n    }\n    \n    // Check if date is in unavailable dates\n    return unavailableDates.some(unavailableDate => {\n      const unavailable = new Date(unavailableDate);\n      unavailable.setHours(0, 0, 0, 0);\n      const checkDate = new Date(date);\n      checkDate.setHours(0, 0, 0, 0);\n      return unavailable.getTime() === checkDate.getTime();\n    });\n  };\n\n  // Get tooltip text for unavailable dates\n  const getDateTooltip = (date) => {\n    if (variant === \"immediate\" && date < new Date()) {\n      return \"Cannot select past dates\";\n    }\n    \n    if (isDateUnavailable(date)) {\n      return \"This date is already booked\";\n    }\n    \n    return \"Available for booking\";\n  };\n\n  // Handle date selection\n  const handleDateSelect = (date) => {\n    if (date && !isDateUnavailable(date)) {\n      onDateSelect(date);\n      setIsOpen(false);\n    }\n  };\n\n  // Handle popover open/close\n  const handleOpenChange = (open) => {\n    setIsOpen(open);\n    \n    // Fetch availability when opening the calendar\n    if (open && !loading && unavailableDates.length === 0) {\n      const dateToCheck = selectedDate || new Date();\n      fetchRoomAvailability(dateToCheck);\n    }\n  };\n\n  // Fetch availability when month changes in calendar\n  const handleMonthChange = (date) => {\n    if (date && roomId && hotelId) {\n      fetchRoomAvailability(date);\n    }\n  };\n\n  return (\n    <Popover open={isOpen} onOpenChange={handleOpenChange}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          className={cn(\n            \"w-full justify-start text-left font-normal\",\n            !selectedDate && \"text-muted-foreground\",\n            className\n          )}\n          disabled={disabled}\n        >\n          <Calendar className=\"mr-2 h-4 w-4\" />\n          {selectedDate ? format(selectedDate, \"PPP\") : placeholder}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n        <div className=\"p-3 border-b\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex flex-col\">\n              <span className=\"text-sm font-medium\">Select Date</span>\n              {unavailableDates.length > 0 && (\n                <span className=\"text-xs text-muted-foreground\">\n                  {unavailableDates.length} date{unavailableDates.length !== 1 ? 's' : ''} unavailable\n                </span>\n              )}\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => {\n                const dateToCheck = selectedDate || new Date();\n                fetchRoomAvailability(dateToCheck);\n              }}\n              disabled={loading}\n              className=\"h-6 w-6 p-0\"\n              title=\"Refresh availability data\"\n            >\n              <RefreshCw className={cn(\"h-3 w-3\", loading && \"animate-spin\")} />\n            </Button>\n          </div>\n        </div>\n        \n        <CalendarComponent\n          mode=\"single\"\n          selected={selectedDate}\n          onSelect={handleDateSelect}\n          disabled={(date) => isDateUnavailable(date)}\n          initialFocus\n          onMonthChange={handleMonthChange}\n          fromDate={minDate}\n          className=\"rounded-md border-0\"\n          components={{\n            Day: ({ date, ...props }) => {\n              const isUnavailable = isDateUnavailable(date);\n              const tooltip = getDateTooltip(date);\n              \n              return (\n                <div\n                  className={cn(\n                    \"relative w-full h-full flex items-center justify-center\",\n                    isUnavailable && \"cursor-not-allowed opacity-50\"\n                  )}\n                  title={tooltip}\n                >\n                  <div\n                    {...props}\n                    className={cn(\n                      props.className,\n                      isUnavailable && \"bg-destructive/20 text-destructive/70 hover:bg-destructive/30\"\n                    )}\n                  />\n                </div>\n              );\n            }\n          }}\n        />\n        \n        {/* Loading indicator */}\n        {loading && (\n          <div className=\"p-3 text-center text-sm text-muted-foreground border-t\">\n            <div className=\"flex items-center justify-center gap-2\">\n              <div className=\"w-4 h-4 border-2 border-muted-foreground border-t-transparent rounded-full animate-spin\"></div>\n              Loading availability...\n            </div>\n          </div>\n        )}\n        \n        {/* Error message with retry button */}\n        {error && (\n          <div className=\"p-3 text-center text-sm border-t\">\n            <p className=\"text-destructive mb-2\">{error}</p>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => {\n                const dateToCheck = selectedDate || new Date();\n                fetchRoomAvailability(dateToCheck);\n              }}\n              className=\"text-xs\"\n            >\n              Retry\n            </Button>\n          </div>\n        )}\n        \n        {/* Legend */}\n        <div className=\"p-3 border-t text-xs text-muted-foreground\">\n          <div className=\"flex items-center gap-2 mb-1\">\n            <div className=\"w-3 h-3 bg-muted rounded-sm\"></div>\n            <span>Available</span>\n          </div>\n          <div className=\"flex items-center gap-2 mb-1\">\n            <div className=\"w-3 h-3 bg-destructive/20 rounded-sm border border-destructive/30\"></div>\n            <span>Unavailable</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 bg-primary/20 rounded-sm border border-primary/30\"></div>\n            <span>Selected</span>\n          </div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/BookingSuccessModal.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Icon' is defined but never used.","line":34,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"Icon"},"fix":{"range":[1022,1033],"text":""},"desc":"Remove unused variable 'Icon'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"./dialog\";\nimport { Button } from \"./button\";\nimport { Separator } from \"./separator\";\nimport { Badge } from \"./badge\";\nimport { CheckCircle, QrCode, Calendar, MapPin, Users, Phone, CreditCard, AlertCircle, Info } from \"lucide-react\";\nimport QRCodeGenerator from \"./QRCodeGenerator\";\n\nconst BookingSuccessModal = ({ isOpen, onClose, bookingData }) => {\n  const [showQRCode, setShowQRCode] = useState(false);\n\n  const handleViewQRCode = () => {\n    setShowQRCode(true);\n  };\n\n  const handleCloseQRCode = () => {\n    setShowQRCode(false);\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return 'N/A';\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const formatCurrency = (amount) => {\n    return `Nu ${parseFloat(amount || 0).toFixed(2)}`;\n  };\n\n  const InfoItem = ({ icon: Icon, label, value, className = \"\", highlight = false }) => (\n    <div className={`flex items-start gap-3 py-3 ${className}`}>\n      <Icon className={`h-4 w-4 mt-0.5 flex-shrink-0 ${highlight ? 'text-green-600' : 'text-muted-foreground'}`} />\n      <div className=\"min-w-0 flex-1\">\n        <div className={`text-sm font-medium ${highlight ? 'text-green-700' : 'text-foreground'}`}>\n          {label}\n        </div>\n        <div className={`text-sm ${highlight ? 'text-green-600' : 'text-muted-foreground'} break-words`}>\n          {value}\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <>\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"sm:max-w-lg max-h-[90vh] overflow-hidden flex flex-col\">\n          {/* Sticky Header */}\n          <DialogHeader className=\"flex-shrink-0 sticky top-0 bg-background z-10 pb-4 border-b\">\n            <DialogTitle className=\"flex items-center gap-3 text-lg text-green-700\">\n              <CheckCircle className=\"h-6 w-6 text-green-600\" />\n              Booking Confirmed!\n            </DialogTitle>\n            <DialogDescription className=\"text-sm\">\n              Your room has been successfully booked. Here are your booking details:\n            </DialogDescription>\n          </DialogHeader>\n          \n          {/* Scrollable Content */}\n          <div className=\"flex-1 overflow-y-auto pt-4 scrollbar-hide\">\n            <div className=\"space-y-6\">\n            \n\n            <Separator />\n\n            {/* Booking Details */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-base font-semibold text-foreground\">Booking Details</h3>\n              \n              <div className=\"grid gap-0 divide-y\">\n                {/* Hotel & Room Info */}\n                <InfoItem\n                  icon={MapPin}\n                  label=\"Hotel & Room\"\n                  value={\n                    <div>\n                      <div>{bookingData?.hotelName || bookingData?.room?.hotelName || 'Hotel Name'}</div>\n                      <div className=\"text-xs text-muted-foreground mt-1\">\n                        Room {bookingData?.roomNumber || bookingData?.room?.roomNumber || 'N/A'}\n                      </div>\n                    </div>\n                  }\n                />\n\n                {/* Dates */}\n                <InfoItem\n                  icon={Calendar}\n                  label=\"Stay Duration\"\n                  value={\n                    <div>\n                      <div>Check-in: {formatDate(bookingData?.checkInDate)}</div>\n                      <div>Check-out: {formatDate(bookingData?.checkOutDate)}</div>\n                    </div>\n                  }\n                />\n\n                {/* Guest Info */}\n                <InfoItem\n                  icon={Users}\n                  label=\"Number of Guests\"\n                  value={`${bookingData?.guests || 1} ${(bookingData?.guests || 1) === 1 ? 'Guest' : 'Guests'}`}\n                />\n\n                {/* Payment Info */}\n                <div className=\"flex items-start gap-3 py-3 border-l-4 border-l-blue-500 pl-3\">\n                  <CreditCard className=\"h-4 w-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                  <div className=\"min-w-0 flex-1\">\n                    <div className=\"text-sm font-medium text-blue-700\">Total Amount</div>\n                    <div className=\"text-lg font-bold text-blue-600\">\n                      {formatCurrency(bookingData?.totalPrice)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* QR Code Button */}\n            <Button \n              onClick={handleViewQRCode}\n              className=\"w-full\"\n            >\n              <QrCode className=\"mr-2 h-4 w-4\" />\n              Generate QR Code\n            </Button>\n\n            <Separator />\n\n            {/* Instructions */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center gap-2\">\n                <Info className=\"h-4 w-4 text-amber-600\" />\n                <div className=\"text-sm font-medium text-amber-700\">Important Reminders</div>\n              </div>\n              <div className=\"pl-6 space-y-2 text-sm text-muted-foreground\">\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-amber-600 mt-1\">•</span>\n                  <span>Arrive at the hotel on your check-in date</span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-amber-600 mt-1\">•</span>\n                  <span>Bring a valid ID for verification</span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-amber-600 mt-1\">•</span>\n                  <span>Show your QR code for quick check-in</span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-amber-600 mt-1\">•</span>\n                  <span>Contact the hotel for any special requests</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Close Button */}\n            <div className=\"pt-4 border-t\">\n              <Button \n                onClick={onClose}\n                variant=\"outline\" \n                className=\"w-full\"\n              >\n                Close\n              </Button>\n            </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* QR Code Modal */}\n      <QRCodeGenerator \n        isOpen={showQRCode}\n        onClose={handleCloseQRCode}\n        bookingData={bookingData}\n      />\n    </>\n  );\n};\n\nexport default BookingSuccessModal;","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/CustomDatePicker.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/CustomOfflineToast.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/DeleteConfirmationDialog.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/FeatureCard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/FileDeleteExample.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/FirebaseCard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/GlobalReviewSheet.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/InternetConnectionMonitor.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'isOnline' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"isOnline"},"fix":{"range":[261,269],"text":""},"desc":"Remove unused variable 'isOnline'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { toast } from 'sonner';\nimport internetConnectionDetector from '../utils/internetConnection';\nimport CustomOfflineToast from './CustomOfflineToast';\n\nconst InternetConnectionMonitor = () => {\n  const [isOnline, setIsOnline] = useState(internetConnectionDetector.getConnectionStatus());\n  const [showOfflineToast, setShowOfflineToast] = useState(false);\n\n  useEffect(() => {\n    const handleConnectionChange = (online) => {\n      setIsOnline(online);\n      \n      if (!online) {\n        // Show custom offline toast\n        setShowOfflineToast(true);\n      } else {\n        // Hide custom offline toast when connection is restored\n        setShowOfflineToast(false);\n        \n        // Show brief success message using Sonner\n        toast.success(\"Connection Restored\", {\n          description: \"You're back online\",\n          duration: 3000,\n        });\n      }\n    };\n\n    // Add callback to the detector\n    internetConnectionDetector.addCallback(handleConnectionChange);\n\n    // Cleanup on unmount\n    return () => {\n      internetConnectionDetector.removeCallback(handleConnectionChange);\n    };\n  }, []);\n\n  const handleCloseOfflineToast = () => {\n    setShowOfflineToast(false);\n  };\n\n  return (\n    <>\n      <CustomOfflineToast \n        isVisible={showOfflineToast} \n        onClose={handleCloseOfflineToast}\n      />\n    </>\n  );\n};\n\nexport default InternetConnectionMonitor;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/JavaCard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/MySQL.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/NotificationsComponent.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'notifications' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":17,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"notifications"},"fix":{"range":[751,764],"text":""},"desc":"Remove unused variable 'notifications'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isConnected' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":18,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"isConnected"},"fix":{"range":[809,820],"text":""},"desc":"Remove unused variable 'isConnected'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from \"react\";\nimport { Client } from \"@stomp/stompjs\";\nimport SockJS from \"sockjs-client\";\nimport { useAuth } from \"../../features/authentication\";\nimport { API_BASE_URL } from \"../services/firebaseConfig\";\n\n// The URL for the SockJS endpoint you configured in Spring Boot.\nconst SOCKET_URL = API_BASE_URL.replace('http://', 'ws://').replace('https://', 'wss://') + \"/ws\";\n\n/**\n * A React component that handles real-time notifications via WebSockets.\n * It should be placed in a high-level layout component so it's always active\n * when a user is logged in.\n */\nconst NotificationsComponent = () => {\n  const { userId, isAuthenticated } = useAuth(); // <-- Get user state from your auth context\n  const [notifications, setNotifications] = useState([]);\n  const [isConnected, setIsConnected] = useState(false);\n\n  // Use a ref to hold the client instance to prevent re-creation on re-renders.\n  const clientRef = useRef(null);\n\n  useEffect(() => {\n    // Only attempt to connect if the user is authenticated and has a userId.\n    if (isAuthenticated && userId) {\n      // If there's no client instance, create one.\n      if (!clientRef.current) {\n        console.log(\"Creating new STOMP client...\");\n        const client = new Client({\n          webSocketFactory: () => new SockJS(SOCKET_URL),\n          reconnectDelay: 10000, // Automatically reconnect in 10 seconds\n          debug: (str) => {\n            console.log(\"STOMP: \" + str);\n          },\n        });\n\n        // This function is called when the client successfully connects to the server.\n        client.onConnect = () => {\n          console.log(`WebSocket Connected! Subscribing for user: ${userId}`);\n          setIsConnected(true);\n\n          // The topic the client will subscribe to, now using the dynamic userId.\n          const subscriptionTopic = `/topic/notifications/${userId}`;\n\n          // Subscribe to the user-specific topic.\n          client.subscribe(subscriptionTopic, (message) => {\n            try {\n              const newNotification = JSON.parse(message.body);\n              setNotifications((prev) => [newNotification, ...prev]);\n            } catch (error) {\n              console.error(\"Could not parse notification message:\", error);\n            }\n          });\n        };\n\n        client.onDisconnect = () => {\n          console.log(\"WebSocket Disconnected!\");\n          setIsConnected(false);\n        };\n\n        client.onStompError = (frame) => {\n          console.error(\"Broker reported error: \" + frame.headers[\"message\"]);\n          console.error(\"Additional details: \" + frame.body);\n        };\n\n        clientRef.current = client;\n      }\n\n      // Activate the client if it's not already active.\n      if (!clientRef.current.active) {\n        clientRef.current.activate();\n      }\n    }\n\n    // Cleanup function: This will be called when the component unmounts\n    // or when the dependencies (isAuthenticated, userId) change.\n    return () => {\n      if (clientRef.current && clientRef.current.active) {\n        console.log(\"Deactivating WebSocket client...\");\n        clientRef.current.deactivate();\n      }\n    };\n  }, [isAuthenticated, userId]);\n\n  return null; // This component doesn't render anything visible\n};\n\nexport default NotificationsComponent;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/QRCodeGenerator.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'copied' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"copied"},"fix":{"range":[576,582],"text":""},"desc":"Remove unused variable 'copied'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'generateQRCode'. Either include it or remove the dependency array.","line":18,"column":6,"nodeType":"ArrayExpression","endLine":18,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, bookingData, generateQRCode]","fix":{"range":[703,724],"text":"[isOpen, bookingData, generateQRCode]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Icon' is defined but never used.","line":152,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":152,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"Icon"},"fix":{"range":[4850,4861],"text":""},"desc":"Remove unused variable 'Icon'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport QRCode from \"qrcode\";\nimport { Button } from \"./button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"./dialog\";\nimport { Separator } from \"./separator\";\nimport { Download, Share, QrCode, Copy, Check, User, Building, Calendar, Users, CreditCard, Key, Info } from \"lucide-react\";\nimport { toast } from \"sonner\";\n\nconst QRCodeGenerator = ({ isOpen, onClose, bookingData }) => {\n  const [qrCodeUrl, setQrCodeUrl] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [copied, setCopied] = useState(false);\n\n  useEffect(() => {\n    if (isOpen && bookingData) {\n      generateQRCode();\n    }\n  }, [isOpen, bookingData]);\n\n  const generateQRCode = async () => {\n    try {\n      setLoading(true);\n      \n      // Create booking information object for QR code (matching API response structure)\n      const qrData = {\n        id: bookingData.id || bookingData.bookingId,\n        userId: bookingData.userId,\n        roomId: bookingData.roomId,\n        checkInDate: bookingData.checkInDate,\n        checkOutDate: bookingData.checkOutDate,\n        guests: bookingData.guests,\n        status: bookingData.status || \"CONFIRMED\",\n        totalPrice: parseFloat(bookingData.totalPrice || 0),\n        createdAt: bookingData.createdAt || bookingData.bookingTime || new Date().toISOString(),\n        name: bookingData.name || bookingData.guestName || \"Guest\",\n        phone: bookingData.phone,\n        email: bookingData.email,\n        roomNumber: bookingData.roomNumber || bookingData.room?.roomNumber,\n        passcode: bookingData.passcode,\n        hotelName: bookingData.hotelName || bookingData.room?.hotelName,\n        hotelDistrict: bookingData.hotelDistrict,\n        hotelLatitude: bookingData.hotelLatitude || \"\",\n        hotelLongitude: bookingData.hotelLongitude || \"\"\n      };\n\n      // Convert to JSON string for QR code\n      const qrString = JSON.stringify(qrData);\n      \n      // Generate QR code with high quality settings\n      const url = await QRCode.toDataURL(qrString, {\n        width: 256,\n        margin: 2,\n        color: {\n          dark: '#000000',\n          light: '#FFFFFF'\n        },\n        errorCorrectionLevel: 'M'\n      });\n      \n      setQrCodeUrl(url);\n    } catch (error) {\n      console.error('Error generating QR code:', error);\n      toast.error(\"Failed to generate QR code\", {\n        duration: 6000\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const downloadQRCode = () => {\n    if (!qrCodeUrl) return;\n    \n    const link = document.createElement('a');\n    link.download = `yakrooms-booking-${bookingData.id || 'qrcode'}.png`;\n    link.href = qrCodeUrl;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    toast.success(\"QR code downloaded successfully!\", {\n      duration: 6000\n    });\n  };\n\n  const shareQRCode = async () => {\n    if (!qrCodeUrl) return;\n\n    try {\n      // Convert data URL to blob\n      const response = await fetch(qrCodeUrl);\n      const blob = await response.blob();\n      \n      const file = new File([blob], `yakrooms-booking-${bookingData.id || 'qrcode'}.png`, {\n        type: 'image/png'\n      });\n\n      if (navigator.share && navigator.canShare({ files: [file] })) {\n        await navigator.share({\n          title: 'YakRooms Booking QR Code',\n          text: `Booking confirmation for ${bookingData.hotelName || 'your hotel'}`,\n          files: [file]\n        });\n        toast.success(\"QR code shared successfully!\", {\n          duration: 6000\n        });\n      } else {\n        // Fallback to copying URL to clipboard\n        await copyBookingInfo();\n      }\n    } catch (error) {\n      console.error('Error sharing QR code:', error);\n      toast.error(\"Failed to share QR code\", {\n        duration: 6000\n      });\n    }\n  };\n\n  const copyBookingInfo = async () => {\n    try {\n      const bookingInfo = `\n🏨 YakRooms Booking Confirmation\n\n📧 Email: ${bookingData.email || 'N/A'}\n📱 Phone: +975 ${bookingData.phone || 'N/A'}\n\n🏢 Hotel: ${bookingData.hotelName || 'N/A'}\n📍 District: ${bookingData.hotelDistrict || 'N/A'}\n🚪 Room: ${bookingData.roomNumber || 'N/A'}\n\n📅 Check-in: ${bookingData.checkInDate}\n📅 Check-out: ${bookingData.checkOutDate}\n👥 Guests: ${bookingData.guests}\n💰 Total: Nu ${bookingData.totalPrice}\n📊 Status: ${bookingData.status || 'CONFIRMED'}\n      `.trim();\n\n      await navigator.clipboard.writeText(bookingInfo);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n      toast.success(\"Booking details copied to clipboard!\", {\n        duration: 6000\n      });\n    } catch (error) {\n      console.error('Error copying to clipboard:', error);\n      toast.error(\"Failed to copy booking details\", {\n        duration: 6000\n      });\n    }\n  };\n\n  const SummaryItem = ({ icon: Icon, label, value }) => (\n    <div className=\"flex items-start gap-2\">\n      <Icon className=\"h-4 w-4 text-muted-foreground mt-0.5 flex-shrink-0\" />\n      <div className=\"min-w-0 flex-1\">\n        <span className=\"text-sm text-muted-foreground\">{label}: </span>\n        <span className=\"text-sm font-medium text-foreground\">{value}</span>\n      </div>\n    </div>\n  );\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md max-h-[90vh] overflow-hidden flex flex-col\">\n        {/* Sticky Header */}\n        <DialogHeader className=\"flex-shrink-0 sticky top-0 bg-background z-10 pb-4 border-b\">\n          <DialogTitle className=\"flex items-center gap-2 text-lg\">\n            <QrCode className=\"h-5 w-5 text-blue-600\" />\n            Booking Confirmation\n          </DialogTitle>\n          <DialogDescription className=\"text-sm\">\n            Your booking QR code contains all the details for quick verification\n          </DialogDescription>\n        </DialogHeader>\n        \n        {/* Scrollable Content */}\n        <div className=\"flex-1 overflow-y-auto pt-4 scrollbar-hide\">\n          <div className=\"space-y-6\">\n          {/* QR Code Display */}\n          <div className=\"flex justify-center p-6 border border-border rounded-lg\">\n            {loading ? (\n              <div className=\"flex items-center justify-center w-64 h-64 border border-dashed border-muted-foreground/30 rounded-lg\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n              </div>\n            ) : qrCodeUrl ? (\n              <img \n                src={qrCodeUrl} \n                alt=\"Booking QR Code\" \n                className=\"w-64 h-64 rounded-lg shadow-sm\"\n              />\n            ) : (\n              <div className=\"flex items-center justify-center w-64 h-64 border border-dashed border-muted-foreground/30 rounded-lg\">\n                <QrCode className=\"h-12 w-12 text-muted-foreground/50\" />\n              </div>\n            )}\n          </div>\n\n          <Separator />\n\n\n          <Separator />\n\n          {/* Action Buttons */}\n          <div className=\"space-y-3\">\n            <div className=\"grid grid-cols-2 gap-2\">\n              <Button \n                onClick={downloadQRCode} \n                disabled={!qrCodeUrl}\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                <Download className=\"mr-2 h-4 w-4\" />\n                Download\n              </Button>\n              <Button \n                onClick={shareQRCode} \n                disabled={!qrCodeUrl}\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                <Share className=\"mr-2 h-4 w-4\" />\n                Share\n              </Button>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Instructions */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <Info className=\"h-4 w-4 text-blue-600\" />\n              <div className=\"text-sm font-medium text-foreground\">How to use</div>\n            </div>\n            <div className=\"pl-6 space-y-2 text-sm text-muted-foreground\">\n              <div className=\"flex items-start gap-2\">\n                <span className=\"text-blue-600 mt-1\">•</span>\n                <span>Show this QR code at hotel check-in</span>\n              </div>\n              <div className=\"flex items-start gap-2\">\n                <span className=\"text-blue-600 mt-1\">•</span>\n                <span>Download or share for offline access</span>\n              </div>\n              <div className=\"flex items-start gap-2\">\n                <span className=\"text-blue-600 mt-1\">•</span>\n                <span>Keep your booking details safe</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Close Button */}\n          <div className=\"pt-4 border-t\">\n            <Button onClick={onClose} variant=\"outline\" className=\"w-full\">\n              Close\n            </Button>\n          </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default QRCodeGenerator;","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/RatingWidget.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'axios' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"axios"},"fix":{"range":[59,70],"text":""},"desc":"Remove unused variable 'axios'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'motion' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"motion"},"fix":{"range":[88,95],"text":""},"desc":"Remove unused variable 'motion'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setFeedback' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":11,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFeedback"},"fix":{"range":[452,465],"text":""},"desc":"Remove unused variable 'setFeedback'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { FaStar } from \"react-icons/fa\";\nimport { getStorageItem, setStorageItem } from \"@/shared/utils/safariLocalStorage\";\nimport api from \"../../shared/services/Api\";\n\nconst RatingWidget = ({ onClose }) => {\n  const [rating, setRating] = useState(0);\n  const [hovered, setHovered] = useState(0);\n  const [feedback, setFeedback] = useState(\"\");\n  const [submitted, setSubmitted] = useState(false);\n  const [summary, setSummary] = useState(null);\n\n  useEffect(() => {\n    console.log(\"Inside average rating ......\");\n    const fetchAverageRating = async () => {\n      try {\n        const res = await api.get(\"/averageRating\"); // 👈 Await here\n        console.log(\"Called rating average ......\");\n        console.log(res.data); // If it's just an integer, res.data is the value\n        setSummary(res.data);\n      } catch (error) {\n        console.error(\"Error fetching average rating:\", error);\n      }\n    };\n\n    fetchAverageRating();\n  }, []);\n\n  const submitRating = async () => {\n    if (!rating) return alert(\"Please select a rating\");\n\n    try {\n      const res = await api.post(\"/rating\", {\n        stars: rating,\n        feedback: feedback,\n      });\n      if (res.data) {\n        setSubmitted(true);\n        setStorageItem(\"hasRated\", \"true\");\n\n        console.log(\n          \"Fetching from storage, Rated? - \",\n          getStorageItem(\"hasRated\")\n        );\n\n        setTimeout(() => {\n          onClose();\n        }, 3000);\n      }\n    } catch (error) {\n      console.error(\"Error fetching average rating:\", error);\n    }\n    setRating(0);\n  };\n\n  return (\n    <>\n      <div className=\"w-[100%] mt-10 shadow-sm shadow-xl p-6 text-center bg-white\">\n        {submitted ? (\n          <div className=\"p-8 \">\n            <h3>Thanks for rating my site!</h3>\n          </div>\n        ) : (\n          <div className=\" flex flex-col sm:flex-row items-center justify-end gap-4 \">\n            <div className=\"hidden md:flex mt-6 text-center text-gray-600\">\n              <p className=\"text-sm\"> Average Rating: {summary} ⭐(s) </p>\n            </div>\n            <div className=\"\">\n              <h2 className=\"text-lg font-bold text-center text-gray-9 mb-4\">\n                Rate My Site\n              </h2>\n\n              <div className=\"flex justify-center mb-4\">\n                {[1, 2, 3, 4, 5].map((star) => (\n                  <FaStar\n                    key={star}\n                    size={25}\n                    className={`cursor-pointer transition-transform duration-200 ${\n                      (hovered || rating) >= star\n                        ? \"text-yellow-400 scale-110\"\n                        : \"text-gray-300\"\n                    }`}\n                    onMouseEnter={() => setHovered(star)}\n                    onMouseLeave={() => setHovered(0)}\n                    onClick={() => setRating(star)}\n                  />\n                ))}\n              </div>\n            </div>\n\n            <div className=\"flex flex-row items-center gap-8\">\n              <div\n                onClick={submitRating}\n                className=\"w-fit px-8 text-14 py-1 border-1 cursor-pointer text-[#4d4d4d] transition\"\n              >\n                Submit\n              </div>\n              <div\n                onClick={() => onClose()}\n                className=\"w-fit border text-14 px-8 py-1 cursor-pointer text-[#4d4d4d] transition\"\n              >\n                Remind me later\n              </div>\n\n              {submitted && (\n                <motion.p\n                  className=\"mt-4 text-green-600 text-center\"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                >\n                  Thank you for your feedback! 🙌\n                </motion.p>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default RatingWidget;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/ReactCard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/SearchButton.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/SpringBootCard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/SummaryCards.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/TailwindCard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/TimePicker.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/Toast.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/ToastTest.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/TopHotelBadge.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/UnAuthorizedPage.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/YakRoomsAdCard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/YakRoomsLoader.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/YakRoomsText.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/alert-dialog.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/alert.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/avatar.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/badge.jsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":44,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":44,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/shared/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/button.jsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":55,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":55,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/shared/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive cursor-pointer\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props} />\n  );\n}\n\nexport { Button, buttonVariants }\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/calendar.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/card.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/checkbox.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/dialog.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/dropdown-menu.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/form.jsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":135,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":135,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { Controller, FormProvider, useFormContext, useFormState } from \"react-hook-form\";\n\nimport { cn } from \"@/shared/utils\"\nimport { Label } from \"@/shared/components/label\"\n\nconst Form = FormProvider\n\nconst FormFieldContext = React.createContext({})\n\nconst FormField = (\n  {\n    ...props\n  }\n) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  );\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState } = useFormContext()\n  const formState = useFormState({ name: fieldContext.name })\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\nconst FormItemContext = React.createContext({})\n\nfunction FormItem({\n  className,\n  ...props\n}) {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div data-slot=\"form-item\" className={cn(\"grid gap-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  );\n}\n\nfunction FormLabel({\n  className,\n  ...props\n}) {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      className={cn(\"data-[error=true]:text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props} />\n  );\n}\n\nfunction FormControl({\n  ...props\n}) {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props} />\n  );\n}\n\nfunction FormDescription({\n  className,\n  ...props\n}) {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props} />\n  );\n}\n\nfunction FormMessage({\n  className,\n  ...props\n}) {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : props.children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn(\"text-destructive text-sm\", className)}\n      {...props}>\n      {body}\n    </p>\n  );\n}\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/input.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/label.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/pagination.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/popover.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/progress.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/radio-group.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/select.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/separator.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/sheet.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/skeleton.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/star-rating.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/switch.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/table.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/tabs.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/textarea.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/components/tooltip.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/constants/districts.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/constants/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/hooks/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/hooks/useMediaQuery.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/hooks/useOutsideClick.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/services/Api.jsx","messages":[{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":262,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":277,"endColumn":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from \"axios\";\nimport { getStorageItem, setStorageItem, removeStorageItem } from \"@/shared/utils/safariLocalStorage\";\nimport { API_BASE_URL } from \"./firebaseConfig\";\n\n// Cookie-based authentication - no client-side token management needed\n\n\n// Cookie-based authentication utilities\nfunction clearAllCookies() {\n  const cookies = document.cookie.split(\";\");\n  \n  for (let cookie of cookies) {\n    const eqPos = cookie.indexOf(\"=\");\n    const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();\n    \n    // Clear cookie for current domain\n    document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/`;\n    document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/;domain=${window.location.hostname}`;\n    \n    // Clear cookie for parent domain (if subdomain)\n    if (window.location.hostname.includes('.')) {\n      const parentDomain = window.location.hostname.substring(window.location.hostname.indexOf('.'));\n      document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/;domain=${parentDomain}`;\n    }\n  }\n}\n\nconst api = axios.create({\n  baseURL: `${API_BASE_URL}/api`,\n  withCredentials: true, // Enable cookies for HTTP-only authentication\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  timeout: 10000, // 10 second timeout\n});\n\n// Add response interceptor for automatic token refresh\nlet isRefreshing = false;\nlet failedQueue = [];\n\nconst processQueue = (error, token = null) => {\n  failedQueue.forEach(prom => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  });\n  \n  failedQueue = [];\n};\n\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  async (error) => {\n    const originalRequest = error.config;\n\n    // Don't intercept refresh token endpoint to prevent infinite loops\n    const isRefreshTokenEndpoint = originalRequest.url?.includes('/auth/refresh-token');\n    \n    // Handle 401 Unauthorized and 403 Forbidden responses (token expired/invalid)\n    if ((error.response?.status === 401 || error.response?.status === 403) && !originalRequest._retry && !isRefreshTokenEndpoint) {\n      if (isRefreshing) {\n        // If already refreshing, queue the request\n        return new Promise((resolve, reject) => {\n          failedQueue.push({ resolve, reject });\n        }).then(() => {\n          return api(originalRequest);\n        }).catch(err => {\n          return Promise.reject(err);\n        });\n      }\n\n      originalRequest._retry = true;\n      isRefreshing = true;\n\n      try {\n        console.log('🔄 Access token expired/invalid (401/403), attempting refresh...');\n        \n        // Attempt to refresh the access token using cookie-based refresh\n        const response = await axios.post(`${API_BASE_URL}/auth/refresh-token`, {}, {\n          withCredentials: true,\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        if (response.status === 200) {\n          console.log('✅ Token refreshed successfully via cookies');\n          \n          // Process queued requests\n          processQueue(null, 'refreshed');\n          \n          // Retry original request (cookies are automatically updated by server)\n          return api(originalRequest);\n        } else {\n          throw new Error('Token refresh failed');\n        }\n        \n      } catch (refreshError) {\n        console.error('❌ Token refresh failed:', refreshError);\n        \n        // Process queued requests with error\n        processQueue(refreshError, null);\n        \n        // Clear auth state and redirect to login\n        if (window.authLogout) {\n          window.authLogout();\n        } else {\n          console.warn('⚠️ No global logout function found, redirecting to home');\n          window.location.href = '/';\n        }\n        \n        return Promise.reject(refreshError);\n      } finally {\n        isRefreshing = false;\n      }\n    }\n\n    // Handle refresh token endpoint failures specifically\n    if (isRefreshTokenEndpoint) {\n      if (error.response?.status === 401) {\n        console.error('❌ Refresh token expired (401) - logging out');\n        \n        // Trigger logout for expired refresh token\n        if (window.authLogout) {\n          window.authLogout();\n        } else {\n          window.location.href = '/';\n        }\n        \n        return Promise.reject(error);\n      } else if (error.response?.status === 403) {\n        console.error('❌ Refresh token forbidden (403) - clearing auth and redirecting');\n        \n        // For 403, clear auth data but don't trigger full logout flow\n        // This handles cases where refresh token is invalid/forbidden\n        try {\n          authService.clearAuthData();\n        } catch (clearError) {\n          console.warn('⚠️ Failed to clear auth data:', clearError);\n        }\n        \n        // Redirect to login page\n        window.location.href = '/';\n        \n        return Promise.reject(error);\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// Authentication helper functions for cookie-based auth with refresh\nexport const authService = {\n  // Check if we should proactively refresh (within 2 minutes of potential expiry)\n  shouldRefreshProactively() {\n    // Since we can't read HTTP-only cookies, we'll use a time-based approach\n    // Refresh every 13 minutes (2 minutes before 15-minute expiry)\n    const lastRefresh = getStorageItem('lastTokenRefresh');\n    if (!lastRefresh) return true;\n    \n    const lastRefreshTime = parseInt(lastRefresh, 10);\n    const now = Date.now();\n    const timeSinceRefresh = now - lastRefreshTime;\n    \n    // Refresh if more than 13 minutes (780 seconds) have passed\n    return timeSinceRefresh > (13 * 60 * 1000);\n  },\n\n  // Manually refresh token\n  async refreshToken() {\n    try {\n      console.log('🔄 Manually refreshing token...');\n      \n      const response = await axios.post(`${API_BASE_URL}/auth/refresh-token`, {}, {\n        withCredentials: true,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (response.status === 200) {\n        // Update last refresh time\n        setStorageItem('lastTokenRefresh', Date.now().toString());\n        console.log('✅ Manual token refresh successful');\n        return true;\n      } else {\n        throw new Error('Manual token refresh failed');\n      }\n    } catch (error) {\n      console.error('❌ Manual token refresh failed:', error);\n      \n      // Handle specific error cases\n      if (error.response?.status === 403) {\n        console.error('❌ Refresh token forbidden (403) - clearing auth data');\n        this.clearAuthData();\n        throw new Error('Refresh token is forbidden - please login again');\n      } else if (error.response?.status === 401) {\n        console.error('❌ Refresh token expired (401)');\n        throw new Error('Refresh token expired - please login again');\n      }\n      \n      throw error;\n    }\n  },\n\n  // Clear all authentication data\n  clearAuthData() {\n    try {\n      // Clear all browser cookies\n      clearAllCookies();\n      \n      // Clear sessionStorage and refresh tracking\n      try {\n        if (typeof sessionStorage !== 'undefined') {\n          sessionStorage.clear();\n        }\n      } catch (sessionError) {\n        console.warn('Failed to clear sessionStorage:', sessionError);\n      }\n      removeStorageItem('lastTokenRefresh');\n      \n      console.log('🧹 Authentication data cleared successfully');\n    } catch (error) {\n      console.error('Failed to clear auth data:', error);\n    }\n  },\n\n  // Logout function\n  async logout() {\n    try {\n      // Call backend logout endpoint to invalidate cookies\n      await api.post('/auth/logout');\n      console.log('✅ Server-side logout successful');\n    } catch (error) {\n      console.error('Logout API call failed:', error);\n      // Continue with local cleanup even if API call fails\n    } finally {\n      // Clear all authentication data\n      this.clearAuthData();\n      \n      console.log('🚪 User logged out successfully');\n    }\n  },\n\n  // Get authentication method (for compatibility)\n  getAuthMethod() {\n    return \"COOKIE_BASED_WITH_REFRESH\";\n  }\n};\n\n// Enhanced API instance with proactive refresh capability\nconst enhancedApi = {\n  ...api,\n  \n  // Make authenticated request with proactive token refresh\n  async authenticatedRequest(config) {\n    try {\n      // Check if we should proactively refresh before making request\n      if (authService.shouldRefreshProactively()) {\n        console.log('🔄 Proactively refreshing token before request');\n        try {\n          await authService.refreshToken();\n        } catch (refreshError) {\n          console.warn('⚠️ Proactive token refresh failed, will retry on 401', refreshError);\n        }\n      }\n      \n      return await api(config);\n    } catch (error) {\n      // If it's a 401 error, the interceptor will handle token refresh\n      throw error;\n    }\n  },\n  \n  // Convenient methods for common HTTP operations with proactive refresh\n  async get(url, config = {}) {\n    return this.authenticatedRequest({ ...config, method: 'GET', url });\n  },\n  \n  async post(url, data, config = {}) {\n    return this.authenticatedRequest({ ...config, method: 'POST', url, data });\n  },\n  \n  async put(url, data, config = {}) {\n    return this.authenticatedRequest({ ...config, method: 'PUT', url, data });\n  },\n  \n  async patch(url, data, config = {}) {\n    return this.authenticatedRequest({ ...config, method: 'PATCH', url, data });\n  },\n  \n  async delete(url, config = {}) {\n    return this.authenticatedRequest({ ...config, method: 'DELETE', url });\n  }\n};\n\n// Export both the basic api and enhanced version\nexport { enhancedApi };\n\n// Make logout function available globally for interceptor\nwindow.authLogout = () => {\n  // This will be set by the AuthProvider\n  console.warn('Global logout function called but not implemented yet');\n};\n\nexport default api;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/services/counterSlice.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/services/firebaseConfig.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'connectAuthEmulator' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":3,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":58,"suggestions":[{"messageId":"removeVar","data":{"varName":"connectAuthEmulator"},"fix":{"range":[103,124],"text":""},"desc":"Remove unused variable 'connectAuthEmulator'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":147,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":147,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// firebaseConfig.js\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, connectAuthEmulator } from \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCpztRaIhsRMisykJgEZD_d0HDnIuKxyKw\",\n  authDomain: \"yakrooms.firebaseapp.com\",\n  projectId: \"yakrooms\",\n  storageBucket: \"yakrooms.appspot.com\",\n  messagingSenderId: \"165341953510\",\n  appId: \"1:165341953510:web:e85c4b7fa8d584e8ee2a27\",\n  measurementId: \"G-C7PMXXLLVL\",\n};\n\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst provider = new GoogleAuthProvider();\n\n// Cross-platform provider configuration\nprovider.addScope('email');\nprovider.addScope('profile');\nprovider.addScope('openid');\n\n// Platform-specific provider settings\nconst platformConfig = {\n  // Internet Explorer compatibility\n  ie: {\n    prompt: 'select_account',\n    // IE doesn't support modern auth features well\n    auth_type: 'signin'\n  },\n  // Safari (iOS and macOS)\n  safari: {\n    prompt: 'select_account',\n    // Safari-specific settings for better compatibility\n    auth_type: 'reauthenticate'\n  },\n  // Firefox\n  firefox: {\n    prompt: 'select_account',\n    // Firefox-specific settings\n    auth_type: 'signin'\n  },\n  // Chrome and Chromium-based browsers\n  chrome: {\n    prompt: 'select_account',\n    // Chrome supports all modern features\n    auth_type: 'reauthenticate'\n  },\n  // PWA contexts\n  pwa: {\n    prompt: 'select_account',\n    // PWA-specific settings for better redirect handling\n    auth_type: 'reauthenticate'\n  }\n};\n\n// Detect platform and apply appropriate settings\nconst detectPlatform = () => {\n  const userAgent = navigator.userAgent.toLowerCase();\n  const isPWA = window.matchMedia('(display-mode: standalone)').matches ||\n                window.navigator.standalone === true ||\n                document.referrer.includes('android-app://');\n\n  if (isPWA) return 'pwa';\n  if (userAgent.includes('msie') || userAgent.includes('trident')) return 'ie';\n  if (userAgent.includes('safari') && !userAgent.includes('chrome')) return 'safari';\n  if (userAgent.includes('firefox')) return 'firefox';\n  if (userAgent.includes('chrome')) return 'chrome';\n  \n  return 'chrome'; // Default fallback\n};\n\nconst currentPlatform = detectPlatform();\nconst platformSettings = platformConfig[currentPlatform] || platformConfig.chrome;\n\n// Apply platform-specific settings\nprovider.setCustomParameters(platformSettings);\n\n// Enhanced error handling for cross-platform compatibility\nconst handleAuthError = (error) => {\n  console.error('Firebase Auth Error:', error);\n  \n  const platform = detectPlatform();\n  console.log(`Platform detected: ${platform}`);\n  \n  // Platform-specific error handling\n  switch (platform) {\n    case 'ie':\n      console.log('Internet Explorer detected - limited auth features');\n      if (error.code === 'auth/popup-closed-by-user') {\n        console.log('IE popup closed, redirect may be more reliable');\n      }\n      break;\n    case 'safari':\n      console.log('Safari detected - using Safari-specific handling');\n      if (error.code === 'auth/popup-blocked') {\n        console.log('Safari popup blocked, redirect required');\n      }\n      break;\n    case 'firefox':\n      console.log('Firefox detected - Firefox-specific handling');\n      if (error.code === 'auth/popup-closed-by-user') {\n        console.log('Firefox popup closed');\n      }\n      break;\n    case 'pwa':\n      console.log('PWA context detected - PWA-specific handling');\n      switch (error.code) {\n        case 'auth/popup-closed-by-user':\n          console.log('PWA popup closed, redirect recommended');\n          break;\n        case 'auth/popup-blocked':\n          console.log('PWA popup blocked, redirect required');\n          break;\n        case 'auth/network-request-failed':\n          console.log('PWA network request failed');\n          break;\n        default:\n          console.log('Other PWA auth error:', error.code);\n      }\n      break;\n    default:\n      console.log('Chrome/Chromium detected - standard handling');\n  }\n  \n  return error;\n};\n\n// Cross-platform auth state persistence\nconst configureAuthPersistence = () => {\n  const platform = detectPlatform();\n  \n  // Different persistence strategies per platform\n  switch (platform) {\n    case 'ie':\n      // IE has limited persistence support\n      console.log('IE detected - using basic persistence');\n      break;\n    case 'safari':\n      // Safari needs special handling for private browsing\n      console.log('Safari detected - checking private browsing mode');\n      try {\n        localStorage.setItem('test', 'test');\n        localStorage.removeItem('test');\n        console.log('Safari localStorage available');\n      } catch (e) {\n        console.log('Safari private browsing detected');\n      }\n      break;\n    case 'firefox':\n      // Firefox has good persistence support\n      console.log('Firefox detected - standard persistence');\n      break;\n    case 'pwa':\n      // PWA persistence varies by platform\n      console.log('PWA detected - enhanced persistence handling');\n      break;\n    default:\n      console.log('Chrome detected - standard persistence');\n  }\n};\n\n// Initialize platform-specific configurations\nconfigureAuthPersistence();\n\n// API configuration - Environment-based URL selection\nconst getApiBaseUrl = () => {\n  // Check if we're in development environment\n  const isDevelopment = import.meta.env.DEV || \n                       window.location.hostname === 'localhost' || \n                       window.location.hostname === '127.0.0.1';\n  \n  // Check if running in PWA mode (installed app)\n  const isPWA = window.matchMedia('(display-mode: standalone)').matches ||\n                window.navigator.standalone === true ||\n                document.referrer.includes('android-app://');\n  \n  // Use environment variable if available, otherwise use defaults\n  const developmentUrl = import.meta.env.VITE_API_BASE_URL || \"http://localhost:8080\";\n  const productionUrl = import.meta.env.VITE_API_BASE_URL || \"https://yakrooms-be-production.up.railway.app\";\n  \n  // Force production URL for PWA installations and mobile contexts\n  if (isPWA || !isDevelopment) {\n    console.log('🌐 Using production API URL for cross-platform compatibility');\n    return productionUrl;\n  }\n  \n  console.log('🔧 Using development API URL');\n  return developmentUrl;\n};\n\nconst API_BASE_URL = getApiBaseUrl();\n\n// Debug helper for PWA registration and mobile debugging\nif (typeof window !== 'undefined') {\n  window.API_DEBUG_URL = API_BASE_URL;\n  console.log('🔗 API Base URL configured:', API_BASE_URL);\n}\n\nexport { auth, provider, API_BASE_URL, handleAuthError, detectPlatform };\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/services/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/services/store.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/services/uploadService.jsx","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":16,"column":14,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":16,"endColumn":15,"suggestions":[{"messageId":"removeEscape","fix":{"range":[483,484],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[483,483],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\?.","line":16,"column":16,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":16,"endColumn":17,"suggestions":[{"messageId":"removeEscape","fix":{"range":[485,486],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[485,485],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":17,"column":22,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":17,"endColumn":23,"suggestions":[{"messageId":"removeEscape","fix":{"range":[586,587],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[586,586],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\?.","line":17,"column":24,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":17,"endColumn":25,"suggestions":[{"messageId":"removeEscape","fix":{"range":[588,589],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[588,588],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isPDF' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":107,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":107,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"isPDF"},"fix":{"range":[3399,3445],"text":""},"desc":"Remove unused variable 'isPDF'."}]},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":110,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":110,"endColumn":33}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from \"axios\";\nimport api from \"./Api.jsx\";\n\n/**\n * Extracts the file key from an UploadThing URL.\n * @param {string} url - The UploadThing file URL (e.g., \"https://utfs.io/f/abc123_image.jpg\")\n * @returns {string} The file key (e.g., \"abc123_image.jpg\")\n */\nexport const extractFileKeyFromUrl = (url) => {\n  if (!url) return null;\n  \n  console.log(\"Extracting file key from URL:\", url);\n  \n  // Handle different UploadThing URL formats\n  const patterns = [\n    /\\/f\\/([^\\/\\?#]+)/, // Standard format: /f/filename (excluding query params and fragments)\n    /utfs\\.io\\/f\\/([^\\/\\?#]+)/, // Full URL format\n  ];\n  \n  for (const pattern of patterns) {\n    const match = url.match(pattern);\n    if (match && match[1]) {\n      console.log(\"Extracted file key:\", match[1]);\n      return match[1];\n    }\n  }\n  \n  console.warn(\"Could not extract file key from URL:\", url);\n  return null;\n};\n\n/**\n * Deletes a file by calling the backend API.\n * @param {string} fileUrl - The file URL to delete\n * @returns {Promise<{success: boolean, message: string, deletedFiles: string[], failedFiles: string[]}>} Deletion result\n */\nexport const deleteFileByUrl = async (fileUrl) => {\n  if (!fileUrl) {\n    throw new Error(\"File URL is required for deletion\");\n  }\n  \n  // Extract file key from URL\n  const fileKey = extractFileKeyFromUrl(fileUrl);\n  \n  if (!fileKey) {\n    return {\n      success: false,\n      message: \"Could not extract file key from URL. Please check if it's a valid UploadThing URL.\",\n      deletedFiles: [],\n      failedFiles: [fileUrl]\n    };\n  }\n  \n  try {\n    console.log(\"Deleting file with URL:\", fileUrl);\n    console.log(\"Extracted file key:\", fileKey);\n    \n    // Call the backend API using the configured api instance with file key\n    const response = await api.delete(`/v1/uploadthing/files/${fileKey}`);\n    \n    const result = response.data;\n    \n    if (response.status === 200 && result.success) {\n      console.log(\"File deleted successfully:\", result);\n      return {\n        success: true,\n        message: result.message || \"File deleted successfully\",\n        deletedFiles: result.deletedFiles || [fileKey],\n        failedFiles: result.failedFiles || [],\n        data: result,\n      };\n    } else {\n      console.error(\"Backend API error:\", result);\n      return {\n        success: false,\n        message: result.message || \"Failed to delete file\",\n        deletedFiles: result.deletedFiles || [],\n        failedFiles: result.failedFiles || [fileKey],\n        error: result.error,\n      };\n    }\n  } catch (error) {\n    console.error(\"Failed to delete file:\", error);\n    \n    return {\n      success: false,\n      message: \"Failed to delete file. Please try again.\",\n      deletedFiles: [],\n      failedFiles: [fileKey],\n      error: error.message,\n    };\n  }\n};\n\n/**\n * Uploads a file (image or PDF) using UploadThing service.\n * @param {File} file - The file to upload (image or PDF).\n * @param {string} field - A string used to determine callbackSlug (e.g. 'photos', 'license').\n * @returns {Promise<{field: string, url: string, fileKey: string}>} The uploaded file metadata.\n */\nexport const uploadFile = async (file, field) => {\n  console.log(\"Inside UPLOADER............\");\n  const uploadthingApiKey = import.meta.env.VITE_UPLOADTHING_SECRET;\n  try {\n    // Determine the route config based on file type\n    const isImage = file.type.startsWith(\"image/\");\n    const isPDF = file.type === \"application/pdf\";\n\n     // ✅ Use your actual Vercel URL\n     const callbackUrl = process.env.NODE_ENV === 'production' \n     ? \"https://yak-rooms-fe.vercel.app/api/uploadthing\"  // Your actual domain\n     : `${window.location.origin}/api/uploadthing`;\n\n     console.log(\"Using callback URL:\", callbackUrl); // Debug log\n\n\n    // Step 1: Prepare the upload\n    const configResponse = await axios.post(\n      \"https://uploadthing.com/api/prepareUpload\",\n      {\n        files: [\n          {\n            name: file.name,\n            size: file.size,\n            type: file.type || \"application/octet-stream\",\n          },\n        ],\n        callbackUrl,\n        callbackSlug: field === \"photos\" ? \"listingPhotos\" : \"verificationDocs\",\n        routeConfig: {\n          [isImage ? \"image\" : \"pdf\"]: {\n            maxFileSize: \"4MB\", // Larger size for PDFs\n            maxFileCount: 1,\n          },\n        },\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-Uploadthing-Api-Key\": uploadthingApiKey,\n        },\n      }\n    );\n\n    const fileData = configResponse.data?.[0];\n    if (!fileData || !fileData.fields || !fileData.url) {\n      throw new Error(\"Invalid response from UploadThing API\");\n    }\n\n    // Step 2: Upload to S3\n    const formData = new FormData();\n    Object.entries(fileData.fields).forEach(([key, value]) => {\n      formData.append(key, value);\n    });\n    formData.append(\"file\", file);\n\n    await axios.post(fileData.url, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n\n    // Return the field type and URL\n    return {\n      field,\n      url: fileData.fileUrl,\n      fileKey: fileData.key || null, // Keep for backward compatibility\n    };\n  } catch (error) {\n    console.error(`Upload failed for ${field}:`, error);\n    throw error;\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/utils/amenitiesHelper.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/utils/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/utils/internetConnection.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'response' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":55,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"response"},"fix":{"range":[1324,1477],"text":""},"desc":"Remove unused variable 'response'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":61,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Internet Connection Detection Utility\n * Detects when the user goes offline and triggers callbacks\n */\n\nclass InternetConnectionDetector {\n  constructor() {\n    this.isOnline = navigator.onLine;\n    this.callbacks = [];\n    this.setupEventListeners();\n  }\n\n  setupEventListeners() {\n    // Listen for online/offline events\n    window.addEventListener('online', () => {\n      this.isOnline = true;\n      this.notifyCallbacks(true);\n    });\n\n    window.addEventListener('offline', () => {\n      this.isOnline = false;\n      this.notifyCallbacks(false);\n    });\n  }\n\n  // Add callback function to be called when connection status changes\n  addCallback(callback) {\n    this.callbacks.push(callback);\n  }\n\n  // Remove callback function\n  removeCallback(callback) {\n    this.callbacks = this.callbacks.filter(cb => cb !== callback);\n  }\n\n  // Notify all callbacks about connection status change\n  notifyCallbacks(isOnline) {\n    this.callbacks.forEach(callback => {\n      try {\n        callback(isOnline);\n      } catch (error) {\n        console.error('Error in connection callback:', error);\n      }\n    });\n  }\n\n  // Get current connection status\n  getConnectionStatus() {\n    return this.isOnline;\n  }\n\n  // Test actual internet connectivity (not just browser online status)\n  async testConnectivity() {\n    try {\n      const response = await fetch('https://www.google.com/favicon.ico', {\n        method: 'HEAD',\n        mode: 'no-cors',\n        cache: 'no-cache'\n      });\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n\n// Create singleton instance\nconst internetConnectionDetector = new InternetConnectionDetector();\n\nexport default internetConnectionDetector;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/utils/safariLocalStorage.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":89,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":89,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Cross-Platform LocalStorage Utilities\n * Handles localStorage issues across different browsers and platforms\n */\n\n// Cross-browser localStorage wrapper\nclass CrossBrowserStorage {\n  constructor() {\n    this.storageAvailable = this.checkStorageAvailability();\n    this.platform = this.detectPlatform();\n    this.isPWA = this.checkPWAContext();\n    this.isAndroid = this.checkAndroidDevice();\n    this.isIOS = this.checkIOSDevice();\n    this.quotaExceededCount = 0;\n    this.isPrivateBrowsing = this.checkPrivateBrowsing();\n    this.maxQuotaRetries = 3;\n    \n    // Initialize storage cleanup on quota issues\n    this.initializeQuotaManagement();\n  }\n\n  // Detect platform\n  detectPlatform() {\n    const userAgent = navigator.userAgent.toLowerCase();\n    \n    if (this.isPWA) return 'pwa';\n    if (userAgent.includes('msie') || userAgent.includes('trident')) return 'ie';\n    if (userAgent.includes('safari') && !userAgent.includes('chrome')) return 'safari';\n    if (userAgent.includes('firefox')) return 'firefox';\n    if (userAgent.includes('edge')) return 'edge';\n    if (userAgent.includes('chrome')) return 'chrome';\n    \n    return 'unknown';\n  }\n\n  // Check if localStorage is available and working\n  checkStorageAvailability() {\n    try {\n      const testKey = '__storage_test__';\n      localStorage.setItem(testKey, 'test');\n      localStorage.removeItem(testKey);\n      return true;\n    } catch (error) {\n      console.error('localStorage not available:', error);\n      return false;\n    }\n  }\n\n  // Check if we're in a PWA context\n  checkPWAContext() {\n    return window.matchMedia('(display-mode: standalone)').matches ||\n           window.navigator.standalone === true ||\n           document.referrer.includes('android-app://');\n  }\n\n  // Check if we're on Android\n  checkAndroidDevice() {\n    return /Android/.test(navigator.userAgent);\n  }\n\n  // Check if we're on iOS\n  checkIOSDevice() {\n    return /iPad|iPhone|iPod/.test(navigator.userAgent) || \n           (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);\n  }\n\n  // Check if we're in private browsing mode\n  checkPrivateBrowsing() {\n    try {\n      // Safari private browsing check\n      if (this.platform === 'safari') {\n        const testKey = '__private_test_' + Date.now();\n        localStorage.setItem(testKey, '1');\n        localStorage.removeItem(testKey);\n        return false;\n      }\n      \n      // Firefox private browsing check\n      if (this.platform === 'firefox') {\n        return 'MozAppearance' in document.documentElement.style && !window.indexedDB;\n      }\n      \n      // Chrome incognito check (less reliable)\n      if (this.platform === 'chrome') {\n        return !window.requestFileSystem && !window.webkitRequestFileSystem;\n      }\n      \n      return false;\n    } catch (error) {\n      // If localStorage.setItem throws, we're likely in private browsing\n      return true;\n    }\n  }\n\n  // Initialize quota management\n  initializeQuotaManagement() {\n    // Set up periodic cleanup for old data\n    if (typeof window !== 'undefined') {\n      setInterval(() => {\n        this.cleanupOldData();\n      }, 24 * 60 * 60 * 1000); // Daily cleanup\n    }\n  }\n\n  // Clean up old data to free space\n  cleanupOldData() {\n    try {\n      const now = Date.now();\n      const maxAge = 30 * 24 * 60 * 60 * 1000; // 30 days\n      \n      // Only clean up non-essential keys\n      const protectedKeys = [\n        'userId', 'email', 'roles', 'activeRole', 'userName', 'pictureURL',\n        'registerFlag', 'clientDetailSet', 'hotelId', 'topHotelIds'\n      ];\n      \n      if (this.storageAvailable) {\n        for (let i = localStorage.length - 1; i >= 0; i--) {\n          const key = localStorage.key(i);\n          if (key && !protectedKeys.includes(key)) {\n            // Check if it's a timestamped entry\n            if (key.includes('_timestamp_')) {\n              const timestamp = parseInt(key.split('_timestamp_')[1], 10);\n              if (timestamp && (now - timestamp) > maxAge) {\n                localStorage.removeItem(key);\n              }\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to cleanup old data:', error);\n    }\n  }\n\n  // Platform-specific storage strategies\n  getStorageStrategy() {\n    switch (this.platform) {\n      case 'ie':\n        return {\n          primary: 'localStorage',\n          fallback: 'sessionStorage',\n          backup: 'memory',\n          reason: 'IE has limited storage support'\n        };\n      \n      case 'safari':\n        if (this.isIOS) {\n          return {\n            primary: 'localStorage',\n            fallback: 'sessionStorage',\n            backup: 'memory',\n            reason: 'iOS Safari has private browsing restrictions'\n          };\n        } else {\n          return {\n            primary: 'localStorage',\n            fallback: 'sessionStorage',\n            backup: 'memory',\n            reason: 'macOS Safari has good storage support'\n          };\n        }\n      \n      case 'firefox':\n        return {\n          primary: 'localStorage',\n          fallback: 'sessionStorage',\n          backup: 'memory',\n          reason: 'Firefox has excellent storage support'\n        };\n      \n      case 'pwa':\n        return {\n          primary: 'localStorage',\n          fallback: 'sessionStorage',\n          backup: 'memory',\n          reason: 'PWA storage varies by platform'\n        };\n      \n      case 'chrome':\n      case 'edge':\n      default:\n        return {\n          primary: 'localStorage',\n          fallback: 'sessionStorage',\n          backup: 'memory',\n          reason: 'Chrome/Edge have excellent storage support'\n        };\n    }\n  }\n\n  // Memory storage fallback\n  memoryStorage = new Map();\n\n  // Safe getter with cross-platform handling and type conversion\n  getItem(key, defaultValue = '') {\n    const strategy = this.getStorageStrategy();\n    \n    if (!this.storageAvailable) {\n      console.warn(`localStorage not available for key: ${key} on ${this.platform}`);\n      \n      // Try sessionStorage fallback\n      try {\n        const sessionValue = sessionStorage.getItem(key);\n        if (sessionValue !== null) {\n          console.log(`Recovered value from sessionStorage for key: ${key}`);\n          return this.parseValue(sessionValue, defaultValue);\n        }\n      } catch (sessionError) {\n        console.error('SessionStorage fallback failed:', sessionError);\n      }\n      \n      // Try memory storage as last resort\n      if (this.memoryStorage.has(key)) {\n        console.log(`Recovered value from memory storage for key: ${key}`);\n        return this.memoryStorage.get(key);\n      }\n      \n      return defaultValue;\n    }\n\n    try {\n      const value = localStorage.getItem(key);\n      return this.parseValue(value, defaultValue);\n    } catch (error) {\n      console.error(`Failed to get ${key} from localStorage on ${this.platform}:`, error);\n      \n      // Platform-specific error recovery\n      return this.handleStorageError(key, defaultValue, strategy);\n    }\n  }\n\n  // Parse value with type conversion\n  parseValue(value, defaultValue) {\n    // Handle null/undefined values\n    if (value === null || value === undefined) {\n      return defaultValue;\n    }\n\n    // Handle empty strings\n    if (value === '') {\n      return defaultValue;\n    }\n\n    // Handle JSON parsing\n    if (value.startsWith('{') || value.startsWith('[')) {\n      try {\n        return JSON.parse(value);\n      } catch (parseError) {\n        console.error(`Failed to parse JSON:`, parseError);\n        return defaultValue;\n      }\n    }\n\n    // Handle boolean values\n    if (value === 'true') {\n      return true;\n    }\n    if (value === 'false') {\n      return false;\n    }\n\n    // Handle number values\n    if (!isNaN(value) && value !== '') {\n      const num = Number(value);\n      if (Number.isInteger(num)) {\n        return num;\n      }\n      if (!Number.isNaN(num)) {\n        return num;\n      }\n    }\n\n    return value;\n  }\n\n  // Handle storage errors with platform-specific recovery\n  handleStorageError(key, defaultValue, strategy) {\n    console.log(`Attempting ${strategy.fallback} recovery for key: ${key}`);\n    \n    // Try sessionStorage fallback\n    if (strategy.fallback === 'sessionStorage') {\n      try {\n        const sessionValue = sessionStorage.getItem(key);\n        if (sessionValue !== null) {\n          console.log(`Recovered value from sessionStorage for key: ${key}`);\n          return this.parseValue(sessionValue, defaultValue);\n        }\n      } catch (sessionError) {\n        console.error('SessionStorage recovery failed:', sessionError);\n      }\n    }\n    \n    // Try memory storage as last resort\n    if (strategy.backup === 'memory' && this.memoryStorage.has(key)) {\n      console.log(`Recovered value from memory storage for key: ${key}`);\n      return this.memoryStorage.get(key);\n    }\n    \n    return defaultValue;\n  }\n\n  // Safe setter with cross-platform handling\n  setItem(key, value) {\n    const strategy = this.getStorageStrategy();\n    \n    if (!this.storageAvailable || this.isPrivateBrowsing) {\n      console.warn(`localStorage not available for setting key: ${key} on ${this.platform} (private: ${this.isPrivateBrowsing})`);\n      return this.setItemFallback(key, value, strategy);\n    }\n\n    try {\n      const stringValue = this.stringifyValue(value);\n      localStorage.setItem(key, stringValue);\n      \n      // Reset quota exceeded count on successful write\n      this.quotaExceededCount = 0;\n      \n      // Platform-specific backup strategies\n      this.createBackup(key, stringValue, strategy);\n      \n      return true;\n    } catch (error) {\n      console.error(`Failed to set ${key} in localStorage on ${this.platform}:`, error);\n      \n      // Handle quota exceeded specifically\n      if (this.isQuotaExceededError(error)) {\n        return this.handleQuotaExceeded(key, value, strategy);\n      }\n      \n      return this.setItemFallback(key, value, strategy);\n    }\n  }\n\n  // Stringify value for storage\n  stringifyValue(value) {\n    // Handle null/undefined values\n    if (value === null || value === undefined) {\n      return '';\n    }\n\n    // Handle complex objects\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n\n    // Handle boolean values\n    if (typeof value === 'boolean') {\n      return value.toString();\n    }\n\n    // Handle numbers\n    if (typeof value === 'number') {\n      return value.toString();\n    }\n\n    // Default string handling\n    return String(value);\n  }\n\n  // Create backup copies\n  createBackup(key, value, strategy) {\n    // SessionStorage backup\n    if (strategy.fallback === 'sessionStorage') {\n      try {\n        sessionStorage.setItem(key, value);\n      } catch (sessionError) {\n        console.warn('Failed to backup to sessionStorage:', sessionError);\n      }\n    }\n    \n    // Memory backup\n    if (strategy.backup === 'memory') {\n      try {\n        this.memoryStorage.set(key, this.parseValue(value));\n      } catch (memoryError) {\n        console.warn('Failed to backup to memory storage:', memoryError);\n      }\n    }\n  }\n\n  // Fallback setter\n  setItemFallback(key, value, strategy) {\n    const stringValue = this.stringifyValue(value);\n    \n    // Try sessionStorage fallback\n    if (strategy.fallback === 'sessionStorage') {\n      try {\n        sessionStorage.setItem(key, stringValue);\n        console.log(`Successfully stored in sessionStorage as fallback`);\n        return true;\n      } catch (sessionError) {\n        console.error('SessionStorage fallback failed:', sessionError);\n      }\n    }\n    \n    // Try memory storage as last resort\n    if (strategy.backup === 'memory') {\n      try {\n        this.memoryStorage.set(key, this.parseValue(stringValue));\n        console.log(`Successfully stored in memory storage as fallback`);\n        return true;\n      } catch (memoryError) {\n        console.error('Memory storage fallback failed:', memoryError);\n      }\n    }\n    \n    return false;\n  }\n\n  // Safe remover\n  removeItem(key) {\n    const strategy = this.getStorageStrategy();\n    \n    if (!this.storageAvailable) {\n      console.warn(`localStorage not available for removing key: ${key} on ${this.platform}`);\n      return this.removeItemFallback(key, strategy);\n    }\n\n    try {\n      localStorage.removeItem(key);\n      \n      // Remove from all backup storages\n      this.removeFromBackups(key, strategy);\n      \n      return true;\n    } catch (error) {\n      console.error(`Failed to remove ${key} from localStorage on ${this.platform}:`, error);\n      return this.removeItemFallback(key, strategy);\n    }\n  }\n\n  // Remove from backup storages\n  removeFromBackups(key, strategy) {\n    // Remove from sessionStorage\n    if (strategy.fallback === 'sessionStorage') {\n      try {\n        sessionStorage.removeItem(key);\n      } catch (sessionError) {\n        console.warn('Failed to remove from sessionStorage:', sessionError);\n      }\n    }\n    \n    // Remove from memory storage\n    if (strategy.backup === 'memory') {\n      try {\n        this.memoryStorage.delete(key);\n      } catch (memoryError) {\n        console.warn('Failed to remove from memory storage:', memoryError);\n      }\n    }\n  }\n\n  // Fallback remover\n  removeItemFallback(key, strategy) {\n    // Try sessionStorage fallback\n    if (strategy.fallback === 'sessionStorage') {\n      try {\n        sessionStorage.removeItem(key);\n        return true;\n      } catch (sessionError) {\n        console.error('SessionStorage removal failed:', sessionError);\n      }\n    }\n    \n    // Try memory storage\n    if (strategy.backup === 'memory') {\n      try {\n        this.memoryStorage.delete(key);\n        return true;\n      } catch (memoryError) {\n        console.error('Memory storage removal failed:', memoryError);\n      }\n    }\n    \n    return false;\n  }\n\n  // Safe clearer\n  clear() {\n    const strategy = this.getStorageStrategy();\n    \n    if (!this.storageAvailable) {\n      console.warn(`localStorage not available for clearing on ${this.platform}`);\n      return this.clearFallback(strategy);\n    }\n\n    try {\n      localStorage.clear();\n      \n      // Clear all backup storages\n      this.clearBackups(strategy);\n      \n      return true;\n    } catch (error) {\n      console.error(`Failed to clear localStorage on ${this.platform}:`, error);\n      return this.clearFallback(strategy);\n    }\n  }\n\n  // Clear backup storages\n  clearBackups(strategy) {\n    // Clear sessionStorage\n    if (strategy.fallback === 'sessionStorage') {\n      try {\n        sessionStorage.clear();\n      } catch (sessionError) {\n        console.warn('Failed to clear sessionStorage:', sessionError);\n      }\n    }\n    \n    // Clear memory storage\n    if (strategy.backup === 'memory') {\n      try {\n        this.memoryStorage.clear();\n      } catch (memoryError) {\n        console.warn('Failed to clear memory storage:', memoryError);\n      }\n    }\n  }\n\n  // Fallback clearer\n  clearFallback(strategy) {\n    // Try sessionStorage fallback\n    if (strategy.fallback === 'sessionStorage') {\n      try {\n        sessionStorage.clear();\n        return true;\n      } catch (sessionError) {\n        console.error('SessionStorage clear failed:', sessionError);\n      }\n    }\n    \n    // Try memory storage\n    if (strategy.backup === 'memory') {\n      try {\n        this.memoryStorage.clear();\n        return true;\n      } catch (memoryError) {\n        console.error('Memory storage clear failed:', memoryError);\n      }\n    }\n    \n    return false;\n  }\n\n  // Get all items (for debugging)\n  getAllItems() {\n    if (!this.storageAvailable) {\n      return {};\n    }\n\n    try {\n      const items = {};\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key) {\n          items[key] = this.getItem(key);\n        }\n      }\n      return items;\n    } catch (error) {\n      console.error('Failed to get all localStorage items:', error);\n      return {};\n    }\n  }\n\n  // Check if key exists\n  hasItem(key) {\n    if (!this.storageAvailable) {\n      return false;\n    }\n\n    try {\n      return localStorage.getItem(key) !== null;\n    } catch (error) {\n      console.error(`Failed to check if ${key} exists:`, error);\n      return false;\n    }\n  }\n\n  // Get storage size\n  getStorageSize() {\n    if (!this.storageAvailable) {\n      return 0;\n    }\n\n    try {\n      let size = 0;\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key) {\n          const value = localStorage.getItem(key);\n          size += key.length + (value ? value.length : 0);\n        }\n      }\n      return size;\n    } catch (error) {\n      console.error('Failed to get localStorage size:', error);\n      return 0;\n    }\n  }\n\n  // Cross-platform storage validation\n  validateStorage() {\n    const strategy = this.getStorageStrategy();\n    \n    try {\n      const testKey = '__cross_platform_test__';\n      const testValue = 'cross_platform_test_value';\n      \n      // Test primary storage\n      this.setItem(testKey, testValue);\n      const retrieved = this.getItem(testKey);\n      this.removeItem(testKey);\n      \n      if (retrieved !== testValue) {\n        return { \n          valid: false, \n          reason: `${strategy.primary} not working properly on ${this.platform}`,\n          strategy \n        };\n      }\n      \n      return { \n        valid: true, \n        reason: `Cross-platform storage working correctly on ${this.platform}`,\n        strategy \n      };\n    } catch (error) {\n      return { \n        valid: false, \n        reason: `Cross-platform storage validation failed on ${this.platform}: ${error.message}`,\n        strategy \n      };\n    }\n  }\n\n  // Check if error is quota exceeded\n  isQuotaExceededError(error) {\n    return error && (\n      error.code === 22 ||\n      error.code === 1014 ||\n      error.name === 'QuotaExceededError' ||\n      error.name === 'NS_ERROR_DOM_QUOTA_REACHED' ||\n      error.message.includes('quota') ||\n      error.message.includes('storage')\n    );\n  }\n\n  // Handle quota exceeded errors\n  handleQuotaExceeded(key, value, strategy) {\n    console.warn(`Storage quota exceeded for key: ${key}. Attempting cleanup...`);\n    \n    this.quotaExceededCount++;\n    \n    if (this.quotaExceededCount <= this.maxQuotaRetries) {\n      // Try to free up space\n      this.cleanupOldData();\n      \n      // Try again after cleanup\n      try {\n        const stringValue = this.stringifyValue(value);\n        localStorage.setItem(key, stringValue);\n        console.log(`Successfully stored ${key} after cleanup`);\n        return true;\n      } catch (retryError) {\n        console.error(`Retry failed for ${key}:`, retryError);\n      }\n    }\n    \n    // Fallback to other storage methods\n    return this.setItemFallback(key, value, strategy);\n  }\n\n  // Enhanced browser detection with version info\n  getBrowserInfo() {\n    const userAgent = navigator.userAgent;\n    let browser = 'unknown';\n    let version = '0';\n    \n    if (userAgent.includes('Firefox/')) {\n      browser = 'firefox';\n      version = userAgent.match(/Firefox\\/(\\d+)/)?.[1] || '0';\n    } else if (userAgent.includes('Chrome/') && !userAgent.includes('Edg')) {\n      browser = 'chrome';\n      version = userAgent.match(/Chrome\\/(\\d+)/)?.[1] || '0';\n    } else if (userAgent.includes('Safari/') && !userAgent.includes('Chrome')) {\n      browser = 'safari';\n      version = userAgent.match(/Version\\/(\\d+)/)?.[1] || '0';\n    } else if (userAgent.includes('Edg')) {\n      browser = 'edge';\n      version = userAgent.match(/Edg\\/(\\d+)/)?.[1] || '0';\n    }\n    \n    return { browser, version: parseInt(version, 10) };\n  }\n\n  // Get storage capacity info\n  async getStorageInfo() {\n    try {\n      if ('storage' in navigator && 'estimate' in navigator.storage) {\n        const estimate = await navigator.storage.estimate();\n        return {\n          quota: estimate.quota,\n          usage: estimate.usage,\n          available: estimate.quota - estimate.usage,\n          usagePercent: Math.round((estimate.usage / estimate.quota) * 100)\n        };\n      }\n    } catch (error) {\n      console.warn('Failed to get storage info:', error);\n    }\n    \n    return {\n      quota: 'unknown',\n      usage: 'unknown',\n      available: 'unknown',\n      usagePercent: 'unknown'\n    };\n  }\n\n  // Get platform information\n  getPlatformInfo() {\n    const browserInfo = this.getBrowserInfo();\n    \n    return {\n      platform: this.platform,\n      browser: browserInfo.browser,\n      browserVersion: browserInfo.version,\n      isPWA: this.isPWA,\n      isAndroid: this.isAndroid,\n      isIOS: this.isIOS,\n      isPrivateBrowsing: this.isPrivateBrowsing,\n      storageAvailable: this.storageAvailable,\n      quotaExceededCount: this.quotaExceededCount,\n      strategy: this.getStorageStrategy()\n    };\n  }\n}\n\n// Create singleton instance\nconst crossBrowserStorage = new CrossBrowserStorage();\n\n// Export utility functions\nexport const getStorageItem = (key, defaultValue = '') => {\n  return crossBrowserStorage.getItem(key, defaultValue);\n};\n\nexport const setStorageItem = (key, value) => {\n  return crossBrowserStorage.setItem(key, value);\n};\n\nexport const removeStorageItem = (key) => {\n  return crossBrowserStorage.removeItem(key);\n};\n\nexport const clearStorage = () => {\n  return crossBrowserStorage.clear();\n};\n\nexport const getAllStorageItems = () => {\n  return crossBrowserStorage.getAllItems();\n};\n\nexport const hasStorageItem = (key) => {\n  return crossBrowserStorage.hasItem(key);\n};\n\nexport const getStorageSize = () => {\n  return crossBrowserStorage.getStorageSize();\n};\n\nexport const validateStorage = () => {\n  return crossBrowserStorage.validateStorage();\n};\n\nexport const getPlatformInfo = () => {\n  return crossBrowserStorage.getPlatformInfo();\n};\n\n// Enhanced storage information\nexport const getStorageInfo = async () => {\n  return await crossBrowserStorage.getStorageInfo();\n};\n\n// Force cleanup of old data\nexport const cleanupStorage = () => {\n  return crossBrowserStorage.cleanupOldData();\n};\n\n// Check if we're in private browsing\nexport const isPrivateBrowsing = () => {\n  return crossBrowserStorage.isPrivateBrowsing;\n};\n\n// Browser-specific storage test\nexport const testStorageCompatibility = () => {\n  return crossBrowserStorage.validateStorage();\n};\n\n// Authentication storage helpers\nexport const getAuthData = () => {\n  const authKeys = ['token', 'userId', 'email', 'roles', 'activeRole', 'userName', 'pictureURL', 'registerFlag', 'clientDetailSet', 'hotelId', 'topHotelIds'];\n  const authData = {};\n  \n  authKeys.forEach(key => {\n    authData[key] = getStorageItem(key);\n  });\n  \n  return authData;\n};\n\nexport const setAuthData = (authData) => {\n  Object.entries(authData).forEach(([key, value]) => {\n    setStorageItem(key, value);\n  });\n};\n\nexport const clearAuthData = () => {\n  const authKeys = [\n    'token', 'accessToken', 'refreshToken', 'tokenExpiry', // Token keys\n    'userId', 'email', 'roles', 'activeRole', 'userName', 'pictureURL', \n    'registerFlag', 'clientDetailSet', 'hotelId', 'topHotelIds',\n    'lastTokenRefresh', 'lastAuthCheck' // Include API service keys\n  ];\n  \n  authKeys.forEach(key => {\n    removeStorageItem(key);\n  });\n};\n\n// Safe storage operations with retries\nexport const setStorageItemSafe = async (key, value, retries = 3) => {\n  for (let i = 0; i < retries; i++) {\n    const success = setStorageItem(key, value);\n    if (success) return true;\n    \n    // Wait a bit before retrying\n    await new Promise(resolve => setTimeout(resolve, 100 * (i + 1)));\n  }\n  \n  console.error(`Failed to store ${key} after ${retries} retries`);\n  return false;\n};\n\n// Batch storage operations\nexport const setStorageItems = (items) => {\n  const results = {};\n  Object.entries(items).forEach(([key, value]) => {\n    results[key] = setStorageItem(key, value);\n  });\n  return results;\n};\n\n// Get multiple storage items\nexport const getStorageItems = (keys) => {\n  const results = {};\n  keys.forEach(key => {\n    results[key] = getStorageItem(key);\n  });\n  return results;\n};\n\nexport default crossBrowserStorage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/utils/storageCompatibilityTest.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'cleanupStorage' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"cleanupStorage"},"fix":{"range":[334,352],"text":""},"desc":"Remove unused variable 'cleanupStorage'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":234,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":234,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":278,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":278,"endColumn":47}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Cross-Browser Storage Compatibility Test Suite\n * \n * This test suite validates localStorage compatibility across all major browsers\n * and provides debugging information for storage-related issues.\n */\n\nimport { \n  getStorageItem, \n  setStorageItem, \n  removeStorageItem,\n  getPlatformInfo,\n  validateStorage,\n  getStorageInfo,\n  cleanupStorage,\n  isPrivateBrowsing,\n  testStorageCompatibility\n} from './safariLocalStorage';\n\n// Test data for storage operations\nconst TEST_DATA = {\n  simple: 'test-value',\n  number: 42,\n  boolean: true,\n  object: { name: 'test', nested: { value: 123 } },\n  array: [1, 2, 3, 'test'],\n  special: 'test with special chars: 中文 🚀 ñoño',\n  large: 'x'.repeat(1000) // 1KB string\n};\n\n// Storage compatibility test results\nclass CompatibilityTestResults {\n  constructor() {\n    this.platform = null;\n    this.browserInfo = null;\n    this.testResults = {};\n    this.errors = [];\n    this.warnings = [];\n    this.performance = {};\n  }\n\n  addResult(test, success, details = {}) {\n    this.testResults[test] = {\n      success,\n      details,\n      timestamp: Date.now()\n    };\n  }\n\n  addError(error) {\n    this.errors.push({\n      error: error.message || error,\n      timestamp: Date.now()\n    });\n  }\n\n  addWarning(warning) {\n    this.warnings.push({\n      warning,\n      timestamp: Date.now()\n    });\n  }\n\n  getScore() {\n    const total = Object.keys(this.testResults).length;\n    const passed = Object.values(this.testResults).filter(r => r.success).length;\n    return total > 0 ? Math.round((passed / total) * 100) : 0;\n  }\n\n  getSummary() {\n    return {\n      platform: this.platform,\n      browser: this.browserInfo,\n      score: this.getScore(),\n      totalTests: Object.keys(this.testResults).length,\n      passedTests: Object.values(this.testResults).filter(r => r.success).length,\n      failedTests: Object.values(this.testResults).filter(r => !r.success).length,\n      errors: this.errors.length,\n      warnings: this.warnings.length,\n      performance: this.performance\n    };\n  }\n}\n\n// Main compatibility test suite\nexport class StorageCompatibilityTester {\n  constructor() {\n    this.results = new CompatibilityTestResults();\n  }\n\n  async runFullTestSuite() {\n    console.log('🧪 Starting comprehensive storage compatibility tests...');\n    \n    try {\n      // Get platform information\n      await this.testPlatformDetection();\n      \n      // Basic functionality tests\n      await this.testBasicOperations();\n      \n      // Data type handling tests\n      await this.testDataTypes();\n      \n      // Error handling tests\n      await this.testErrorHandling();\n      \n      // Performance tests\n      await this.testPerformance();\n      \n      // Storage capacity tests\n      await this.testStorageCapacity();\n      \n      // Cross-tab synchronization tests\n      await this.testCrossTabSync();\n      \n      // Private browsing tests\n      await this.testPrivateBrowsing();\n      \n      console.log('✅ Storage compatibility tests completed');\n      return this.results;\n      \n    } catch (error) {\n      console.error('❌ Test suite failed:', error);\n      this.results.addError(error);\n      return this.results;\n    }\n  }\n\n  async testPlatformDetection() {\n    try {\n      const platformInfo = getPlatformInfo();\n      this.results.platform = platformInfo;\n      this.results.browserInfo = {\n        browser: platformInfo.browser,\n        version: platformInfo.browserVersion,\n        platform: platformInfo.platform\n      };\n      \n      this.results.addResult('platform_detection', true, platformInfo);\n      console.log('✅ Platform detection successful:', platformInfo);\n    } catch (error) {\n      this.results.addResult('platform_detection', false, { error: error.message });\n      this.results.addError(error);\n    }\n  }\n\n  async testBasicOperations() {\n    console.log('🔍 Testing basic storage operations...');\n    \n    // Test set operation\n    try {\n      const success = setStorageItem('test_basic', 'test_value');\n      this.results.addResult('basic_set', success);\n    } catch (error) {\n      this.results.addResult('basic_set', false, { error: error.message });\n      this.results.addError(error);\n    }\n\n    // Test get operation\n    try {\n      const value = getStorageItem('test_basic');\n      const success = value === 'test_value';\n      this.results.addResult('basic_get', success, { retrieved: value });\n    } catch (error) {\n      this.results.addResult('basic_get', false, { error: error.message });\n      this.results.addError(error);\n    }\n\n    // Test remove operation\n    try {\n      const success = removeStorageItem('test_basic');\n      const stillExists = getStorageItem('test_basic');\n      this.results.addResult('basic_remove', success && !stillExists);\n    } catch (error) {\n      this.results.addResult('basic_remove', false, { error: error.message });\n      this.results.addError(error);\n    }\n  }\n\n  async testDataTypes() {\n    console.log('🔍 Testing data type handling...');\n    \n    for (const [key, value] of Object.entries(TEST_DATA)) {\n      try {\n        // Store the value\n        const setSuccess = setStorageItem(`test_${key}`, value);\n        \n        // Retrieve the value\n        const retrieved = getStorageItem(`test_${key}`);\n        \n        // Compare values (handle different data types)\n        let isEqual = false;\n        if (typeof value === 'object') {\n          isEqual = JSON.stringify(value) === JSON.stringify(retrieved);\n        } else {\n          isEqual = value === retrieved;\n        }\n        \n        this.results.addResult(`datatype_${key}`, setSuccess && isEqual, {\n          original: value,\n          retrieved: retrieved,\n          originalType: typeof value,\n          retrievedType: typeof retrieved\n        });\n        \n        // Cleanup\n        removeStorageItem(`test_${key}`);\n        \n      } catch (error) {\n        this.results.addResult(`datatype_${key}`, false, { error: error.message });\n        this.results.addError(error);\n      }\n    }\n  }\n\n  async testErrorHandling() {\n    console.log('🔍 Testing error handling...');\n    \n    // Test invalid key handling\n    try {\n      const value = getStorageItem(null);\n      this.results.addResult('error_null_key', value === '', { value });\n    } catch (error) {\n      this.results.addResult('error_null_key', false, { error: error.message });\n    }\n\n    // Test setting invalid values\n    try {\n      const circular = {};\n      circular.self = circular;\n      const success = setStorageItem('test_circular', circular);\n      this.results.addResult('error_circular_object', !success);\n      removeStorageItem('test_circular');\n    } catch (error) {\n      this.results.addResult('error_circular_object', true, { \n        message: 'Correctly handled circular reference' \n      });\n    }\n  }\n\n  async testPerformance() {\n    console.log('🔍 Testing storage performance...');\n    \n    const performanceTests = {\n      'small_write': () => setStorageItem('perf_small', 'x'.repeat(100)),\n      'small_read': () => getStorageItem('perf_small'),\n      'medium_write': () => setStorageItem('perf_medium', 'x'.repeat(10000)),\n      'medium_read': () => getStorageItem('perf_medium'),\n      'json_write': () => setStorageItem('perf_json', { data: 'x'.repeat(1000) }),\n      'json_read': () => getStorageItem('perf_json')\n    };\n\n    for (const [testName, testFn] of Object.entries(performanceTests)) {\n      try {\n        const start = performance.now();\n        const result = testFn();\n        const end = performance.now();\n        const duration = end - start;\n        \n        this.results.performance[testName] = duration;\n        this.results.addResult(`performance_${testName}`, true, { \n          duration: `${duration.toFixed(2)}ms`,\n          success: !!result\n        });\n        \n        if (duration > 100) {\n          this.results.addWarning(`Slow ${testName}: ${duration.toFixed(2)}ms`);\n        }\n        \n      } catch (error) {\n        this.results.addResult(`performance_${testName}`, false, { error: error.message });\n        this.results.addError(error);\n      }\n    }\n\n    // Cleanup performance test data\n    ['perf_small', 'perf_medium', 'perf_json'].forEach(key => {\n      try { removeStorageItem(key); } catch (e) { /* ignore */ }\n    });\n  }\n\n  async testStorageCapacity() {\n    console.log('🔍 Testing storage capacity...');\n    \n    try {\n      const storageInfo = await getStorageInfo();\n      this.results.addResult('storage_info', true, storageInfo);\n      \n      if (storageInfo.usagePercent > 80) {\n        this.results.addWarning(`High storage usage: ${storageInfo.usagePercent}%`);\n      }\n      \n    } catch (error) {\n      this.results.addResult('storage_info', false, { error: error.message });\n    }\n  }\n\n  async testCrossTabSync() {\n    console.log('🔍 Testing cross-tab synchronization...');\n    \n    try {\n      // This test is limited as we can't actually open new tabs in a test\n      // But we can test the storage event setup\n      setStorageItem('test_cross_tab', 'initial_value');\n      \n      // Simulate storage change\n      const event = new StorageEvent('storage', {\n        key: 'test_cross_tab',\n        newValue: 'changed_value',\n        oldValue: 'initial_value'\n      });\n      \n      const hasEventListener = typeof window.addEventListener === 'function';\n      this.results.addResult('cross_tab_support', hasEventListener, {\n        hasEventListener,\n        eventType: typeof event\n      });\n      \n      removeStorageItem('test_cross_tab');\n      \n    } catch (error) {\n      this.results.addResult('cross_tab_support', false, { error: error.message });\n      this.results.addError(error);\n    }\n  }\n\n  async testPrivateBrowsing() {\n    console.log('🔍 Testing private browsing detection...');\n    \n    try {\n      const isPrivate = isPrivateBrowsing();\n      const validationResult = testStorageCompatibility();\n      \n      this.results.addResult('private_browsing_detection', true, {\n        isPrivate,\n        validation: validationResult\n      });\n      \n      if (isPrivate) {\n        this.results.addWarning('Private browsing mode detected - storage may be limited');\n      }\n      \n    } catch (error) {\n      this.results.addResult('private_browsing_detection', false, { error: error.message });\n      this.results.addError(error);\n    }\n  }\n\n  // Quick test for essential functionality\n  static async quickTest() {\n    console.log('🚀 Running quick storage compatibility test...');\n    \n    const tester = new StorageCompatibilityTester();\n    \n    try {\n      await tester.testPlatformDetection();\n      await tester.testBasicOperations();\n      \n      const summary = tester.results.getSummary();\n      console.log('📊 Quick test results:', summary);\n      \n      if (summary.score >= 80) {\n        console.log('✅ Storage compatibility: GOOD');\n      } else if (summary.score >= 60) {\n        console.log('⚠️ Storage compatibility: FAIR');\n      } else {\n        console.log('❌ Storage compatibility: POOR');\n      }\n      \n      return summary;\n      \n    } catch (error) {\n      console.error('❌ Quick test failed:', error);\n      return { score: 0, error: error.message };\n    }\n  }\n}\n\n// Export test utilities\nexport const runStorageCompatibilityTest = () => {\n  const tester = new StorageCompatibilityTester();\n  return tester.runFullTestSuite();\n};\n\nexport const runQuickStorageTest = () => {\n  return StorageCompatibilityTester.quickTest();\n};\n\n// Utility function to log detailed storage information\nexport const logStorageDebugInfo = async () => {\n  console.group('🔧 Storage Debug Information');\n  \n  try {\n    const platformInfo = getPlatformInfo();\n    console.log('Platform Info:', platformInfo);\n    \n    const storageInfo = await getStorageInfo();\n    console.log('Storage Info:', storageInfo);\n    \n    const validation = validateStorage();\n    console.log('Validation:', validation);\n    \n    const isPrivate = isPrivateBrowsing();\n    console.log('Private Browsing:', isPrivate);\n    \n  } catch (error) {\n    console.error('Failed to get debug info:', error);\n  }\n  \n  console.groupEnd();\n};\n\nexport default StorageCompatibilityTester;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/src/shared/utils/utils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mac/Documents/Projects/YakRooms/Organized-FE/YakRooms-FE/vite.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]

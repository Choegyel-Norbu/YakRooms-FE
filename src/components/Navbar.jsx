// Navbar.jsx
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
// Assuming useAuth is from your project's services
// import { useAuth } from "../services/AuthProvider"; // Uncomment in your actual project

// --- Simplified shadcn/ui components for this immersive ---
// In a real project, these would be imported from '@/components/ui/button',
// '@/components/ui/avatar', '@/components/ui/select', '@/components/ui/sheet',
// and '@/lib/utils' after being generated by shadcn/ui CLI.

// A simple utility to combine class names, similar to `clsx` and `tailwind-merge`
const cn = (...classes) => classes.filter(Boolean).join(" ");

// Simplified Button Component (mimicking shadcn/ui's Button)
const Button = ({
  children,
  variant = "default",
  size = "default",
  className = "",
  ...props
}) => {
  const baseClasses =
    "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50";

  const variantClasses = {
    default: "bg-blue-600 text-white hover:bg-blue-700 shadow-sm",
    destructive: "bg-red-600 text-white hover:bg-red-700",
    outline:
      "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
    secondary: "bg-gray-200 text-gray-800 hover:bg-gray-300",
    ghost: "hover:bg-gray-700 text-gray-300", // Adjusted for dark navbar background
    link: "text-primary underline-offset-4 hover:underline",
  };

  const sizeClasses = {
    default: "h-10 px-4 py-2",
    sm: "h-9 px-3",
    lg: "h-11 px-8",
    icon: "h-10 w-10",
  };

  const finalClasses = cn(
    baseClasses,
    variantClasses[variant],
    sizeClasses[size],
    className
  );

  return (
    <button className={finalClasses} {...props}>
      {children}
    </button>
  );
};

// Simplified Avatar Component (mimicking shadcn/ui's Avatar)
const Avatar = ({ children, className = "", ...props }) => (
  <div
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  >
    {children}
  </div>
);

const AvatarImage = ({ src, alt, className = "", ...props }) => (
  <img
    src={src}
    alt={alt}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
);

const AvatarFallback = ({ children, className = "", ...props }) => (
  <div
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  >
    {children}
  </div>
);

// Simplified Select Components (mimicking shadcn/ui's Select)
// This is a very basic mock for demonstration. Actual shadcn Select is more complex.
const Select = ({ children, defaultValue, onValueChange, ...props }) => {
  const [value, setValue] = useState(defaultValue);
  const handleChange = (e) => {
    setValue(e.target.value);
    if (onValueChange) onValueChange(e.target.value);
  };
  return (
    <select
      className="bg-slate-600 dark:bg-slate-700 text-gray-300 text-sm rounded-md px-2 py-1 focus:outline-none focus:ring-1 focus:ring-yellow-500"
      value={value}
      onChange={handleChange}
      {...props}
    >
      {children}
    </select>
  );
};
const SelectTrigger = ({ children, className = "", ...props }) => (
  <div
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    {/* Add a simple arrow icon */}
    <svg
      xmlns="http://www.w3.org/2000/svg"
      className="h-4 w-4 opacity-50"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        d="M19 9l-7 7-7-7"
      />
    </svg>
  </div>
);
const SelectValue = ({ children, placeholder }) => (
  <span>{children || placeholder}</span>
);
const SelectContent = ({ children, className = "", ...props }) => (
  <div
    className={cn(
      "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  >
    <div className="p-1">{children}</div>
  </div>
);
const SelectGroup = ({ children, className = "", ...props }) => (
  <div className={cn("p-1 w-full", className)} {...props}>
    {children}
  </div>
);
const SelectItem = ({ children, value, className = "", ...props }) => (
  <div
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
    data-value={value}
  >
    {children}
  </div>
);
const SelectLabel = ({ children, className = "", ...props }) => (
  <div
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  >
    {children}
  </div>
);

// Simplified Sheet Components (mimicking shadcn/ui's Sheet)
// This is a very basic mock. Actual shadcn Sheet uses Radix UI primitives.
const Sheet = ({ children }) => <>{children}</>;
const SheetTrigger = ({ children, className = "", ...props }) => (
  <button
    className={cn(
      "inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-yellow-400 hover:bg-slate-700 focus:outline-none transition-colors",
      className
    )}
    {...props}
  >
    {children}
  </button>
);
const SheetContent = ({
  children,
  side = "right",
  className = "",
  ...props
}) => (
  <div
    className={cn(
      "fixed inset-y-0 z-50 w-full bg-slate-700 dark:bg-slate-800 p-6 shadow-lg transition ease-in-out duration-300",
      side === "right" &&
        "right-0 border-l data-[state=closed]:translate-x-full data-[state=open]:translate-x-0",
      side === "left" &&
        "left-0 border-r data-[state=closed]:-translate-x-full data-[state=open]:translate-x-0",
      className
    )}
    {...props}
  >
    {children}
  </div>
);

// Mock useAuth for demonstration purposes
const useAuth = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(false); // Simulate auth state
  const login = () => setIsAuthenticated(true);
  const logout = () => setIsAuthenticated(false);
  return { isAuthenticated, login, logout };
};

const Navbar = ({ onLoginClick }) => {
  const { isAuthenticated, logout } = useAuth(); // Use the mock useAuth for this example
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isScrolled, setIsScrolled] = useState(false);
  const [darkMode, setDarkMode] = useState(false); // State for dark mode toggle

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 10);
    };
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  // Toggle dark mode
  useEffect(() => {
    if (darkMode) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
  }, [darkMode]);

  const navLinks = [
    { name: "Home", path: "/" },
    { name: "Hotels", path: "/hotels" },
    { name: "Restaurants", path: "/restaurants" },
    { name: "Contact Us", path: "/contact" },
  ];

  return (
    <header
      className={cn(
        "fixed w-full z-50 transition-all duration-300",
        isScrolled
          ? "bg-slate-800 dark:bg-slate-900 shadow-lg backdrop-blur-sm bg-opacity-90"
          : "bg-slate-800 dark:bg-slate-900"
      )}
    >
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between h-16">
          {/* Left Section - Logo */}
          <div className="flex-shrink-0 flex items-center">
            <Link
              to="/"
              className="flex items-center space-x-2 text-yellow-500 hover:text-yellow-400 transition-colors"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-8 w-8"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"
                />
              </svg>
              <span className="text-xl font-bold">YakRooms</span>
            </Link>
          </div>

          {/* Center Section - Desktop Navigation */}
          <div className="hidden md:block">
            <div className="ml-10 flex items-center space-x-8">
              {navLinks.map((link) => (
                <Link
                  key={link.name}
                  to={link.path}
                  // Using Button with ghost variant for navigation links
                  className="text-gray-300 hover:text-yellow-400 px-3 py-2 rounded-md text-sm font-medium transition-colors"
                >
                  {link.name}
                </Link>
              ))}
            </div>
          </div>

          {/* Right Section - Auth & Controls */}
          <div className="flex items-center space-x-4">
            {/* Language Selector */}
            <div className="relative hidden md:block">
              <Link to="/hotelAdmin" className="text-white">
                Dashboard
              </Link>
            </div>

            {/* Auth Buttons */}
            {isAuthenticated ? (
              <div className="relative">
                <Button
                  variant="ghost" // Using ghost variant for a subtle button
                  className="flex items-center space-x-1 text-gray-300 hover:text-yellow-400 focus:outline-none transition-colors"
                  onClick={logout}
                  aria-label="Logout"
                >
                  <Avatar className="h-8 w-8">
                    <AvatarFallback className="bg-yellow-600 text-white font-medium">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-5 w-5"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"
                        />
                      </svg>
                    </AvatarFallback>
                  </Avatar>
                </Button>
              </div>
            ) : (
              <div className="hidden md:flex items-center space-x-2">
                <Button
                  variant="ghost" // Using ghost variant for login
                  onClick={onLoginClick}
                  className="text-gray-300 hover:text-yellow-400" // Custom color override
                  aria-label="Login"
                >
                  Login
                </Button>
              </div>
            )}

            {/* Mobile menu button - using shadcn/ui SheetTrigger */}
            <div className="md:hidden flex items-center">
              <Sheet>
                <SheetTrigger asChild>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
                    aria-expanded={isMobileMenuOpen}
                    aria-label="Toggle mobile menu"
                  >
                    <span className="sr-only">Open main menu</span>
                    {isMobileMenuOpen ? (
                      <svg
                        className="h-6 w-6"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                        aria-hidden="true"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth="2"
                          d="M6 18L18 6M6 6l12 12"
                        />
                      </svg>
                    ) : (
                      <svg
                        className="h-6 w-6"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                        aria-hidden="true"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth="2"
                          d="M4 6h16M4 12h16M4 18h16"
                        />
                      </svg>
                    )}
                  </Button>
                </SheetTrigger>
                {/* Mobile Menu Content - using shadcn/ui SheetContent */}
                <SheetContent
                  side="right" // Slide in from the right
                  className={cn(
                    "md:hidden transition-all duration-300 ease-in-out",
                    isMobileMenuOpen ? "translate-x-0" : "translate-x-full" // Control visibility with state
                  )}
                  // The actual shadcn SheetContent would handle its own open/close state
                  // For this mock, we're mimicking the transition with isMobileMenuOpen
                >
                  <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-slate-700 dark:bg-slate-800 h-full">
                    {navLinks.map((link) => (
                      <Link
                        key={link.name}
                        to={link.path}
                        className="block px-3 py-2 rounded-md text-base font-medium text-gray-300 hover:text-yellow-400 hover:bg-slate-600 transition-colors"
                        onClick={() => setIsMobileMenuOpen(false)}
                      >
                        {link.name}
                      </Link>
                    ))}
                    <div className="pt-4 border-t border-slate-600">
                      <div className="flex items-center justify-between px-3">
                        {/* Language Selector - using shadcn/ui Select */}
                        <Select
                          defaultValue="en"
                          onValueChange={(value) =>
                            console.log("Language changed to:", value)
                          }
                        >
                          <SelectTrigger className="w-[100px] bg-slate-600 text-gray-300 border-none">
                            <SelectValue placeholder="Select Language" />
                          </SelectTrigger>
                          <SelectContent className="bg-slate-700 text-gray-300 border-slate-600">
                            <SelectGroup>
                              <SelectLabel>Languages</SelectLabel>
                              <SelectItem value="en">English</SelectItem>
                              <SelectItem value="dz">Dzongkha</SelectItem>
                            </SelectGroup>
                          </SelectContent>
                        </Select>

                        {isAuthenticated ? (
                          <Button
                            variant="ghost"
                            onClick={logout}
                            className="text-gray-300 hover:text-yellow-400"
                            aria-label="Logout"
                          >
                            Logout
                          </Button>
                        ) : (
                          <div className="flex space-x-2">
                            <Button
                              variant="ghost"
                              onClick={onLoginClick}
                              className="text-gray-300 hover:text-yellow-400"
                              aria-label="Login"
                            >
                              Login
                            </Button>
                            <Button
                              variant="default" // Using default variant for register
                              onClick={onLoginClick}
                              className="bg-yellow-600 hover:bg-yellow-700 text-white" // Custom color override
                              aria-label="Register"
                            >
                              Register
                            </Button>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </SheetContent>
              </Sheet>
            </div>
          </div>
        </div>
      </div>
    </header>
  );
};

export default Navbar;
